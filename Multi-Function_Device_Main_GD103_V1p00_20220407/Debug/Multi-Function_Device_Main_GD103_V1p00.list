
Multi-Function_Device_Main_GD103_V1p00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000727c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08007460  08007460  00017460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac8  08007ac8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007ac8  08007ac8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ac8  08007ac8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000074  08007b44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08007b44  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e64a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f0f  00000000  00000000  0003e6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  000425f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  00043bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e62d  00000000  00000000  00045038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcf2  00000000  00000000  00063665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7045  00000000  00000000  0007f357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012639c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000627c  00000000  00000000  001263f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08007448 	.word	0x08007448

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08007448 	.word	0x08007448

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__aeabi_f2uiz>:
 80006e0:	0042      	lsls	r2, r0, #1
 80006e2:	d20e      	bcs.n	8000702 <__aeabi_f2uiz+0x22>
 80006e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006e8:	d30b      	bcc.n	8000702 <__aeabi_f2uiz+0x22>
 80006ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006f2:	d409      	bmi.n	8000708 <__aeabi_f2uiz+0x28>
 80006f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000700:	4770      	bx	lr
 8000702:	f04f 0000 	mov.w	r0, #0
 8000706:	4770      	bx	lr
 8000708:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800070c:	d101      	bne.n	8000712 <__aeabi_f2uiz+0x32>
 800070e:	0242      	lsls	r2, r0, #9
 8000710:	d102      	bne.n	8000718 <__aeabi_f2uiz+0x38>
 8000712:	f04f 30ff 	mov.w	r0, #4294967295
 8000716:	4770      	bx	lr
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <Configure_CapTouch>:
* Description    : Configure IO Expander
* Input          : None
* Output         : None
*******************************************************************************/
void Configure_CapTouch(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af04      	add	r7, sp, #16
	uint8_t memVal[1];

	HAL_Delay(100);
 8000726:	2064      	movs	r0, #100	; 0x64
 8000728:	f002 f906 	bl	8002938 <HAL_Delay>

	// Calibration Speed Control Register
	memVal[0] = 0x00;//0x59;
 800072c:	2300      	movs	r3, #0
 800072e:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_CAL_CTRL, 1, (uint8_t*)memVal, 1, 10);
 8000730:	230a      	movs	r3, #10
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2301      	movs	r3, #1
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	2209      	movs	r2, #9
 8000740:	21d2      	movs	r1, #210	; 0xd2
 8000742:	484f      	ldr	r0, [pc, #316]	; (8000880 <Configure_CapTouch+0x160>)
 8000744:	f003 f9a0 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000748:	200a      	movs	r0, #10
 800074a:	f002 f8f5 	bl	8002938 <HAL_Delay>

	// Sensitive Register
	memVal[0] = 0x95;
 800074e:	2395      	movs	r3, #149	; 0x95
 8000750:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_SENSITIVE1, 1, (uint8_t*)memVal, 1, 10);	// Sensitive 1
 8000752:	230a      	movs	r3, #10
 8000754:	9302      	str	r3, [sp, #8]
 8000756:	2301      	movs	r3, #1
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	2200      	movs	r2, #0
 8000762:	21d2      	movs	r1, #210	; 0xd2
 8000764:	4846      	ldr	r0, [pc, #280]	; (8000880 <Configure_CapTouch+0x160>)
 8000766:	f003 f98f 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f002 f8e4 	bl	8002938 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_SENSITIVE2, 1, (uint8_t*)memVal, 1, 10);	// Sensitive 2
 8000770:	230a      	movs	r3, #10
 8000772:	9302      	str	r3, [sp, #8]
 8000774:	2301      	movs	r3, #1
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2301      	movs	r3, #1
 800077e:	2201      	movs	r2, #1
 8000780:	21d2      	movs	r1, #210	; 0xd2
 8000782:	483f      	ldr	r0, [pc, #252]	; (8000880 <Configure_CapTouch+0x160>)
 8000784:	f003 f980 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000788:	200a      	movs	r0, #10
 800078a:	f002 f8d5 	bl	8002938 <HAL_Delay>

	// General Control Register
	memVal[0] = 0x02;
 800078e:	2302      	movs	r3, #2
 8000790:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_CTRL1, 1, (uint8_t*)memVal, 1, 10);
 8000792:	230a      	movs	r3, #10
 8000794:	9302      	str	r3, [sp, #8]
 8000796:	2301      	movs	r3, #1
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	2203      	movs	r2, #3
 80007a2:	21d2      	movs	r1, #210	; 0xd2
 80007a4:	4836      	ldr	r0, [pc, #216]	; (8000880 <Configure_CapTouch+0x160>)
 80007a6:	f003 f96f 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f002 f8c4 	bl	8002938 <HAL_Delay>
	memVal[0] = 0x13;
 80007b0:	2313      	movs	r3, #19
 80007b2:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_CTRL2, 1, (uint8_t*)memVal, 1, 10);
 80007b4:	230a      	movs	r3, #10
 80007b6:	9302      	str	r3, [sp, #8]
 80007b8:	2301      	movs	r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2301      	movs	r3, #1
 80007c2:	2204      	movs	r2, #4
 80007c4:	21d2      	movs	r1, #210	; 0xd2
 80007c6:	482e      	ldr	r0, [pc, #184]	; (8000880 <Configure_CapTouch+0x160>)
 80007c8:	f003 f95e 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80007cc:	200a      	movs	r0, #10
 80007ce:	f002 f8b3 	bl	8002938 <HAL_Delay>

	// Channel 1~6 Sensing Control Register
	memVal[0] = 0x38;
 80007d2:	2338      	movs	r3, #56	; 0x38
 80007d4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_CH_HOLD, 1, (uint8_t*)memVal, 1, 10);
 80007d6:	230a      	movs	r3, #10
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	2301      	movs	r3, #1
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2301      	movs	r3, #1
 80007e4:	2206      	movs	r2, #6
 80007e6:	21d2      	movs	r1, #210	; 0xd2
 80007e8:	4825      	ldr	r0, [pc, #148]	; (8000880 <Configure_CapTouch+0x160>)
 80007ea:	f003 f94d 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f002 f8a2 	bl	8002938 <HAL_Delay>

	// Channel 2~6 Dome Key Input Control Register
	memVal[0] = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_DOME_EN, 1, (uint8_t*)memVal, 1, 10);
 80007f8:	230a      	movs	r3, #10
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	2208      	movs	r2, #8
 8000808:	21d2      	movs	r1, #210	; 0xd2
 800080a:	481d      	ldr	r0, [pc, #116]	; (8000880 <Configure_CapTouch+0x160>)
 800080c:	f003 f93c 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000810:	200a      	movs	r0, #10
 8000812:	f002 f891 	bl	8002938 <HAL_Delay>

	// PWM Control Register
	memVal[0] = 0x1F;
 8000816:	231f      	movs	r3, #31
 8000818:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_PWM0, 1, (uint8_t*)memVal, 1, 10);
 800081a:	230a      	movs	r3, #10
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	2301      	movs	r3, #1
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2213      	movs	r2, #19
 800082a:	21d2      	movs	r1, #210	; 0xd2
 800082c:	4814      	ldr	r0, [pc, #80]	; (8000880 <Configure_CapTouch+0x160>)
 800082e:	f003 f92b 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000832:	200a      	movs	r0, #10
 8000834:	f002 f880 	bl	8002938 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_PWM1, 1, (uint8_t*)memVal, 1, 10);
 8000838:	230a      	movs	r3, #10
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2301      	movs	r3, #1
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	2214      	movs	r2, #20
 8000848:	21d2      	movs	r1, #210	; 0xd2
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <Configure_CapTouch+0x160>)
 800084c:	f003 f91c 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000850:	200a      	movs	r0, #10
 8000852:	f002 f871 	bl	8002938 <HAL_Delay>
//	HAL_Delay(10);
//	memVal[0] = 0x02;
//	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_PAT_B1, 1, (uint8_t*)memVal, 1, 10);
//	HAL_Delay(10);

	memVal[0] = 0x13;
 8000856:	2313      	movs	r3, #19
 8000858:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, ADDR_SLAVE_TS06, R_CTRL2, 1, (uint8_t*)memVal, 1, 10);
 800085a:	230a      	movs	r3, #10
 800085c:	9302      	str	r3, [sp, #8]
 800085e:	2301      	movs	r3, #1
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	2204      	movs	r2, #4
 800086a:	21d2      	movs	r1, #210	; 0xd2
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <Configure_CapTouch+0x160>)
 800086e:	f003 f90b 	bl	8003a88 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000872:	200a      	movs	r0, #10
 8000874:	f002 f860 	bl	8002938 <HAL_Delay>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000168 	.word	0x20000168

08000884 <KeyVariableInit>:
* Description    :
* Input          : None
* Output         : None
*******************************************************************************/
void KeyVariableInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
    KeyScanState = KEY_STATE_UP;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <KeyVariableInit+0x28>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
    KeyNRead     = 0;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <KeyVariableInit+0x2c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
    KeyBufInIx   = KeyBufOutIx  = 0;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <KeyVariableInit+0x30>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <KeyVariableInit+0x30>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <KeyVariableInit+0x34>)
 80008a0:	6013      	str	r3, [r2, #0]
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000011c 	.word	0x2000011c
 80008b0:	20000130 	.word	0x20000130
 80008b4:	20000118 	.word	0x20000118
 80008b8:	20000134 	.word	0x20000134

080008bc <HeadLEDControl>:
 * Description    : Blink Status LED
 * Input          : lednum = Indicator LED number
 * Output         : None
 *******************************************************************************/
void HeadLEDControl(uint8_t ledcolor, uint8_t ledbright)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	460a      	mov	r2, r1
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71bb      	strb	r3, [r7, #6]
	uint16_t temp_ledbright;

	htim1.Instance->PSC = 1;
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <HeadLEDControl+0x144>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2201      	movs	r2, #1
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
	htim1.Instance->ARR = 2999;
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <HeadLEDControl+0x144>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c

	temp_ledbright = (uint32_t)((((float)ledbright / 100) * 3000) - 1);
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fd55 	bl	8000390 <__aeabi_ui2f>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4946      	ldr	r1, [pc, #280]	; (8000a04 <HeadLEDControl+0x148>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe5c 	bl	80005a8 <__aeabi_fdiv>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4945      	ldr	r1, [pc, #276]	; (8000a08 <HeadLEDControl+0x14c>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fda3 	bl	8000440 <__aeabi_fmul>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc93 	bl	800022c <__aeabi_fsub>
 8000906:	4603      	mov	r3, r0
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fee9 	bl	80006e0 <__aeabi_f2uiz>
 800090e:	4603      	mov	r3, r0
 8000910:	81fb      	strh	r3, [r7, #14]

	switch(ledcolor)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b04      	cmp	r3, #4
 8000916:	d86e      	bhi.n	80009f6 <HeadLEDControl+0x13a>
 8000918:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <HeadLEDControl+0x64>)
 800091a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091e:	bf00      	nop
 8000920:	08000935 	.word	0x08000935
 8000924:	08000967 	.word	0x08000967
 8000928:	08000989 	.word	0x08000989
 800092c:	080009ab 	.word	0x080009ab
 8000930:	080009cd 	.word	0x080009cd
	{
	case HEAD_NONE:
		htim1.Instance->CCR1 = temp_ledbright;
 8000934:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <HeadLEDControl+0x144>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	89fa      	ldrh	r2, [r7, #14]
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2 = temp_ledbright;
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <HeadLEDControl+0x144>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	89fa      	ldrh	r2, [r7, #14]
 8000942:	639a      	str	r2, [r3, #56]	; 0x38
		htim1.Instance->CCR3 = temp_ledbright;
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <HeadLEDControl+0x144>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	89fa      	ldrh	r2, [r7, #14]
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	482c      	ldr	r0, [pc, #176]	; (8000a00 <HeadLEDControl+0x144>)
 8000950:	f004 fabe 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000954:	2104      	movs	r1, #4
 8000956:	482a      	ldr	r0, [pc, #168]	; (8000a00 <HeadLEDControl+0x144>)
 8000958:	f004 faba 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800095c:	2108      	movs	r1, #8
 800095e:	4828      	ldr	r0, [pc, #160]	; (8000a00 <HeadLEDControl+0x144>)
 8000960:	f004 fab6 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		break;
 8000964:	e047      	b.n	80009f6 <HeadLEDControl+0x13a>
	case HEAD_IR:
		htim1.Instance->CCR1 = temp_ledbright;
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <HeadLEDControl+0x144>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	89fa      	ldrh	r2, [r7, #14]
 800096c:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800096e:	2100      	movs	r1, #0
 8000970:	4823      	ldr	r0, [pc, #140]	; (8000a00 <HeadLEDControl+0x144>)
 8000972:	f004 f9f3 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000976:	2104      	movs	r1, #4
 8000978:	4821      	ldr	r0, [pc, #132]	; (8000a00 <HeadLEDControl+0x144>)
 800097a:	f004 faa9 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800097e:	2108      	movs	r1, #8
 8000980:	481f      	ldr	r0, [pc, #124]	; (8000a00 <HeadLEDControl+0x144>)
 8000982:	f004 faa5 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		break;
 8000986:	e036      	b.n	80009f6 <HeadLEDControl+0x13a>
	case HEAD_BLUE:
		htim1.Instance->CCR2 = temp_ledbright;
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HeadLEDControl+0x144>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	89fa      	ldrh	r2, [r7, #14]
 800098e:	639a      	str	r2, [r3, #56]	; 0x38

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000990:	2100      	movs	r1, #0
 8000992:	481b      	ldr	r0, [pc, #108]	; (8000a00 <HeadLEDControl+0x144>)
 8000994:	f004 fa9c 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000998:	2104      	movs	r1, #4
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <HeadLEDControl+0x144>)
 800099c:	f004 f9de 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80009a0:	2108      	movs	r1, #8
 80009a2:	4817      	ldr	r0, [pc, #92]	; (8000a00 <HeadLEDControl+0x144>)
 80009a4:	f004 fa94 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		break;
 80009a8:	e025      	b.n	80009f6 <HeadLEDControl+0x13a>
	case HEAD_RED:
		htim1.Instance->CCR3 = temp_ledbright;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HeadLEDControl+0x144>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	89fa      	ldrh	r2, [r7, #14]
 80009b0:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80009b2:	2100      	movs	r1, #0
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <HeadLEDControl+0x144>)
 80009b6:	f004 fa8b 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80009ba:	2104      	movs	r1, #4
 80009bc:	4810      	ldr	r0, [pc, #64]	; (8000a00 <HeadLEDControl+0x144>)
 80009be:	f004 fa87 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009c2:	2108      	movs	r1, #8
 80009c4:	480e      	ldr	r0, [pc, #56]	; (8000a00 <HeadLEDControl+0x144>)
 80009c6:	f004 f9c9 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 80009ca:	e014      	b.n	80009f6 <HeadLEDControl+0x13a>
	case HEAD_IRRED:
		htim1.Instance->CCR1 = temp_ledbright;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HeadLEDControl+0x144>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	89fa      	ldrh	r2, [r7, #14]
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR3 = temp_ledbright;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HeadLEDControl+0x144>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	89fa      	ldrh	r2, [r7, #14]
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009dc:	2100      	movs	r1, #0
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <HeadLEDControl+0x144>)
 80009e0:	f004 f9bc 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80009e4:	2104      	movs	r1, #4
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <HeadLEDControl+0x144>)
 80009e8:	f004 fa72 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009ec:	2108      	movs	r1, #8
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <HeadLEDControl+0x144>)
 80009f0:	f004 f9b4 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 80009f4:	bf00      	nop
	}
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200002ec 	.word	0x200002ec
 8000a04:	42c80000 	.word	0x42c80000
 8000a08:	453b8000 	.word	0x453b8000

08000a0c <DiffusionLEDControl>:
 * Description    : Diffusion LED Control function
 * Input          : mode = Currnet mode
 * Output         : None
 *******************************************************************************/
void DiffusionLEDControl(uint8_t mode)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	static uint8_t bt_cnt = 0;

	if(mode == MODE_CHG)		diff_cnt++;
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d106      	bne.n	8000a2a <DiffusionLEDControl+0x1e>
 8000a1c:	4ba7      	ldr	r3, [pc, #668]	; (8000cbc <DiffusionLEDControl+0x2b0>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4ba5      	ldr	r3, [pc, #660]	; (8000cbc <DiffusionLEDControl+0x2b0>)
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e002      	b.n	8000a30 <DiffusionLEDControl+0x24>
	else						diff_cnt = 0;
 8000a2a:	4ba4      	ldr	r3, [pc, #656]	; (8000cbc <DiffusionLEDControl+0x2b0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]

	switch(mode)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b08      	cmp	r3, #8
 8000a34:	f200 813e 	bhi.w	8000cb4 <DiffusionLEDControl+0x2a8>
 8000a38:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <DiffusionLEDControl+0x34>)
 8000a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3e:	bf00      	nop
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a7f 	.word	0x08000a7f
 8000a48:	08000ab1 	.word	0x08000ab1
 8000a4c:	08000cb5 	.word	0x08000cb5
 8000a50:	08000acb 	.word	0x08000acb
 8000a54:	08000b05 	.word	0x08000b05
 8000a58:	08000b3b 	.word	0x08000b3b
 8000a5c:	08000c4d 	.word	0x08000c4d
 8000a60:	08000c81 	.word	0x08000c81
	{
	case POWER_OFF:
		htim2.Instance->CCR1 = 0;
 8000a64:	4b96      	ldr	r3, [pc, #600]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 0;
 8000a6c:	4b94      	ldr	r3, [pc, #592]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2200      	movs	r2, #0
 8000a72:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 0;
 8000a74:	4b92      	ldr	r3, [pc, #584]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c
		//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
		//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
		//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
		break;
 8000a7c:	e11a      	b.n	8000cb4 <DiffusionLEDControl+0x2a8>
	case POWER_ON:
		htim2.Instance->CCR1 = 200;
 8000a7e:	4b90      	ldr	r3, [pc, #576]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	22c8      	movs	r2, #200	; 0xc8
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 200;
 8000a86:	4b8e      	ldr	r3, [pc, #568]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	22c8      	movs	r2, #200	; 0xc8
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 200;
 8000a8e:	4b8c      	ldr	r3, [pc, #560]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	22c8      	movs	r2, #200	; 0xc8
 8000a94:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a96:	2100      	movs	r1, #0
 8000a98:	4889      	ldr	r0, [pc, #548]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000a9a:	f004 f95f 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4887      	ldr	r0, [pc, #540]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000aa2:	f004 f95b 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	4885      	ldr	r0, [pc, #532]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000aaa:	f004 f957 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 8000aae:	e101      	b.n	8000cb4 <DiffusionLEDControl+0x2a8>
	case MODE_CHG:
		htim2.Instance->CCR1 = 0;
 8000ab0:	4b83      	ldr	r3, [pc, #524]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 0;
 8000ab8:	4b81      	ldr	r3, [pc, #516]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 0;
 8000ac0:	4b7f      	ldr	r3, [pc, #508]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000ac8:	e0f4      	b.n	8000cb4 <DiffusionLEDControl+0x2a8>
	case LOW_BAT:
		printf("BAT LOW LED\r\n");
 8000aca:	487e      	ldr	r0, [pc, #504]	; (8000cc4 <DiffusionLEDControl+0x2b8>)
 8000acc:	f005 fd6c 	bl	80065a8 <puts>

		htim2.Instance->CCR1 = 500;
 8000ad0:	4b7b      	ldr	r3, [pc, #492]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 196;
 8000ada:	4b79      	ldr	r3, [pc, #484]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	22c4      	movs	r2, #196	; 0xc4
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 0;
 8000ae2:	4b77      	ldr	r3, [pc, #476]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aea:	2100      	movs	r1, #0
 8000aec:	4874      	ldr	r0, [pc, #464]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000aee:	f004 f935 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000af2:	2104      	movs	r1, #4
 8000af4:	4872      	ldr	r0, [pc, #456]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000af6:	f004 f931 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000afa:	2108      	movs	r1, #8
 8000afc:	4870      	ldr	r0, [pc, #448]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000afe:	f004 f92d 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 8000b02:	e0d7      	b.n	8000cb4 <DiffusionLEDControl+0x2a8>
	case CHARGING:
		htim2.Instance->CCR1 = 0;
 8000b04:	4b6e      	ldr	r3, [pc, #440]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 392;
 8000b0c:	4b6c      	ldr	r3, [pc, #432]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 274;
 8000b16:	4b6a      	ldr	r3, [pc, #424]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b20:	2100      	movs	r1, #0
 8000b22:	4867      	ldr	r0, [pc, #412]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b24:	f004 f91a 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4865      	ldr	r0, [pc, #404]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b2c:	f004 f916 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b30:	2108      	movs	r1, #8
 8000b32:	4863      	ldr	r0, [pc, #396]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b34:	f004 f912 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 8000b38:	e0bc      	b.n	8000cb4 <DiffusionLEDControl+0x2a8>
	case BT_PAIR:
		switch(bt_cnt)
 8000b3a:	4b63      	ldr	r3, [pc, #396]	; (8000cc8 <DiffusionLEDControl+0x2bc>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	f200 80b7 	bhi.w	8000cb2 <DiffusionLEDControl+0x2a6>
 8000b44:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <DiffusionLEDControl+0x140>)
 8000b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4a:	bf00      	nop
 8000b4c:	08000b5d 	.word	0x08000b5d
 8000b50:	08000b95 	.word	0x08000b95
 8000b54:	08000bd1 	.word	0x08000bd1
 8000b58:	08000c0f 	.word	0x08000c0f
		{
		case 0:
			htim2.Instance->CCR1 = 110;
 8000b5c:	4b58      	ldr	r3, [pc, #352]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	226e      	movs	r2, #110	; 0x6e
 8000b62:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = 223;
 8000b64:	4b56      	ldr	r3, [pc, #344]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	22df      	movs	r2, #223	; 0xdf
 8000b6a:	639a      	str	r2, [r3, #56]	; 0x38
			htim2.Instance->CCR3 = 255;
 8000b6c:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	22ff      	movs	r2, #255	; 0xff
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b74:	2100      	movs	r1, #0
 8000b76:	4852      	ldr	r0, [pc, #328]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b78:	f004 f8f0 	bl	8004d5c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4850      	ldr	r0, [pc, #320]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b80:	f004 f8ec 	bl	8004d5c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b84:	2108      	movs	r1, #8
 8000b86:	484e      	ldr	r0, [pc, #312]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b88:	f004 f8e8 	bl	8004d5c <HAL_TIM_PWM_Start>
			bt_cnt = 1;
 8000b8c:	4b4e      	ldr	r3, [pc, #312]	; (8000cc8 <DiffusionLEDControl+0x2bc>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
			break;
 8000b92:	e05a      	b.n	8000c4a <DiffusionLEDControl+0x23e>
		case 1:
			htim2.Instance->CCR1 = 170;
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	22aa      	movs	r2, #170	; 0xaa
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = 396;
 8000b9c:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38
			htim2.Instance->CCR3 = 460;
 8000ba6:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8000bae:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4843      	ldr	r0, [pc, #268]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000bb4:	f004 f8d2 	bl	8004d5c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4841      	ldr	r0, [pc, #260]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000bbc:	f004 f8ce 	bl	8004d5c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	483f      	ldr	r0, [pc, #252]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000bc4:	f004 f8ca 	bl	8004d5c <HAL_TIM_PWM_Start>
			bt_cnt = 2;
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <DiffusionLEDControl+0x2bc>)
 8000bca:	2202      	movs	r2, #2
 8000bcc:	701a      	strb	r2, [r3, #0]
			break;
 8000bce:	e03c      	b.n	8000c4a <DiffusionLEDControl+0x23e>
		case 2:
			htim2.Instance->CCR1 = 340;
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000bd8:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = 792;
 8000bda:	4b39      	ldr	r3, [pc, #228]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f44f 7246 	mov.w	r2, #792	; 0x318
 8000be2:	639a      	str	r2, [r3, #56]	; 0x38
			htim2.Instance->CCR3 = 920;
 8000be4:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f44f 7266 	mov.w	r2, #920	; 0x398
 8000bec:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4833      	ldr	r0, [pc, #204]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000bf2:	f004 f8b3 	bl	8004d5c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4831      	ldr	r0, [pc, #196]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000bfa:	f004 f8af 	bl	8004d5c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000bfe:	2108      	movs	r1, #8
 8000c00:	482f      	ldr	r0, [pc, #188]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c02:	f004 f8ab 	bl	8004d5c <HAL_TIM_PWM_Start>
			bt_cnt = 3;
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <DiffusionLEDControl+0x2bc>)
 8000c08:	2203      	movs	r2, #3
 8000c0a:	701a      	strb	r2, [r3, #0]
			break;
 8000c0c:	e01d      	b.n	8000c4a <DiffusionLEDControl+0x23e>
		case 3:
			htim2.Instance->CCR1 = 170;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	22aa      	movs	r2, #170	; 0xaa
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
			htim2.Instance->CCR2 = 396;
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38
			htim2.Instance->CCR3 = 460;
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8000c28:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c2e:	f004 f895 	bl	8004d5c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c32:	2104      	movs	r1, #4
 8000c34:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c36:	f004 f891 	bl	8004d5c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	4820      	ldr	r0, [pc, #128]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c3e:	f004 f88d 	bl	8004d5c <HAL_TIM_PWM_Start>
			bt_cnt = 0;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <DiffusionLEDControl+0x2bc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
			break;
 8000c48:	bf00      	nop
		}
		break;
 8000c4a:	e032      	b.n	8000cb2 <DiffusionLEDControl+0x2a6>
	case BT_CONNECTED:
		htim2.Instance->CCR1 = 0;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2200      	movs	r2, #0
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 2;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2202      	movs	r2, #2
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 300;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c64:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c66:	2100      	movs	r1, #0
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c6a:	f004 f877 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c6e:	2104      	movs	r1, #4
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c72:	f004 f873 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c76:	2108      	movs	r1, #8
 8000c78:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c7a:	f004 f86f 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 8000c7e:	e019      	b.n	8000cb4 <DiffusionLEDControl+0x2a8>
	case BT_STANDBY:
		htim2.Instance->CCR1 = 255;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	22ff      	movs	r2, #255	; 0xff
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34
		htim2.Instance->CCR2 = 255;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR3 = 255;
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	22ff      	movs	r2, #255	; 0xff
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000c9c:	f004 f85e 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000ca4:	f004 f85a 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ca8:	2108      	movs	r1, #8
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <DiffusionLEDControl+0x2b4>)
 8000cac:	f004 f856 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 8000cb0:	e000      	b.n	8000cb4 <DiffusionLEDControl+0x2a8>
		break;
 8000cb2:	bf00      	nop
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000093 	.word	0x20000093
 8000cc0:	20000334 	.word	0x20000334
 8000cc4:	080074a0 	.word	0x080074a0
 8000cc8:	20000094 	.word	0x20000094

08000ccc <RF_PulseEnable>:
 * Description    : Enable PWM for RF Driver
 * Input          : None
 * Output         : None
 *******************************************************************************/
void RF_PulseEnable(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	// TIM8 Ch4 is used for driving source of RF function
	htim8.Instance->PSC = 1;							// Set Prescaler, 63
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <RF_PulseEnable+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28

	switch(SysMode.OperationIntensity)
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <RF_PulseEnable+0x68>)
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d018      	beq.n	8000d12 <RF_PulseEnable+0x46>
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	dc1f      	bgt.n	8000d24 <RF_PulseEnable+0x58>
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d002      	beq.n	8000cee <RF_PulseEnable+0x22>
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d009      	beq.n	8000d00 <RF_PulseEnable+0x34>
 8000cec:	e01a      	b.n	8000d24 <RF_PulseEnable+0x58>
	{
	case LEVEL1:
		// 1.2MHz
		htim8.Instance -> ARR = 29;								// Set Period, 999
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <RF_PulseEnable+0x64>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	221d      	movs	r2, #29
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim8.Instance -> CCR4 = 15;							// Set Duty(Pulse), 499
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <RF_PulseEnable+0x64>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000cfe:	e011      	b.n	8000d24 <RF_PulseEnable+0x58>
	case LEVEL2:
		// 1.125MHz
		htim8.Instance -> ARR = 31;								// Set Period, 999
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <RF_PulseEnable+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	221f      	movs	r2, #31
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
		htim8.Instance -> CCR4 = 15;							// Set Duty(Pulse), 499
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <RF_PulseEnable+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d10:	e008      	b.n	8000d24 <RF_PulseEnable+0x58>
	case LEVEL3:
		// 1MHz
		htim8.Instance->ARR = 35;							// Set Period, 999
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <RF_PulseEnable+0x64>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2223      	movs	r2, #35	; 0x23
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
		htim8.Instance->CCR4 = 18;						// Set Duty(Pulse), 499
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <RF_PulseEnable+0x64>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2212      	movs	r2, #18
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d22:	bf00      	nop

	// 800kHz
//	htim8.Instance -> ARR = 44;								// Set Period, 999
//	htim8.Instance -> CCR4 = 22;							// Set Duty(Pulse), 499

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000d24:	210c      	movs	r1, #12
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <RF_PulseEnable+0x64>)
 8000d28:	f004 f818 	bl	8004d5c <HAL_TIM_PWM_Start>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000214 	.word	0x20000214
 8000d34:	200000e4 	.word	0x200000e4

08000d38 <RF_PulseDisable>:
 * Description    : Enable PWM for RF Driver
 * Input          : None
 * Output         : None
 *******************************************************************************/
void RF_PulseDisable(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	htim8.Instance->CCR4 = 0;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <RF_PulseDisable+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
//	//HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	20000214 	.word	0x20000214

08000d50 <EMS_PulseEnable>:
 * Description    : Enable EMS Function
 * Input          : None
 * Output         : None
 *******************************************************************************/
void EMS_PulseEnable(uint8_t emsMode)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	RF_DISABLE;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d60:	4859      	ldr	r0, [pc, #356]	; (8000ec8 <EMS_PulseEnable+0x178>)
 8000d62:	f002 fd1d 	bl	80037a0 <HAL_GPIO_WritePin>

	// TIM1 Ch4 is used for driving source of TENS intensity
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d66:	210c      	movs	r1, #12
 8000d68:	4858      	ldr	r0, [pc, #352]	; (8000ecc <EMS_PulseEnable+0x17c>)
 8000d6a:	f003 fff7 	bl	8004d5c <HAL_TIM_PWM_Start>
//	{
//		temp_test = 0;
//	}
//	htim1.Instance -> CCR4 = temp_test;						// Set Duty(Pulse)
	//htim1.Instance -> CCR4 = 1000;					// 23V @3.7V
	htim1.Instance->CCR4 = 250;						// 21V @7.4V
 8000d6e:	4b57      	ldr	r3, [pc, #348]	; (8000ecc <EMS_PulseEnable+0x17c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	22fa      	movs	r2, #250	; 0xfa
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40

	ENABLE_TENS;
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7c:	4852      	ldr	r0, [pc, #328]	; (8000ec8 <EMS_PulseEnable+0x178>)
 8000d7e:	f002 fd0f 	bl	80037a0 <HAL_GPIO_WritePin>

	// TIM8 Ch1, Ch2, Ch3 is used for driving source of TENS and Galvanic function
	htim8.Instance->PSC = 71;								// Set Prescaler
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2247      	movs	r2, #71	; 0x47
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
	htim8.Instance->ARR = 999;							// Set Period
 8000d8a:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
	//htim8.Instance -> CCR4 = 499;							// Set Duty(Pulse)

	htim8.Instance->CCR1 = 499;
 8000d94:	4b4e      	ldr	r3, [pc, #312]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 499;
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000da6:	639a      	str	r2, [r3, #56]	; 0x38
	htim8.Instance->CCR3 = 499;
 8000da8:	4b49      	ldr	r3, [pc, #292]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000db0:	63da      	str	r2, [r3, #60]	; 0x3c

	switch(emsMode)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	3ba1      	subs	r3, #161	; 0xa1
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	f200 8082 	bhi.w	8000ec0 <EMS_PulseEnable+0x170>
 8000dbc:	a201      	add	r2, pc, #4	; (adr r2, 8000dc4 <EMS_PulseEnable+0x74>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000dd5 	.word	0x08000dd5
 8000dc8:	08000dfb 	.word	0x08000dfb
 8000dcc:	08000e21 	.word	0x08000e21
 8000dd0:	08000e73 	.word	0x08000e73
	{
	case EMS_A_MODE:
		OUT_SEL1_HIGH;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	483e      	ldr	r0, [pc, #248]	; (8000ed4 <EMS_PulseEnable+0x184>)
 8000dda:	f002 fce1 	bl	80037a0 <HAL_GPIO_WritePin>
		OUT_SEL2_HIGH;
 8000dde:	2201      	movs	r2, #1
 8000de0:	2120      	movs	r1, #32
 8000de2:	483d      	ldr	r0, [pc, #244]	; (8000ed8 <EMS_PulseEnable+0x188>)
 8000de4:	f002 fcdc 	bl	80037a0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000de8:	2100      	movs	r1, #0
 8000dea:	4839      	ldr	r0, [pc, #228]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000dec:	f003 ffb6 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000df0:	2104      	movs	r1, #4
 8000df2:	4837      	ldr	r0, [pc, #220]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000df4:	f003 ffb2 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 8000df8:	e062      	b.n	8000ec0 <EMS_PulseEnable+0x170>
	case EMS_B_MODE:
		OUT_SEL1_HIGH;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	4835      	ldr	r0, [pc, #212]	; (8000ed4 <EMS_PulseEnable+0x184>)
 8000e00:	f002 fcce 	bl	80037a0 <HAL_GPIO_WritePin>
		OUT_SEL2_LOW;
 8000e04:	2200      	movs	r2, #0
 8000e06:	2120      	movs	r1, #32
 8000e08:	4833      	ldr	r0, [pc, #204]	; (8000ed8 <EMS_PulseEnable+0x188>)
 8000e0a:	f002 fcc9 	bl	80037a0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	482f      	ldr	r0, [pc, #188]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000e12:	f003 ffa3 	bl	8004d5c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000e16:	2108      	movs	r1, #8
 8000e18:	482d      	ldr	r0, [pc, #180]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000e1a:	f003 ff9f 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 8000e1e:	e04f      	b.n	8000ec0 <EMS_PulseEnable+0x170>
	case ION_P_MODE:
		OUT_SEL1_HIGH;
 8000e20:	2201      	movs	r2, #1
 8000e22:	2110      	movs	r1, #16
 8000e24:	482b      	ldr	r0, [pc, #172]	; (8000ed4 <EMS_PulseEnable+0x184>)
 8000e26:	f002 fcbb 	bl	80037a0 <HAL_GPIO_WritePin>
		OUT_SEL2_LOW;
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	482a      	ldr	r0, [pc, #168]	; (8000ed8 <EMS_PulseEnable+0x188>)
 8000e30:	f002 fcb6 	bl	80037a0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8000e34:	2104      	movs	r1, #4
 8000e36:	4826      	ldr	r0, [pc, #152]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000e38:	f004 f84a 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		USER_TIM8toGPIO(GPIO_PIN_7);
 8000e3c:	2080      	movs	r0, #128	; 0x80
 8000e3e:	f001 f9ad 	bl	800219c <USER_TIM8toGPIO>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <EMS_PulseEnable+0x188>)
 8000e48:	f002 fcaa 	bl	80037a0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000e50:	f003 ff84 	bl	8004d5c <HAL_TIM_PWM_Start>

		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8000e54:	2108      	movs	r1, #8
 8000e56:	481e      	ldr	r0, [pc, #120]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000e58:	f004 f83a 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		USER_TIM8toGPIO(GPIO_PIN_8);
 8000e5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e60:	f001 f99c 	bl	800219c <USER_TIM8toGPIO>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6a:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <EMS_PulseEnable+0x188>)
 8000e6c:	f002 fc98 	bl	80037a0 <HAL_GPIO_WritePin>
		break;
 8000e70:	e026      	b.n	8000ec0 <EMS_PulseEnable+0x170>
	case ION_N_MODE:
		OUT_SEL1_HIGH;
 8000e72:	2201      	movs	r2, #1
 8000e74:	2110      	movs	r1, #16
 8000e76:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <EMS_PulseEnable+0x184>)
 8000e78:	f002 fc92 	bl	80037a0 <HAL_GPIO_WritePin>
		OUT_SEL2_LOW;
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2120      	movs	r1, #32
 8000e80:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <EMS_PulseEnable+0x188>)
 8000e82:	f002 fc8d 	bl	80037a0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8000e86:	2104      	movs	r1, #4
 8000e88:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000e8a:	f004 f821 	bl	8004ed0 <HAL_TIM_PWM_Stop>
		USER_TIM8toGPIO(GPIO_PIN_7);
 8000e8e:	2080      	movs	r0, #128	; 0x80
 8000e90:	f001 f984 	bl	800219c <USER_TIM8toGPIO>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <EMS_PulseEnable+0x188>)
 8000e9a:	f002 fc81 	bl	80037a0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000ea2:	f004 f815 	bl	8004ed0 <HAL_TIM_PWM_Stop>

		USER_TIM8toGPIO(GPIO_PIN_6);
 8000ea6:	2040      	movs	r0, #64	; 0x40
 8000ea8:	f001 f978 	bl	800219c <USER_TIM8toGPIO>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <EMS_PulseEnable+0x188>)
 8000eb2:	f002 fc75 	bl	80037a0 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <EMS_PulseEnable+0x180>)
 8000eba:	f003 ff4f 	bl	8004d5c <HAL_TIM_PWM_Start>
		break;
 8000ebe:	bf00      	nop
	//	htim1.Instance -> ARR = 999;							// Set Period, 999
	//	htim1.Instance -> CCR2 = 499;							// Set Duty(Pulse), 499
	//
	//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	//	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	200002ec 	.word	0x200002ec
 8000ed0:	20000214 	.word	0x20000214
 8000ed4:	40010c00 	.word	0x40010c00
 8000ed8:	40011000 	.word	0x40011000

08000edc <EMS_PulseDisable>:
 * Description    : Disable EMS Function
 * Input          : None
 * Output         : None
 *******************************************************************************/
void EMS_PulseDisable(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	// TIM1 Ch4 is used for driving source of TENS intensity
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000ee0:	210c      	movs	r1, #12
 8000ee2:	4819      	ldr	r0, [pc, #100]	; (8000f48 <EMS_PulseDisable+0x6c>)
 8000ee4:	f003 fff4 	bl	8004ed0 <HAL_TIM_PWM_Stop>

	DISABLE_TENS;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eee:	4817      	ldr	r0, [pc, #92]	; (8000f4c <EMS_PulseDisable+0x70>)
 8000ef0:	f002 fc56 	bl	80037a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4815      	ldr	r0, [pc, #84]	; (8000f50 <EMS_PulseDisable+0x74>)
 8000efa:	f002 fc51 	bl	80037a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	4813      	ldr	r0, [pc, #76]	; (8000f50 <EMS_PulseDisable+0x74>)
 8000f04:	f002 fc4c 	bl	80037a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0e:	4810      	ldr	r0, [pc, #64]	; (8000f50 <EMS_PulseDisable+0x74>)
 8000f10:	f002 fc46 	bl	80037a0 <HAL_GPIO_WritePin>

	USER_TIM8_ReInit();
 8000f14:	f001 f960 	bl	80021d8 <USER_TIM8_ReInit>

	// TIM8 Ch1, Ch2, Ch3 is used for driving source of TENS and Galvanic function
	htim8.Instance->CCR1 = 0;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <EMS_PulseDisable+0x78>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 0;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <EMS_PulseDisable+0x78>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	639a      	str	r2, [r3, #56]	; 0x38
	htim8.Instance->CCR3 = 0;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <EMS_PulseDisable+0x78>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c

	//HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);

	OUT_SEL1_LOW;
 8000f30:	2200      	movs	r2, #0
 8000f32:	2110      	movs	r1, #16
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <EMS_PulseDisable+0x7c>)
 8000f36:	f002 fc33 	bl	80037a0 <HAL_GPIO_WritePin>
	OUT_SEL2_LOW;
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <EMS_PulseDisable+0x74>)
 8000f40:	f002 fc2e 	bl	80037a0 <HAL_GPIO_WritePin>
	//	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
	//
	//	// TIM1 Ch2 is used for driving source of TENS and Galvanic function
	//	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	//	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200002ec 	.word	0x200002ec
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40011000 	.word	0x40011000
 8000f54:	20000214 	.word	0x20000214
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000f6e:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <MX_ADC1_Init+0x78>)
 8000f70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000f86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000f9a:	f001 fcf1 	bl	8002980 <HAL_ADC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fa4:	f000 fb66 	bl	8001674 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_ADC1_Init+0x74>)
 8000fba:	f001 fe79 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fc4:	f000 fb56 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000138 	.word	0x20000138
 8000fd4:	40012400 	.word	0x40012400

08000fd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <HAL_ADC_MspInit+0x6c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d121      	bne.n	800103c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_ADC_MspInit+0x70>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <HAL_ADC_MspInit+0x70>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_ADC_MspInit+0x70>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_ADC_MspInit+0x70>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <HAL_ADC_MspInit+0x70>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_ADC_MspInit+0x70>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001028:	2310      	movs	r3, #16
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102c:	2303      	movs	r3, #3
 800102e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4619      	mov	r1, r3
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_ADC_MspInit+0x74>)
 8001038:	f002 fa1e 	bl	8003478 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40012400 	.word	0x40012400
 8001048:	40021000 	.word	0x40021000
 800104c:	40010800 	.word	0x40010800

08001050 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <MX_GPIO_Init+0x18c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a5c      	ldr	r2, [pc, #368]	; (80011dc <MX_GPIO_Init+0x18c>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b5a      	ldr	r3, [pc, #360]	; (80011dc <MX_GPIO_Init+0x18c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107c:	4b57      	ldr	r3, [pc, #348]	; (80011dc <MX_GPIO_Init+0x18c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a56      	ldr	r2, [pc, #344]	; (80011dc <MX_GPIO_Init+0x18c>)
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b54      	ldr	r3, [pc, #336]	; (80011dc <MX_GPIO_Init+0x18c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0320 	and.w	r3, r3, #32
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b51      	ldr	r3, [pc, #324]	; (80011dc <MX_GPIO_Init+0x18c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a50      	ldr	r2, [pc, #320]	; (80011dc <MX_GPIO_Init+0x18c>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b4e      	ldr	r3, [pc, #312]	; (80011dc <MX_GPIO_Init+0x18c>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <MX_GPIO_Init+0x18c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <MX_GPIO_Init+0x18c>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b48      	ldr	r3, [pc, #288]	; (80011dc <MX_GPIO_Init+0x18c>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLE_WAKEUP_Pin|ADC_MUX0_Pin|ADC_MUX1_Pin|ADC_MUX2_Pin
 80010c4:	2200      	movs	r2, #0
 80010c6:	f643 013f 	movw	r1, #14399	; 0x383f
 80010ca:	4845      	ldr	r0, [pc, #276]	; (80011e0 <MX_GPIO_Init+0x190>)
 80010cc:	f002 fb68 	bl	80037a0 <HAL_GPIO_WritePin>
                          |TEC_DIR_Pin|MOTOR_CTL_Pin|OUT_SEL2_M_Pin|LCD_RS_Pin
                          |LCD_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPK_SCL_Pin|SPK_SDA_Pin|LED_Pin|nEN_TENS_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 5187 	mov.w	r1, #4320	; 0x10e0
 80010d6:	4843      	ldr	r0, [pc, #268]	; (80011e4 <MX_GPIO_Init+0x194>)
 80010d8:	f002 fb62 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RING_Pin|BLE_PD_Pin|BLE_RST_Pin|OUT_SEL1_M_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f24c 0114 	movw	r1, #49172	; 0xc014
 80010e2:	4841      	ldr	r0, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x198>)
 80010e4:	f002 fb5c 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_ENABLE_GPIO_Port, RF_ENABLE_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ee:	483d      	ldr	r0, [pc, #244]	; (80011e4 <MX_GPIO_Init+0x194>)
 80010f0:	f002 fb56 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2104      	movs	r1, #4
 80010f8:	483c      	ldr	r0, [pc, #240]	; (80011ec <MX_GPIO_Init+0x19c>)
 80010fa:	f002 fb51 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = BLE_WAKEUP_Pin|ADC_MUX0_Pin|ADC_MUX1_Pin|ADC_MUX2_Pin
 80010fe:	f643 033f 	movw	r3, #14399	; 0x383f
 8001102:	613b      	str	r3, [r7, #16]
                          |TEC_DIR_Pin|MOTOR_CTL_Pin|OUT_SEL2_M_Pin|LCD_RS_Pin
                          |LCD_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4832      	ldr	r0, [pc, #200]	; (80011e0 <MX_GPIO_Init+0x190>)
 8001118:	f002 f9ae 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHG_STAT_Pin;
 800111c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001122:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <MX_GPIO_Init+0x1a0>)
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHG_STAT_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	482b      	ldr	r0, [pc, #172]	; (80011e0 <MX_GPIO_Init+0x190>)
 8001132:	f002 f9a1 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SPK_SCL_Pin|SPK_SDA_Pin|LED_Pin|nEN_TENS_Pin
 8001136:	f249 03e0 	movw	r3, #37088	; 0x90e0
 800113a:	613b      	str	r3, [r7, #16]
                          |RF_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <MX_GPIO_Init+0x194>)
 8001150:	f002 f992 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RING_Pin|BLE_PD_Pin|BLE_RST_Pin|OUT_SEL1_M_Pin;
 8001154:	f24c 0314 	movw	r3, #49172	; 0xc014
 8001158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	481e      	ldr	r0, [pc, #120]	; (80011e8 <MX_GPIO_Init+0x198>)
 800116e:	f002 f983 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_INT_Pin;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <MX_GPIO_Init+0x1a4>)
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_INT_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <MX_GPIO_Init+0x198>)
 8001188:	f002 f976 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VOICE_BUSY_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(VOICE_BUSY_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_GPIO_Init+0x198>)
 80011a2:	f002 f969 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80011a6:	2304      	movs	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <MX_GPIO_Init+0x19c>)
 80011be:	f002 f95b 	bl	8003478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2028      	movs	r0, #40	; 0x28
 80011c8:	f001 ffdd 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011cc:	2028      	movs	r0, #40	; 0x28
 80011ce:	f001 fff6 	bl	80031be <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	40011400 	.word	0x40011400
 80011f0:	10110000 	.word	0x10110000
 80011f4:	10210000 	.word	0x10210000

080011f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_EXTI_Callback+0x1a>
 800120a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800120e:	d011      	beq.n	8001234 <HAL_GPIO_EXTI_Callback+0x3c>
//		{
//			INDICATOR_OFF;
//		}
		break;
	default:
		break;
 8001210:	e015      	b.n	800123e <HAL_GPIO_EXTI_Callback+0x46>
		Flag_CSInt = 1;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_GPIO_EXTI_Callback+0x50>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
		Cnt_Keylock = 0;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_GPIO_EXTI_Callback+0x54>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
		printf("EXTI\r\n");
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <HAL_GPIO_EXTI_Callback+0x58>)
 8001220:	f005 f9c2 	bl	80065a8 <puts>
		if(SysMode.OperationMode == SLEEP_MODE)
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	2b0a      	cmp	r3, #10
 800122a:	d107      	bne.n	800123c <HAL_GPIO_EXTI_Callback+0x44>
			SysMode.PowerStatus = POWEROFF_MODE;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_GPIO_EXTI_Callback+0x5c>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
		break;
 8001232:	e003      	b.n	800123c <HAL_GPIO_EXTI_Callback+0x44>
		printf("Charging!!\r\n");
 8001234:	4808      	ldr	r0, [pc, #32]	; (8001258 <HAL_GPIO_EXTI_Callback+0x60>)
 8001236:	f005 f9b7 	bl	80065a8 <puts>
		break;
 800123a:	e000      	b.n	800123e <HAL_GPIO_EXTI_Callback+0x46>
		break;
 800123c:	bf00      	nop
	}
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000095 	.word	0x20000095
 800124c:	20000092 	.word	0x20000092
 8001250:	08007808 	.word	0x08007808
 8001254:	200000e4 	.word	0x200000e4
 8001258:	08007810 	.word	0x08007810

0800125c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C1_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <MX_I2C1_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C1_Init+0x50>)
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x58>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_I2C1_Init+0x50>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_I2C1_Init+0x50>)
 800129a:	f002 fab1 	bl	8003800 <HAL_I2C_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f9e6 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000168 	.word	0x20000168
 80012b0:	40005400 	.word	0x40005400
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_I2C_MspInit+0x90>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d132      	bne.n	800133e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_I2C_MspInit+0x94>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <HAL_I2C_MspInit+0x94>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_I2C_MspInit+0x94>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f6:	2312      	movs	r3, #18
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4812      	ldr	r0, [pc, #72]	; (8001350 <HAL_I2C_MspInit+0x98>)
 8001306:	f002 f8b7 	bl	8003478 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_I2C_MspInit+0x9c>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_I2C_MspInit+0x9c>)
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_I2C_MspInit+0x94>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_I2C_MspInit+0x94>)
 800132c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_I2C_MspInit+0x94>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40005400 	.word	0x40005400
 800134c:	40021000 	.word	0x40021000
 8001350:	40010c00 	.word	0x40010c00
 8001354:	40010000 	.word	0x40010000

08001358 <System_Information>:
* Description    : Display system information
* Input          : None
* Output         : None
*******************************************************************************/
void System_Information(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    printf("================= %s =================\r\n", MODELNAME);
 800135c:	4916      	ldr	r1, [pc, #88]	; (80013b8 <System_Information+0x60>)
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <System_Information+0x64>)
 8001360:	f005 f89c 	bl	800649c <iprintf>
    printf("  VERSION   : H/W %s, S/W %s\r\n", HW_VERSION, FW_VERSION);
 8001364:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <System_Information+0x68>)
 8001366:	4916      	ldr	r1, [pc, #88]	; (80013c0 <System_Information+0x68>)
 8001368:	4816      	ldr	r0, [pc, #88]	; (80013c4 <System_Information+0x6c>)
 800136a:	f005 f897 	bl	800649c <iprintf>
    printf("  BUILD DATE: %s              \r\n\n", BUILD_DATE);
 800136e:	4916      	ldr	r1, [pc, #88]	; (80013c8 <System_Information+0x70>)
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <System_Information+0x74>)
 8001372:	f005 f893 	bl	800649c <iprintf>

    printf("  SYSCLK_Frequency = %lu\r\n", HAL_RCC_GetSysClockFreq());
 8001376:	f003 fa07 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 800137a:	4603      	mov	r3, r0
 800137c:	4619      	mov	r1, r3
 800137e:	4814      	ldr	r0, [pc, #80]	; (80013d0 <System_Information+0x78>)
 8001380:	f005 f88c 	bl	800649c <iprintf>
    printf("  HCLK_Frequency = %lu\r\n", HAL_RCC_GetHCLKFreq());
 8001384:	f003 fa60 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8001388:	4603      	mov	r3, r0
 800138a:	4619      	mov	r1, r3
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <System_Information+0x7c>)
 800138e:	f005 f885 	bl	800649c <iprintf>
    printf("  PCLK1_Frequency = %lu\r\n", HAL_RCC_GetPCLK1Freq());
 8001392:	f003 fa63 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8001396:	4603      	mov	r3, r0
 8001398:	4619      	mov	r1, r3
 800139a:	480f      	ldr	r0, [pc, #60]	; (80013d8 <System_Information+0x80>)
 800139c:	f005 f87e 	bl	800649c <iprintf>
    printf("  PCLK2_Frequency = %lu\r\n", HAL_RCC_GetPCLK2Freq());
 80013a0:	f003 fa70 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <System_Information+0x84>)
 80013aa:	f005 f877 	bl	800649c <iprintf>
    printf("=========================================\r\n\n");
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <System_Information+0x88>)
 80013b0:	f005 f8fa 	bl	80065a8 <puts>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	0800781c 	.word	0x0800781c
 80013bc:	08007824 	.word	0x08007824
 80013c0:	08007850 	.word	0x08007850
 80013c4:	08007858 	.word	0x08007858
 80013c8:	08007878 	.word	0x08007878
 80013cc:	08007884 	.word	0x08007884
 80013d0:	080078a8 	.word	0x080078a8
 80013d4:	080078c4 	.word	0x080078c4
 80013d8:	080078e0 	.word	0x080078e0
 80013dc:	080078fc 	.word	0x080078fc
 80013e0:	08007918 	.word	0x08007918

080013e4 <System_Init_Config>:
* Description    : Initiate system parameters
* Input          : None
* Output         : None
*******************************************************************************/
static void System_Init_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	/* Display Device Information */
	System_Information();
 80013e8:	f7ff ffb6 	bl	8001358 <System_Information>

	/* UART Initiation */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) Rx1Data, 1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	493d      	ldr	r1, [pc, #244]	; (80014e4 <System_Init_Config+0x100>)
 80013f0:	483d      	ldr	r0, [pc, #244]	; (80014e8 <System_Init_Config+0x104>)
 80013f2:	f004 fbc9 	bl	8005b88 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) Rx3Data, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	493c      	ldr	r1, [pc, #240]	; (80014ec <System_Init_Config+0x108>)
 80013fa:	483d      	ldr	r0, [pc, #244]	; (80014f0 <System_Init_Config+0x10c>)
 80013fc:	f004 fbc4 	bl	8005b88 <HAL_UART_Receive_IT>

	/* TIMER Initiation */
	/* TIM6 is main timer for Scheduling */
	HAL_TIM_Base_Start_IT(&htim6);
 8001400:	483c      	ldr	r0, [pc, #240]	; (80014f4 <System_Init_Config+0x110>)
 8001402:	f003 fbfb 	bl	8004bfc <HAL_TIM_Base_Start_IT>

	// TIM1 Ch1, Ch2, Ch3 are used for Head LED Control
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001406:	2100      	movs	r1, #0
 8001408:	483b      	ldr	r0, [pc, #236]	; (80014f8 <System_Init_Config+0x114>)
 800140a:	f003 fd61 	bl	8004ed0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800140e:	2104      	movs	r1, #4
 8001410:	4839      	ldr	r0, [pc, #228]	; (80014f8 <System_Init_Config+0x114>)
 8001412:	f003 fd5d 	bl	8004ed0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001416:	2108      	movs	r1, #8
 8001418:	4837      	ldr	r0, [pc, #220]	; (80014f8 <System_Init_Config+0x114>)
 800141a:	f003 fd59 	bl	8004ed0 <HAL_TIM_PWM_Stop>

	// TIM1 Ch4 is used for driving source of TENS intensity
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 800141e:	210c      	movs	r1, #12
 8001420:	4835      	ldr	r0, [pc, #212]	; (80014f8 <System_Init_Config+0x114>)
 8001422:	f003 fd55 	bl	8004ed0 <HAL_TIM_PWM_Stop>

	// TIM1 Ch1, Ch2, Ch3 are used for Head LED Control
	DiffusionLEDControl(POWER_OFF);
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff faf0 	bl	8000a0c <DiffusionLEDControl>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800142c:	2100      	movs	r1, #0
 800142e:	4833      	ldr	r0, [pc, #204]	; (80014fc <System_Init_Config+0x118>)
 8001430:	f003 fd4e 	bl	8004ed0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001434:	2104      	movs	r1, #4
 8001436:	4831      	ldr	r0, [pc, #196]	; (80014fc <System_Init_Config+0x118>)
 8001438:	f003 fd4a 	bl	8004ed0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800143c:	2108      	movs	r1, #8
 800143e:	482f      	ldr	r0, [pc, #188]	; (80014fc <System_Init_Config+0x118>)
 8001440:	f003 fd46 	bl	8004ed0 <HAL_TIM_PWM_Stop>

	// TIM3 Ch1 is used for driving source of TEC(Peltier) Module
	// There is a problem with SPI1 and TIM3_CH1 remapping
	// Conflict between the TIM3_CH1 signal and the I2C1 MISO signal, (even if MISO is not used).
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001444:	2108      	movs	r1, #8
 8001446:	482e      	ldr	r0, [pc, #184]	; (8001500 <System_Init_Config+0x11c>)
 8001448:	f003 fd42 	bl	8004ed0 <HAL_TIM_PWM_Stop>
	TEC_DIR_HIGH;
 800144c:	2201      	movs	r2, #1
 800144e:	2108      	movs	r1, #8
 8001450:	482c      	ldr	r0, [pc, #176]	; (8001504 <System_Init_Config+0x120>)
 8001452:	f002 f9a5 	bl	80037a0 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001456:	210c      	movs	r1, #12
 8001458:	4829      	ldr	r0, [pc, #164]	; (8001500 <System_Init_Config+0x11c>)
 800145a:	f003 fd39 	bl	8004ed0 <HAL_TIM_PWM_Stop>

	// TIM8 Ch1, Ch2, Ch3 is used for driving source of TENS and Galvanic function
	//htim8.Instance -> PSC = 71;								// Set Prescaler
	//htim8.Instance -> ARR = 999;								// Set Period
	//htim8.Instance -> CCR4 = 499;								// Set Duty(Pulse)
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800145e:	2100      	movs	r1, #0
 8001460:	4829      	ldr	r0, [pc, #164]	; (8001508 <System_Init_Config+0x124>)
 8001462:	f003 fd35 	bl	8004ed0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8001466:	2104      	movs	r1, #4
 8001468:	4827      	ldr	r0, [pc, #156]	; (8001508 <System_Init_Config+0x124>)
 800146a:	f003 fd31 	bl	8004ed0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800146e:	2108      	movs	r1, #8
 8001470:	4825      	ldr	r0, [pc, #148]	; (8001508 <System_Init_Config+0x124>)
 8001472:	f003 fd2d 	bl	8004ed0 <HAL_TIM_PWM_Stop>

	// TIM8 Ch4 is used for driving source of RF function
	//htim8.Instance -> PSC = 1;								// Set Prescaler, 63
	//htim8.Instance -> ARR = 35;								// Set Period, 999
	//htim8.Instance -> CCR4 = 18;								// Set Duty(Pulse), 499
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_4);
 8001476:	210c      	movs	r1, #12
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <System_Init_Config+0x124>)
 800147a:	f003 fd29 	bl	8004ed0 <HAL_TIM_PWM_Stop>

	/* ADC Initiation */
	HAL_ADC_Start(&hadc1);
 800147e:	4823      	ldr	r0, [pc, #140]	; (800150c <System_Init_Config+0x128>)
 8001480:	f001 fb68 	bl	8002b54 <HAL_ADC_Start>

	/* Key Function Initiation */
	KeyVariableInit();
 8001484:	f7ff f9fe 	bl	8000884 <KeyVariableInit>
	// Capacitive Touch Driver Initiation
	Configure_CapTouch();
 8001488:	f7ff f94a 	bl	8000720 <Configure_CapTouch>

	/* Bluetooth Initiation */
//	BLE_OFF;
//	BLE_PD_LOW;
//	BLE_WAKEUP_LOW;
	BLE_ON;
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001492:	481f      	ldr	r0, [pc, #124]	; (8001510 <System_Init_Config+0x12c>)
 8001494:	f002 f984 	bl	80037a0 <HAL_GPIO_WritePin>

	DISABLE_TENS;
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149e:	481d      	ldr	r0, [pc, #116]	; (8001514 <System_Init_Config+0x130>)
 80014a0:	f002 f97e 	bl	80037a0 <HAL_GPIO_WritePin>

//	OUT_SEL1_HIGH;
//	OUT_SEL2_HIGH;
//	DISABLE_TENS;

	SysMode.PowerStatus = POWEROFF_MODE;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <System_Init_Config+0x134>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
	SysMode.OperationMode = STANDBY_MODE;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <System_Init_Config+0x134>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	709a      	strb	r2, [r3, #2]
	SysMode.OperationIntensity = LEVEL1;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <System_Init_Config+0x134>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	711a      	strb	r2, [r3, #4]
	SysMode.Flag_OpStatus = DISABLE_OUTPUT;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <System_Init_Config+0x134>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	70da      	strb	r2, [r3, #3]
	SysMode.Cnt_AutoStart = 0;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <System_Init_Config+0x134>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
	//
	//  Line_1A_WT588F(0xEF);
	//  HAL_Delay(500);

	/* Check STANDBY Wake-up */
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB))
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <System_Init_Config+0x138>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d108      	bne.n	80014e0 <System_Init_Config+0xfc>
	{
		printf("Standby Wake-up\r\n");
 80014ce:	4814      	ldr	r0, [pc, #80]	; (8001520 <System_Init_Config+0x13c>)
 80014d0:	f005 f86a 	bl	80065a8 <puts>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU | PWR_FLAG_SB);
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <System_Init_Config+0x138>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <System_Init_Config+0x138>)
 80014da:	f043 030c 	orr.w	r3, r3, #12
 80014de:	6013      	str	r3, [r2, #0]
	}

	//printf("\n>> Enter Stop mode\r\n");
	//StopMode();						// Stop mode is done by EXTI

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200003d4 	.word	0x200003d4
 80014e8:	200003e8 	.word	0x200003e8
 80014ec:	200003c0 	.word	0x200003c0
 80014f0:	2000037c 	.word	0x2000037c
 80014f4:	200002a4 	.word	0x200002a4
 80014f8:	200002ec 	.word	0x200002ec
 80014fc:	20000334 	.word	0x20000334
 8001500:	2000025c 	.word	0x2000025c
 8001504:	40011000 	.word	0x40011000
 8001508:	20000214 	.word	0x20000214
 800150c:	20000138 	.word	0x20000138
 8001510:	40010c00 	.word	0x40010c00
 8001514:	40010800 	.word	0x40010800
 8001518:	200000e4 	.word	0x200000e4
 800151c:	40007000 	.word	0x40007000
 8001520:	08007944 	.word	0x08007944

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f001 f9a3 	bl	8002874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f831 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f7ff fd8d 	bl	8001050 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001536:	f7ff fd11 	bl	8000f5c <MX_ADC1_Init>
  MX_I2C1_Init();
 800153a:	f7ff fe8f 	bl	800125c <MX_I2C1_Init>
  MX_TIM1_Init();
 800153e:	f000 faad 	bl	8001a9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001542:	f000 fb53 	bl	8001bec <MX_TIM2_Init>
  MX_TIM6_Init();
 8001546:	f000 fc2f 	bl	8001da8 <MX_TIM6_Init>
  MX_TIM8_Init();
 800154a:	f000 fc63 	bl	8001e14 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800154e:	f000 fe5f 	bl	8002210 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001552:	f000 fe87 	bl	8002264 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001556:	f000 fbc3 	bl	8001ce0 <MX_TIM3_Init>
  MX_SPI3_Init();
 800155a:	f000 f891 	bl	8001680 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  System_Init_Config();
 800155e:	f7ff ff41 	bl	80013e4 <System_Init_Config>
		  flag_2Hz = 0;
		  set_systemstatus();
		  BT_Proc();
	  }
*/
	  HeadLEDControl(HEAD_BLUE, 10);
 8001562:	210a      	movs	r1, #10
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff f9a9 	bl	80008bc <HeadLEDControl>
	  HAL_Delay(500);
 800156a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800156e:	f001 f9e3 	bl	8002938 <HAL_Delay>
	  HeadLEDControl(HEAD_RED, 10);
 8001572:	210a      	movs	r1, #10
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff f9a1 	bl	80008bc <HeadLEDControl>
	  HAL_Delay(500);
 800157a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157e:	f001 f9db 	bl	8002938 <HAL_Delay>
	  HeadLEDControl(HEAD_IR, 10);
 8001582:	210a      	movs	r1, #10
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff f999 	bl	80008bc <HeadLEDControl>
	  HAL_Delay(500);
 800158a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158e:	f001 f9d3 	bl	8002938 <HAL_Delay>
	  HeadLEDControl(HEAD_BLUE, 10);
 8001592:	e7e6      	b.n	8001562 <main+0x3e>

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b096      	sub	sp, #88	; 0x58
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159e:	2228      	movs	r2, #40	; 0x28
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 ff72 	bl	800648c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
 80015c6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d6:	2301      	movs	r3, #1
 80015d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fd60 	bl	80040b4 <HAL_RCC_OscConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015fa:	f000 f83b 	bl	8001674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fe:	230f      	movs	r3, #15
 8001600:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	2302      	movs	r3, #2
 8001604:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	2102      	movs	r1, #2
 800161a:	4618      	mov	r0, r3
 800161c:	f002 ffca 	bl	80045b4 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001626:	f000 f825 	bl	8001674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800162a:	2302      	movs	r3, #2
 800162c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800162e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001632:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	4618      	mov	r0, r3
 8001638:	f003 f956 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001642:	f000 f817 	bl	8001674 <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3758      	adds	r7, #88	; 0x58
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001658:	1d39      	adds	r1, r7, #4
 800165a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165e:	2201      	movs	r2, #1
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <__io_putchar+0x20>)
 8001662:	f004 f9ff 	bl	8005a64 <HAL_UART_Transmit>

  return ch;
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000037c 	.word	0x2000037c

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_SPI3_Init+0x64>)
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <MX_SPI3_Init+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_SPI3_Init+0x64>)
 800168c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001690:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_SPI3_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_SPI3_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016cc:	220a      	movs	r2, #10
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_SPI3_Init+0x64>)
 80016d2:	f003 f9bf 	bl	8004a54 <HAL_SPI_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80016dc:	f7ff ffca 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200001bc 	.word	0x200001bc
 80016e8:	40003c00 	.word	0x40003c00

080016ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_SPI_MspInit+0x70>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d123      	bne.n	8001754 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_SPI_MspInit+0x74>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	4a13      	ldr	r2, [pc, #76]	; (8001760 <HAL_SPI_MspInit+0x74>)
 8001712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001716:	61d3      	str	r3, [r2, #28]
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_SPI_MspInit+0x74>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_SPI_MspInit+0x74>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_SPI_MspInit+0x74>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_SPI_MspInit+0x74>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800173c:	2328      	movs	r3, #40	; 0x28
 800173e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_SPI_MspInit+0x78>)
 8001750:	f001 fe92 	bl	8003478 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40003c00 	.word	0x40003c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40010c00 	.word	0x40010c00

08001768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_MspInit+0x5c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6193      	str	r3, [r2, #24]
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_MspInit+0x5c>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_MspInit+0x5c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_MspInit+0x5c>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_MspInit+0x60>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_MspInit+0x60>)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010000 	.word	0x40010000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f001 f875 	bl	8002900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <USART1_IRQHandler+0x10>)
 8001822:	f004 f9e1 	bl	8005be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200003e8 	.word	0x200003e8

08001830 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <USART3_IRQHandler+0x10>)
 8001836:	f004 f9d7 	bl	8005be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000037c 	.word	0x2000037c

08001844 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001848:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800184c:	f001 ffc0 	bl	80037d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001850:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001854:	f001 ffbc 	bl	80037d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

	static int motorStat = 0;
	static int cnt_motor = 0;

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001860:	482f      	ldr	r0, [pc, #188]	; (8001920 <TIM6_IRQHandler+0xc4>)
 8001862:	f003 fba5 	bl	8004fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
	flag_1kHz = 1;
 8001866:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <TIM6_IRQHandler+0xc8>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]

	if(Flag_KeyPressed)
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <TIM6_IRQHandler+0xcc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d026      	beq.n	80018c2 <TIM6_IRQHandler+0x66>
	{
		if(motorStat == 0)
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <TIM6_IRQHandler+0xd0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <TIM6_IRQHandler+0x38>
		{
			cnt_motor = 0;
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <TIM6_IRQHandler+0xd4>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

			MOTOR_ON;
 8001882:	2201      	movs	r2, #1
 8001884:	2110      	movs	r1, #16
 8001886:	482b      	ldr	r0, [pc, #172]	; (8001934 <TIM6_IRQHandler+0xd8>)
 8001888:	f001 ff8a 	bl	80037a0 <HAL_GPIO_WritePin>
			motorStat = 1;
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <TIM6_IRQHandler+0xd0>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e016      	b.n	80018c2 <TIM6_IRQHandler+0x66>
		}
		else
		{
			cnt_motor++;
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <TIM6_IRQHandler+0xd4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	4a25      	ldr	r2, [pc, #148]	; (8001930 <TIM6_IRQHandler+0xd4>)
 800189c:	6013      	str	r3, [r2, #0]
			if(cnt_motor >= 30)
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <TIM6_IRQHandler+0xd4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b1d      	cmp	r3, #29
 80018a4:	dd0d      	ble.n	80018c2 <TIM6_IRQHandler+0x66>
			{
				cnt_motor = 0;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <TIM6_IRQHandler+0xd4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

				MOTOR_OFF;
 80018ac:	2200      	movs	r2, #0
 80018ae:	2110      	movs	r1, #16
 80018b0:	4820      	ldr	r0, [pc, #128]	; (8001934 <TIM6_IRQHandler+0xd8>)
 80018b2:	f001 ff75 	bl	80037a0 <HAL_GPIO_WritePin>
				motorStat = 0;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <TIM6_IRQHandler+0xd0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
				Flag_KeyPressed = 0;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <TIM6_IRQHandler+0xcc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	cnt_100Hz++;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <TIM6_IRQHandler+0xdc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <TIM6_IRQHandler+0xdc>)
 80018ca:	6013      	str	r3, [r2, #0]

	if(cnt_100Hz >= 10)
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <TIM6_IRQHandler+0xdc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	dd23      	ble.n	800191c <TIM6_IRQHandler+0xc0>
	{
		cnt_100Hz = 0;
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <TIM6_IRQHandler+0xdc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
		flag_100Hz = 1;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <TIM6_IRQHandler+0xe0>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]

		cnt_10Hz++;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <TIM6_IRQHandler+0xe4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a16      	ldr	r2, [pc, #88]	; (8001940 <TIM6_IRQHandler+0xe4>)
 80018e8:	6013      	str	r3, [r2, #0]
		if(cnt_10Hz >= 10)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <TIM6_IRQHandler+0xe4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	dd14      	ble.n	800191c <TIM6_IRQHandler+0xc0>
		{
			cnt_10Hz = 0;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <TIM6_IRQHandler+0xe4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
			flag_10Hz = 1;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <TIM6_IRQHandler+0xe8>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]

			cnt_2Hz++;
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <TIM6_IRQHandler+0xec>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a10      	ldr	r2, [pc, #64]	; (8001948 <TIM6_IRQHandler+0xec>)
 8001906:	6013      	str	r3, [r2, #0]
			if(cnt_2Hz >= 5)
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <TIM6_IRQHandler+0xec>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b04      	cmp	r3, #4
 800190e:	dd05      	ble.n	800191c <TIM6_IRQHandler+0xc0>
			{
				cnt_2Hz = 0;
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <TIM6_IRQHandler+0xec>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
				flag_2Hz = 1;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <TIM6_IRQHandler+0xf0>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
  /* USER CODE END TIM6_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200002a4 	.word	0x200002a4
 8001924:	20000096 	.word	0x20000096
 8001928:	20000090 	.word	0x20000090
 800192c:	2000009c 	.word	0x2000009c
 8001930:	200000a0 	.word	0x200000a0
 8001934:	40011000 	.word	0x40011000
 8001938:	200000a4 	.word	0x200000a4
 800193c:	20000097 	.word	0x20000097
 8001940:	200000a8 	.word	0x200000a8
 8001944:	20000098 	.word	0x20000098
 8001948:	200000ac 	.word	0x200000ac
 800194c:	20000099 	.word	0x20000099

08001950 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e00a      	b.n	8001978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001962:	f3af 8000 	nop.w
 8001966:	4601      	mov	r1, r0
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	b2ca      	uxtb	r2, r1
 8001970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf0      	blt.n	8001962 <_read+0x12>
	}

return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e009      	b.n	80019b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fe53 	bl	8001650 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dbf1      	blt.n	800199c <_write+0x12>
	}
	return len;
 80019b8:	687b      	ldr	r3, [r7, #4]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_close>:

int _close(int file)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
	return -1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e8:	605a      	str	r2, [r3, #4]
	return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
	return 0;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
	...

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f004 fcf0 	bl	8006438 <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000c000 	.word	0x2000c000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	200000b0 	.word	0x200000b0
 8001a8c:	20000450 	.word	0x20000450

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b092      	sub	sp, #72	; 0x48
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fce0 	bl	800648c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001acc:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001ace:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <MX_TIM1_Init+0x14c>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001ad2:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b42      	ldr	r3, [pc, #264]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2999;
 8001ade:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001ae0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aec:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af8:	483a      	ldr	r0, [pc, #232]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001afa:	f003 f8df 	bl	8004cbc <HAL_TIM_PWM_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b04:	f7ff fdb6 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b14:	4619      	mov	r1, r3
 8001b16:	4833      	ldr	r0, [pc, #204]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001b18:	f003 fe88 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b22:	f7ff fda7 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b26:	2360      	movs	r3, #96	; 0x60
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 300;
 8001b2a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4825      	ldr	r0, [pc, #148]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001b4e:	f003 fb37 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001b58:	f7ff fd8c 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	2204      	movs	r2, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	481f      	ldr	r0, [pc, #124]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001b66:	f003 fb2b 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001b70:	f7ff fd80 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	2208      	movs	r2, #8
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4819      	ldr	r0, [pc, #100]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001b7e:	f003 fb1f 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001b88:	f7ff fd74 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	220c      	movs	r2, #12
 8001b92:	4619      	mov	r1, r3
 8001b94:	4813      	ldr	r0, [pc, #76]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001b96:	f003 fb13 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001ba0:	f7ff fd68 	bl	8001674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001bc8:	f003 fe9c 	bl	8005904 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001bd2:	f7ff fd4f 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM1_Init+0x148>)
 8001bd8:	f000 fa4a 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001bdc:	bf00      	nop
 8001bde:	3748      	adds	r7, #72	; 0x48
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200002ec 	.word	0x200002ec
 8001be8:	40012c00 	.word	0x40012c00

08001bec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	f107 0320 	add.w	r3, r7, #32
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c0e:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c16:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c18:	2247      	movs	r2, #71	; 0x47
 8001c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c22:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c36:	4829      	ldr	r0, [pc, #164]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c38:	f003 f840 	bl	8004cbc <HAL_TIM_PWM_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c42:	f7ff fd17 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	4619      	mov	r1, r3
 8001c54:	4821      	ldr	r0, [pc, #132]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c56:	f003 fde9 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c60:	f7ff fd08 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	2360      	movs	r3, #96	; 0x60
 8001c66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001c68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4817      	ldr	r0, [pc, #92]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c7e:	f003 fa9f 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c88:	f7ff fcf4 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2204      	movs	r2, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4812      	ldr	r0, [pc, #72]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001c94:	f003 fa94 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001c9e:	f7ff fce9 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001caa:	f003 fa89 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001cb4:	f7ff fcde 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	220c      	movs	r2, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001cc0:	f003 fa7e 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8001cca:	f7ff fcd3 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <MX_TIM2_Init+0xf0>)
 8001cd0:	f000 f9ce 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	; 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000334 	.word	0x20000334

08001ce0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d02:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <MX_TIM3_Init+0xc4>)
 8001d06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 899;
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d16:	f240 3283 	movw	r2, #899	; 0x383
 8001d1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d28:	481d      	ldr	r0, [pc, #116]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d2a:	f002 ffc7 	bl	8004cbc <HAL_TIM_PWM_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d34:	f7ff fc9e 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d40:	f107 0320 	add.w	r3, r7, #32
 8001d44:	4619      	mov	r1, r3
 8001d46:	4816      	ldr	r0, [pc, #88]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d48:	f003 fd70 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d52:	f7ff fc8f 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d56:	2360      	movs	r3, #96	; 0x60
 8001d58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2208      	movs	r2, #8
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d6e:	f003 fa27 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d78:	f7ff fc7c 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	220c      	movs	r2, #12
 8001d80:	4619      	mov	r1, r3
 8001d82:	4807      	ldr	r0, [pc, #28]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d84:	f003 fa1c 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d8e:	f7ff fc71 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d92:	4803      	ldr	r0, [pc, #12]	; (8001da0 <MX_TIM3_Init+0xc0>)
 8001d94:	f000 f96c 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000025c 	.word	0x2000025c
 8001da4:	40000400 	.word	0x40000400

08001da8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_TIM6_Init+0x64>)
 8001db8:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <MX_TIM6_Init+0x68>)
 8001dba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_TIM6_Init+0x64>)
 8001dbe:	2247      	movs	r2, #71	; 0x47
 8001dc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_TIM6_Init+0x64>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_TIM6_Init+0x64>)
 8001dca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_TIM6_Init+0x64>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_TIM6_Init+0x64>)
 8001dd8:	f002 fec0 	bl	8004b5c <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001de2:	f7ff fc47 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_TIM6_Init+0x64>)
 8001df4:	f003 fd1a 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001dfe:	f7ff fc39 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002a4 	.word	0x200002a4
 8001e10:	40001000 	.word	0x40001000

08001e14 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b092      	sub	sp, #72	; 0x48
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fb24 	bl	800648c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e44:	4b49      	ldr	r3, [pc, #292]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e46:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <MX_TIM8_Init+0x15c>)
 8001e48:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 71;
 8001e4a:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e4c:	2247      	movs	r2, #71	; 0x47
 8001e4e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001e56:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e5c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e70:	483e      	ldr	r0, [pc, #248]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e72:	f002 ff23 	bl	8004cbc <HAL_TIM_PWM_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001e7c:	f7ff fbfa 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4837      	ldr	r0, [pc, #220]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001e90:	f003 fccc 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001e9a:	f7ff fbeb 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9e:	2360      	movs	r3, #96	; 0x60
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001ea2:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4829      	ldr	r0, [pc, #164]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001ec6:	f003 f97b 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001ed0:	f7ff fbd0 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	2204      	movs	r2, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4822      	ldr	r0, [pc, #136]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001ee2:	f003 f96d 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001eec:	f7ff fbc2 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	2208      	movs	r2, #8
 8001efa:	4619      	mov	r1, r3
 8001efc:	481b      	ldr	r0, [pc, #108]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001efe:	f003 f95f 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001f08:	f7ff fbb4 	bl	8001674 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8001f0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f16:	220c      	movs	r2, #12
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4814      	ldr	r0, [pc, #80]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001f1c:	f003 f950 	bl	80051c0 <HAL_TIM_PWM_ConfigChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001f26:	f7ff fba5 	bl	8001674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001f4e:	f003 fcd9 	bl	8005904 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001f58:	f7ff fb8c 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f5c:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM8_Init+0x158>)
 8001f5e:	f000 f887 	bl	8002070 <HAL_TIM_MspPostInit>

}
 8001f62:	bf00      	nop
 8001f64:	3748      	adds	r7, #72	; 0x48
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000214 	.word	0x20000214
 8001f70:	40013400 	.word	0x40013400

08001f74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d10c      	bne.n	8001fa0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	4a23      	ldr	r2, [pc, #140]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f90:	6193      	str	r3, [r2, #24]
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f9e:	e034      	b.n	800200a <HAL_TIM_PWM_MspInit+0x96>
  else if(tim_pwmHandle->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
}
 8001fc2:	e022      	b.n	800200a <HAL_TIM_PWM_MspInit+0x96>
  else if(tim_pwmHandle->Instance==TIM3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <HAL_TIM_PWM_MspInit+0xa8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
}
 8001fe6:	e010      	b.n	800200a <HAL_TIM_PWM_MspInit+0x96>
  else if(tim_pwmHandle->Instance==TIM8)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_TIM_PWM_MspInit+0xac>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10b      	bne.n	800200a <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8001ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ffc:	6193      	str	r3, [r2, #24]
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_TIM_PWM_MspInit+0xa4>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40012c00 	.word	0x40012c00
 8002018:	40021000 	.word	0x40021000
 800201c:	40000400 	.word	0x40000400
 8002020:	40013400 	.word	0x40013400

08002024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_TIM_Base_MspInit+0x44>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d113      	bne.n	800205e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_TIM_Base_MspInit+0x48>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a0c      	ldr	r2, [pc, #48]	; (800206c <HAL_TIM_Base_MspInit+0x48>)
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	61d3      	str	r3, [r2, #28]
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_TIM_Base_MspInit+0x48>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	2036      	movs	r0, #54	; 0x36
 8002054:	f001 f897 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002058:	2036      	movs	r0, #54	; 0x36
 800205a:	f001 f8b0 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40001000 	.word	0x40001000
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a3d      	ldr	r2, [pc, #244]	; (8002180 <HAL_TIM_MspPostInit+0x110>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d119      	bne.n	80020c4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a3b      	ldr	r2, [pc, #236]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|RF_PWM_Pin;
 80020a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2302      	movs	r3, #2
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 0318 	add.w	r3, r7, #24
 80020ba:	4619      	mov	r1, r3
 80020bc:	4832      	ldr	r0, [pc, #200]	; (8002188 <HAL_TIM_MspPostInit+0x118>)
 80020be:	f001 f9db 	bl	8003478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020c2:	e059      	b.n	8002178 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020cc:	d118      	bne.n	8002100 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6193      	str	r3, [r2, #24]
 80020da:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020e6:	230f      	movs	r3, #15
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2302      	movs	r3, #2
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	4619      	mov	r1, r3
 80020f8:	4823      	ldr	r0, [pc, #140]	; (8002188 <HAL_TIM_MspPostInit+0x118>)
 80020fa:	f001 f9bd 	bl	8003478 <HAL_GPIO_Init>
}
 80020fe:	e03b      	b.n	8002178 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_TIM_MspPostInit+0x11c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d118      	bne.n	800213c <HAL_TIM_MspPostInit+0xcc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002122:	2303      	movs	r3, #3
 8002124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2302      	movs	r3, #2
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	4619      	mov	r1, r3
 8002134:	4816      	ldr	r0, [pc, #88]	; (8002190 <HAL_TIM_MspPostInit+0x120>)
 8002136:	f001 f99f 	bl	8003478 <HAL_GPIO_Init>
}
 800213a:	e01d      	b.n	8002178 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM8)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_TIM_MspPostInit+0x124>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d118      	bne.n	8002178 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 800214c:	f043 0310 	orr.w	r3, r3, #16
 8002150:	6193      	str	r3, [r2, #24]
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_TIM_MspPostInit+0x114>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800215e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2302      	movs	r3, #2
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	f107 0318 	add.w	r3, r7, #24
 8002170:	4619      	mov	r1, r3
 8002172:	4809      	ldr	r0, [pc, #36]	; (8002198 <HAL_TIM_MspPostInit+0x128>)
 8002174:	f001 f980 	bl	8003478 <HAL_GPIO_Init>
}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40012c00 	.word	0x40012c00
 8002184:	40021000 	.word	0x40021000
 8002188:	40010800 	.word	0x40010800
 800218c:	40000400 	.word	0x40000400
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40013400 	.word	0x40013400
 8002198:	40011000 	.word	0x40011000

0800219c <USER_TIM8toGPIO>:
  }
}

/* USER CODE BEGIN 1 */
void USER_TIM8toGPIO(uint16_t GPIO_Pin)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_Pin;
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2302      	movs	r3, #2
 80021be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	4803      	ldr	r0, [pc, #12]	; (80021d4 <USER_TIM8toGPIO+0x38>)
 80021c8:	f001 f956 	bl	8003478 <HAL_GPIO_Init>
}
 80021cc:	bf00      	nop
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40011000 	.word	0x40011000

080021d8 <USER_TIM8_ReInit>:


void USER_TIM8_ReInit(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021de:	463b      	mov	r3, r7
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
     */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80021ea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80021ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2302      	movs	r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	463b      	mov	r3, r7
 80021fa:	4619      	mov	r1, r3
 80021fc:	4803      	ldr	r0, [pc, #12]	; (800220c <USER_TIM8_ReInit+0x34>)
 80021fe:	f001 f93b 	bl	8003478 <HAL_GPIO_Init>
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40011000 	.word	0x40011000

08002210 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_USART1_UART_Init+0x4c>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <MX_USART1_UART_Init+0x50>)
 8002218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <MX_USART1_UART_Init+0x4c>)
 800221c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_USART1_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <MX_USART1_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_USART1_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_USART1_UART_Init+0x4c>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <MX_USART1_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_USART1_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_USART1_UART_Init+0x4c>)
 8002248:	f003 fbbf 	bl	80059ca <HAL_UART_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002252:	f7ff fa0f 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200003e8 	.word	0x200003e8
 8002260:	40013800 	.word	0x40013800

08002264 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <MX_USART3_UART_Init+0x50>)
 800226c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800229c:	f003 fb95 	bl	80059ca <HAL_UART_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022a6:	f7ff f9e5 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000037c 	.word	0x2000037c
 80022b4:	40004800 	.word	0x40004800

080022b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a46      	ldr	r2, [pc, #280]	; (80023ec <HAL_UART_MspInit+0x134>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d146      	bne.n	8002366 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <HAL_UART_MspInit+0x138>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <HAL_UART_MspInit+0x138>)
 80022de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <HAL_UART_MspInit+0x138>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_UART_MspInit+0x138>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <HAL_UART_MspInit+0x138>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <HAL_UART_MspInit+0x138>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002308:	2340      	movs	r3, #64	; 0x40
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4619      	mov	r1, r3
 800231a:	4836      	ldr	r0, [pc, #216]	; (80023f4 <HAL_UART_MspInit+0x13c>)
 800231c:	f001 f8ac 	bl	8003478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	4830      	ldr	r0, [pc, #192]	; (80023f4 <HAL_UART_MspInit+0x13c>)
 8002334:	f001 f8a0 	bl	8003478 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002338:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_UART_MspInit+0x140>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234e:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <HAL_UART_MspInit+0x140>)
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002352:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	2025      	movs	r0, #37	; 0x25
 800235a:	f000 ff14 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800235e:	2025      	movs	r0, #37	; 0x25
 8002360:	f000 ff2d 	bl	80031be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002364:	e03e      	b.n	80023e4 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a24      	ldr	r2, [pc, #144]	; (80023fc <HAL_UART_MspInit+0x144>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d139      	bne.n	80023e4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_UART_MspInit+0x138>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <HAL_UART_MspInit+0x138>)
 8002376:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237a:	61d3      	str	r3, [r2, #28]
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <HAL_UART_MspInit+0x138>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_UART_MspInit+0x138>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <HAL_UART_MspInit+0x138>)
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_UART_MspInit+0x138>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	4619      	mov	r1, r3
 80023b4:	480f      	ldr	r0, [pc, #60]	; (80023f4 <HAL_UART_MspInit+0x13c>)
 80023b6:	f001 f85f 	bl	8003478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	4809      	ldr	r0, [pc, #36]	; (80023f4 <HAL_UART_MspInit+0x13c>)
 80023d0:	f001 f852 	bl	8003478 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	2027      	movs	r0, #39	; 0x27
 80023da:	f000 fed4 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023de:	2027      	movs	r0, #39	; 0x27
 80023e0:	f000 feed 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 80023e4:	bf00      	nop
 80023e6:	3730      	adds	r7, #48	; 0x30
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40013800 	.word	0x40013800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010c00 	.word	0x40010c00
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40004800 	.word	0x40004800

08002400 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* uartHandle)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	static uint32_t temp_tecduty = 1;
	static uint8_t temp_voiceCnt = 0;

	if(uartHandle->Instance == USART1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4aa8      	ldr	r2, [pc, #672]	; (80026b0 <HAL_UART_RxCpltCallback+0x2b0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d110      	bne.n	8002434 <HAL_UART_RxCpltCallback+0x34>
	{
		BtRx1Packet[BtCnt_Rx1Uart++] = Rx1Data[0];
 8002412:	4ba8      	ldr	r3, [pc, #672]	; (80026b4 <HAL_UART_RxCpltCallback+0x2b4>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	b2d1      	uxtb	r1, r2
 800241a:	4aa6      	ldr	r2, [pc, #664]	; (80026b4 <HAL_UART_RxCpltCallback+0x2b4>)
 800241c:	7011      	strb	r1, [r2, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4ba5      	ldr	r3, [pc, #660]	; (80026b8 <HAL_UART_RxCpltCallback+0x2b8>)
 8002422:	7819      	ldrb	r1, [r3, #0]
 8002424:	4ba5      	ldr	r3, [pc, #660]	; (80026bc <HAL_UART_RxCpltCallback+0x2bc>)
 8002426:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, (uint8_t*) Rx1Data, 1);
 8002428:	2201      	movs	r2, #1
 800242a:	49a3      	ldr	r1, [pc, #652]	; (80026b8 <HAL_UART_RxCpltCallback+0x2b8>)
 800242c:	48a4      	ldr	r0, [pc, #656]	; (80026c0 <HAL_UART_RxCpltCallback+0x2c0>)
 800242e:	f003 fbab 	bl	8005b88 <HAL_UART_Receive_IT>

		Cnt_Rx3Uart = 0;

		HAL_UART_Receive_IT(&huart3, (uint8_t*) Rx3Data, 1);
	}
}
 8002432:	e1da      	b.n	80027ea <HAL_UART_RxCpltCallback+0x3ea>
	else if(uartHandle->Instance == USART3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4aa2      	ldr	r2, [pc, #648]	; (80026c4 <HAL_UART_RxCpltCallback+0x2c4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	f040 81d5 	bne.w	80027ea <HAL_UART_RxCpltCallback+0x3ea>
		Cnt_Rx3Uart++;
 8002440:	4ba1      	ldr	r3, [pc, #644]	; (80026c8 <HAL_UART_RxCpltCallback+0x2c8>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b9f      	ldr	r3, [pc, #636]	; (80026c8 <HAL_UART_RxCpltCallback+0x2c8>)
 800244a:	701a      	strb	r2, [r3, #0]
		Rx3Packet[Cnt_Rx3Uart-1] = Rx3Data[0];
 800244c:	4b9e      	ldr	r3, [pc, #632]	; (80026c8 <HAL_UART_RxCpltCallback+0x2c8>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a9e      	ldr	r2, [pc, #632]	; (80026cc <HAL_UART_RxCpltCallback+0x2cc>)
 8002454:	7811      	ldrb	r1, [r2, #0]
 8002456:	4a9e      	ldr	r2, [pc, #632]	; (80026d0 <HAL_UART_RxCpltCallback+0x2d0>)
 8002458:	54d1      	strb	r1, [r2, r3]
		switch(Rx3Data[0])
 800245a:	4b9c      	ldr	r3, [pc, #624]	; (80026cc <HAL_UART_RxCpltCallback+0x2cc>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	3b2b      	subs	r3, #43	; 0x2b
 8002460:	2b39      	cmp	r3, #57	; 0x39
 8002462:	f200 81ba 	bhi.w	80027da <HAL_UART_RxCpltCallback+0x3da>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <HAL_UART_RxCpltCallback+0x6c>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	08002599 	.word	0x08002599
 8002470:	080027db 	.word	0x080027db
 8002474:	080025d7 	.word	0x080025d7
 8002478:	080027db 	.word	0x080027db
 800247c:	080027db 	.word	0x080027db
 8002480:	08002611 	.word	0x08002611
 8002484:	0800262d 	.word	0x0800262d
 8002488:	0800266f 	.word	0x0800266f
 800248c:	080026f1 	.word	0x080026f1
 8002490:	080027db 	.word	0x080027db
 8002494:	08002729 	.word	0x08002729
 8002498:	08002745 	.word	0x08002745
 800249c:	08002761 	.word	0x08002761
 80024a0:	08002789 	.word	0x08002789
 80024a4:	080027af 	.word	0x080027af
 80024a8:	080027db 	.word	0x080027db
 80024ac:	080027db 	.word	0x080027db
 80024b0:	080027db 	.word	0x080027db
 80024b4:	080027db 	.word	0x080027db
 80024b8:	080027db 	.word	0x080027db
 80024bc:	080027db 	.word	0x080027db
 80024c0:	080027db 	.word	0x080027db
 80024c4:	08002555 	.word	0x08002555
 80024c8:	080027db 	.word	0x080027db
 80024cc:	08002573 	.word	0x08002573
 80024d0:	0800257b 	.word	0x0800257b
 80024d4:	080027db 	.word	0x080027db
 80024d8:	080027db 	.word	0x080027db
 80024dc:	080027db 	.word	0x080027db
 80024e0:	080027db 	.word	0x080027db
 80024e4:	080027db 	.word	0x080027db
 80024e8:	080027db 	.word	0x080027db
 80024ec:	080027db 	.word	0x080027db
 80024f0:	080027db 	.word	0x080027db
 80024f4:	080027db 	.word	0x080027db
 80024f8:	080027db 	.word	0x080027db
 80024fc:	080027db 	.word	0x080027db
 8002500:	080027db 	.word	0x080027db
 8002504:	080027db 	.word	0x080027db
 8002508:	080027db 	.word	0x080027db
 800250c:	080027db 	.word	0x080027db
 8002510:	080027db 	.word	0x080027db
 8002514:	080027db 	.word	0x080027db
 8002518:	080027db 	.word	0x080027db
 800251c:	080027db 	.word	0x080027db
 8002520:	080027db 	.word	0x080027db
 8002524:	080027db 	.word	0x080027db
 8002528:	080027db 	.word	0x080027db
 800252c:	080027db 	.word	0x080027db
 8002530:	080027db 	.word	0x080027db
 8002534:	080027db 	.word	0x080027db
 8002538:	080027db 	.word	0x080027db
 800253c:	080027db 	.word	0x080027db
 8002540:	080027db 	.word	0x080027db
 8002544:	08002555 	.word	0x08002555
 8002548:	080027db 	.word	0x080027db
 800254c:	08002573 	.word	0x08002573
 8002550:	0800257b 	.word	0x0800257b
			SysMode.OperationMode++;
 8002554:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002556:	789b      	ldrb	r3, [r3, #2]
 8002558:	3301      	adds	r3, #1
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 800255e:	709a      	strb	r2, [r3, #2]
			if(SysMode.OperationMode > EYECARE_MODE)
 8002560:	4b5c      	ldr	r3, [pc, #368]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002562:	789b      	ldrb	r3, [r3, #2]
 8002564:	2b08      	cmp	r3, #8
 8002566:	f240 8135 	bls.w	80027d4 <HAL_UART_RxCpltCallback+0x3d4>
				SysMode.OperationMode = SOOTHING_MODE;
 800256a:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 800256c:	2202      	movs	r2, #2
 800256e:	709a      	strb	r2, [r3, #2]
			break;
 8002570:	e130      	b.n	80027d4 <HAL_UART_RxCpltCallback+0x3d4>
			Flag_KeyLock = 1;
 8002572:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_UART_RxCpltCallback+0x2d8>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
			break;
 8002578:	e12f      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			SysMode.OperationIntensity++;
 800257a:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 800257c:	791b      	ldrb	r3, [r3, #4]
 800257e:	3301      	adds	r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002584:	711a      	strb	r2, [r3, #4]
			if(SysMode.OperationIntensity > LEVEL5){
 8002586:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002588:	791b      	ldrb	r3, [r3, #4]
 800258a:	2b05      	cmp	r3, #5
 800258c:	f240 8124 	bls.w	80027d8 <HAL_UART_RxCpltCallback+0x3d8>
				SysMode.OperationIntensity = LEVEL1;
 8002590:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002592:	2201      	movs	r2, #1
 8002594:	711a      	strb	r2, [r3, #4]
			break;
 8002596:	e11f      	b.n	80027d8 <HAL_UART_RxCpltCallback+0x3d8>
			temp_tecduty++;
 8002598:	4b50      	ldr	r3, [pc, #320]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	4a4f      	ldr	r2, [pc, #316]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025a0:	6013      	str	r3, [r2, #0]
			if(temp_tecduty > 1799)	temp_tecduty = 1799;
 80025a2:	4b4e      	ldr	r3, [pc, #312]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80025aa:	d303      	bcc.n	80025b4 <HAL_UART_RxCpltCallback+0x1b4>
 80025ac:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025ae:	f240 7207 	movw	r2, #1799	; 0x707
 80025b2:	601a      	str	r2, [r3, #0]
			htim3.Instance -> CCR3 = temp_tecduty;
 80025b4:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a48      	ldr	r2, [pc, #288]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance -> CCR4 = temp_tecduty;
 80025be:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a46      	ldr	r2, [pc, #280]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
			printf("TEC DUTYRATE : %d\r\n", temp_tecduty);
 80025c8:	4b44      	ldr	r3, [pc, #272]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4845      	ldr	r0, [pc, #276]	; (80026e4 <HAL_UART_RxCpltCallback+0x2e4>)
 80025d0:	f003 ff64 	bl	800649c <iprintf>
			break;
 80025d4:	e101      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			temp_tecduty--;
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3b01      	subs	r3, #1
 80025dc:	4a3f      	ldr	r2, [pc, #252]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025de:	6013      	str	r3, [r2, #0]
			if(temp_tecduty < 1)	temp_tecduty = 1;
 80025e0:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <HAL_UART_RxCpltCallback+0x1ee>
 80025e8:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
			htim3.Instance -> CCR3 = temp_tecduty;
 80025ee:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a3a      	ldr	r2, [pc, #232]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance -> CCR4 = temp_tecduty;
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a37      	ldr	r2, [pc, #220]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
			printf("TEC DUTYRATE : %d\r\n", temp_tecduty);
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4619      	mov	r1, r3
 8002608:	4836      	ldr	r0, [pc, #216]	; (80026e4 <HAL_UART_RxCpltCallback+0x2e4>)
 800260a:	f003 ff47 	bl	800649c <iprintf>
			break;
 800260e:	e0e4      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			printf(">> EMS Enabled\r\n");
 8002610:	4835      	ldr	r0, [pc, #212]	; (80026e8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002612:	f003 ffc9 	bl	80065a8 <puts>
			SysMode.OutputFunc |= OUTPUT_TENS_A;
 8002616:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002618:	799b      	ldrb	r3, [r3, #6]
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <HAL_UART_RxCpltCallback+0x2d4>)
 8002622:	719a      	strb	r2, [r3, #6]
			EMS_PulseEnable(EMS_A_MODE);
 8002624:	20a1      	movs	r0, #161	; 0xa1
 8002626:	f7fe fb93 	bl	8000d50 <EMS_PulseEnable>
			break;
 800262a:	e0d6      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			temp_tecduty = 0;
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
			htim3.Instance -> CCR3 = temp_tecduty;
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a29      	ldr	r2, [pc, #164]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance -> CCR4 = temp_tecduty;
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a26      	ldr	r2, [pc, #152]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002646:	210c      	movs	r1, #12
 8002648:	4825      	ldr	r0, [pc, #148]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 800264a:	f002 fc41 	bl	8004ed0 <HAL_TIM_PWM_Stop>
			TEC_DIR_LOW;
 800264e:	2200      	movs	r2, #0
 8002650:	2108      	movs	r1, #8
 8002652:	4826      	ldr	r0, [pc, #152]	; (80026ec <HAL_UART_RxCpltCallback+0x2ec>)
 8002654:	f001 f8a4 	bl	80037a0 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002658:	2108      	movs	r1, #8
 800265a:	4821      	ldr	r0, [pc, #132]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 800265c:	f002 fb7e 	bl	8004d5c <HAL_TIM_PWM_Start>
			printf("TEC DUTYRATE : %d\r\n", temp_tecduty);
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	481f      	ldr	r0, [pc, #124]	; (80026e4 <HAL_UART_RxCpltCallback+0x2e4>)
 8002668:	f003 ff18 	bl	800649c <iprintf>
			break;
 800266c:	e0b5      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			temp_tecduty = 0;
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
			htim3.Instance -> CCR3 = temp_tecduty;
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance -> CCR4 = temp_tecduty;
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a16      	ldr	r2, [pc, #88]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002688:	2108      	movs	r1, #8
 800268a:	4815      	ldr	r0, [pc, #84]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 800268c:	f002 fc20 	bl	8004ed0 <HAL_TIM_PWM_Stop>
			TEC_DIR_HIGH;
 8002690:	2201      	movs	r2, #1
 8002692:	2108      	movs	r1, #8
 8002694:	4815      	ldr	r0, [pc, #84]	; (80026ec <HAL_UART_RxCpltCallback+0x2ec>)
 8002696:	f001 f883 	bl	80037a0 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800269a:	210c      	movs	r1, #12
 800269c:	4810      	ldr	r0, [pc, #64]	; (80026e0 <HAL_UART_RxCpltCallback+0x2e0>)
 800269e:	f002 fb5d 	bl	8004d5c <HAL_TIM_PWM_Start>
			printf("TEC DUTYRATE : %d\r\n", temp_tecduty);
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_UART_RxCpltCallback+0x2dc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	480e      	ldr	r0, [pc, #56]	; (80026e4 <HAL_UART_RxCpltCallback+0x2e4>)
 80026aa:	f003 fef7 	bl	800649c <iprintf>
			break;
 80026ae:	e094      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
 80026b0:	40013800 	.word	0x40013800
 80026b4:	200000b5 	.word	0x200000b5
 80026b8:	200003d4 	.word	0x200003d4
 80026bc:	2000042c 	.word	0x2000042c
 80026c0:	200003e8 	.word	0x200003e8
 80026c4:	40004800 	.word	0x40004800
 80026c8:	200000b4 	.word	0x200000b4
 80026cc:	200003c0 	.word	0x200003c0
 80026d0:	200003c4 	.word	0x200003c4
 80026d4:	200000e4 	.word	0x200000e4
 80026d8:	20000091 	.word	0x20000091
 80026dc:	20000004 	.word	0x20000004
 80026e0:	2000025c 	.word	0x2000025c
 80026e4:	0800797c 	.word	0x0800797c
 80026e8:	08007990 	.word	0x08007990
 80026ec:	40011000 	.word	0x40011000
			temp_tecduty = 0;
 80026f0:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <HAL_UART_RxCpltCallback+0x3f4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
			htim3.Instance -> CCR3 = temp_tecduty;
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <HAL_UART_RxCpltCallback+0x3f8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a3e      	ldr	r2, [pc, #248]	; (80027f4 <HAL_UART_RxCpltCallback+0x3f4>)
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c
			htim3.Instance -> CCR4 = temp_tecduty;
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_UART_RxCpltCallback+0x3f8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a3b      	ldr	r2, [pc, #236]	; (80027f4 <HAL_UART_RxCpltCallback+0x3f4>)
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800270a:	2108      	movs	r1, #8
 800270c:	483a      	ldr	r0, [pc, #232]	; (80027f8 <HAL_UART_RxCpltCallback+0x3f8>)
 800270e:	f002 fbdf 	bl	8004ed0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002712:	210c      	movs	r1, #12
 8002714:	4838      	ldr	r0, [pc, #224]	; (80027f8 <HAL_UART_RxCpltCallback+0x3f8>)
 8002716:	f002 fbdb 	bl	8004ed0 <HAL_TIM_PWM_Stop>
			printf("TEC DUTYRATE : %d\r\n", temp_tecduty);
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_UART_RxCpltCallback+0x3f4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4619      	mov	r1, r3
 8002720:	4836      	ldr	r0, [pc, #216]	; (80027fc <HAL_UART_RxCpltCallback+0x3fc>)
 8002722:	f003 febb 	bl	800649c <iprintf>
			break;
 8002726:	e058      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			printf(">> Ion(+) Enabled\r\n");
 8002728:	4835      	ldr	r0, [pc, #212]	; (8002800 <HAL_UART_RxCpltCallback+0x400>)
 800272a:	f003 ff3d 	bl	80065a8 <puts>
			SysMode.OutputFunc |= OUTPUT_ION_P;
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 8002730:	799b      	ldrb	r3, [r3, #6]
 8002732:	f043 0308 	orr.w	r3, r3, #8
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 800273a:	719a      	strb	r2, [r3, #6]
			EMS_PulseEnable(ION_P_MODE);
 800273c:	20a3      	movs	r0, #163	; 0xa3
 800273e:	f7fe fb07 	bl	8000d50 <EMS_PulseEnable>
			break;
 8002742:	e04a      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			printf(">> Ion(-) Enabled\r\n");
 8002744:	4830      	ldr	r0, [pc, #192]	; (8002808 <HAL_UART_RxCpltCallback+0x408>)
 8002746:	f003 ff2f 	bl	80065a8 <puts>
			SysMode.OutputFunc |= OUTPUT_ION_N;
 800274a:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 800274c:	799b      	ldrb	r3, [r3, #6]
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 8002756:	719a      	strb	r2, [r3, #6]
			EMS_PulseEnable(ION_N_MODE);
 8002758:	20a4      	movs	r0, #164	; 0xa4
 800275a:	f7fe faf9 	bl	8000d50 <EMS_PulseEnable>
			break;
 800275e:	e03c      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			printf(">> Ion(-) Disabled\r\n");
 8002760:	482a      	ldr	r0, [pc, #168]	; (800280c <HAL_UART_RxCpltCallback+0x40c>)
 8002762:	f003 ff21 	bl	80065a8 <puts>
			SysMode.OutputFunc &= ~OUTPUT_ION_P;
 8002766:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 8002768:	799b      	ldrb	r3, [r3, #6]
 800276a:	f023 0308 	bic.w	r3, r3, #8
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 8002772:	719a      	strb	r2, [r3, #6]
			SysMode.OutputFunc &= ~OUTPUT_ION_N;
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 8002776:	799b      	ldrb	r3, [r3, #6]
 8002778:	f023 0310 	bic.w	r3, r3, #16
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 8002780:	719a      	strb	r2, [r3, #6]
			EMS_PulseDisable();
 8002782:	f7fe fbab 	bl	8000edc <EMS_PulseDisable>
			break;
 8002786:	e028      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			printf(">> 1MHz RF Enabled\r\n");
 8002788:	4821      	ldr	r0, [pc, #132]	; (8002810 <HAL_UART_RxCpltCallback+0x410>)
 800278a:	f003 ff0d 	bl	80065a8 <puts>
			SysMode.OutputFunc |= OUTPUT_RF;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 8002790:	799b      	ldrb	r3, [r3, #6]
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 800279a:	719a      	strb	r2, [r3, #6]
			RF_PulseEnable();
 800279c:	f7fe fa96 	bl	8000ccc <RF_PulseEnable>
			RF_ENABLE;
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a6:	481b      	ldr	r0, [pc, #108]	; (8002814 <HAL_UART_RxCpltCallback+0x414>)
 80027a8:	f000 fffa 	bl	80037a0 <HAL_GPIO_WritePin>
			break;
 80027ac:	e015      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			printf(">> 1MHz RF Disabled\r\n");
 80027ae:	481a      	ldr	r0, [pc, #104]	; (8002818 <HAL_UART_RxCpltCallback+0x418>)
 80027b0:	f003 fefa 	bl	80065a8 <puts>
			SysMode.OutputFunc &= ~OUTPUT_RF;
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 80027b6:	799b      	ldrb	r3, [r3, #6]
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_UART_RxCpltCallback+0x404>)
 80027c0:	719a      	strb	r2, [r3, #6]
			RF_DISABLE;
 80027c2:	2201      	movs	r2, #1
 80027c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c8:	4812      	ldr	r0, [pc, #72]	; (8002814 <HAL_UART_RxCpltCallback+0x414>)
 80027ca:	f000 ffe9 	bl	80037a0 <HAL_GPIO_WritePin>
			RF_PulseDisable();
 80027ce:	f7fe fab3 	bl	8000d38 <RF_PulseDisable>
			break;
 80027d2:	e002      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			break;
 80027d4:	bf00      	nop
 80027d6:	e000      	b.n	80027da <HAL_UART_RxCpltCallback+0x3da>
			break;
 80027d8:	bf00      	nop
		Cnt_Rx3Uart = 0;
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_UART_RxCpltCallback+0x41c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*) Rx3Data, 1);
 80027e0:	2201      	movs	r2, #1
 80027e2:	490f      	ldr	r1, [pc, #60]	; (8002820 <HAL_UART_RxCpltCallback+0x420>)
 80027e4:	480f      	ldr	r0, [pc, #60]	; (8002824 <HAL_UART_RxCpltCallback+0x424>)
 80027e6:	f003 f9cf 	bl	8005b88 <HAL_UART_Receive_IT>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000004 	.word	0x20000004
 80027f8:	2000025c 	.word	0x2000025c
 80027fc:	0800797c 	.word	0x0800797c
 8002800:	080079a0 	.word	0x080079a0
 8002804:	200000e4 	.word	0x200000e4
 8002808:	080079b4 	.word	0x080079b4
 800280c:	080079c8 	.word	0x080079c8
 8002810:	080079dc 	.word	0x080079dc
 8002814:	40010800 	.word	0x40010800
 8002818:	080079f0 	.word	0x080079f0
 800281c:	200000b4 	.word	0x200000b4
 8002820:	200003c0 	.word	0x200003c0
 8002824:	2000037c 	.word	0x2000037c

08002828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800282a:	490d      	ldr	r1, [pc, #52]	; (8002860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002840:	4c0a      	ldr	r4, [pc, #40]	; (800286c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800284e:	f7ff f91f 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f003 fdf7 	bl	8006444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002856:	f7fe fe65 	bl	8001524 <main>
  bx lr
 800285a:	4770      	bx	lr
  ldr r0, =_sdata
 800285c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002860:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002864:	08007ad0 	.word	0x08007ad0
  ldr r2, =_sbss
 8002868:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800286c:	20000450 	.word	0x20000450

08002870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <ADC1_2_IRQHandler>
	...

08002874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_Init+0x28>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_Init+0x28>)
 800287e:	f043 0310 	orr.w	r3, r3, #16
 8002882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002884:	2003      	movs	r0, #3
 8002886:	f000 fc73 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288a:	200f      	movs	r0, #15
 800288c:	f000 f808 	bl	80028a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002890:	f7fe ff6a 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40022000 	.word	0x40022000

080028a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_InitTick+0x54>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_InitTick+0x58>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fc8b 	bl	80031da <HAL_SYSTICK_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00e      	b.n	80028ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b0f      	cmp	r3, #15
 80028d2:	d80a      	bhi.n	80028ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d4:	2200      	movs	r2, #0
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f000 fc53 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <HAL_InitTick+0x5c>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000000 	.word	0x20000000
 80028f8:	2000000c 	.word	0x2000000c
 80028fc:	20000008 	.word	0x20000008

08002900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_IncTick+0x1c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_IncTick+0x20>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4413      	add	r3, r2
 8002910:	4a03      	ldr	r2, [pc, #12]	; (8002920 <HAL_IncTick+0x20>)
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	2000000c 	.word	0x2000000c
 8002920:	2000043c 	.word	0x2000043c

08002924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <HAL_GetTick+0x10>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	2000043c 	.word	0x2000043c

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff fff0 	bl	8002924 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_Delay+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffe0 	bl	8002924 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000000c 	.word	0x2000000c

08002980 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0ce      	b.n	8002b40 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d109      	bne.n	80029c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe fb0a 	bl	8000fd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fac5 	bl	8002f54 <ADC_ConversionStop_Disable>
 80029ca:	4603      	mov	r3, r0
 80029cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 80a9 	bne.w	8002b2e <HAL_ADC_Init+0x1ae>
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 80a5 	bne.w	8002b2e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029ec:	f023 0302 	bic.w	r3, r3, #2
 80029f0:	f043 0202 	orr.w	r2, r3, #2
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4951      	ldr	r1, [pc, #324]	; (8002b48 <HAL_ADC_Init+0x1c8>)
 8002a02:	428b      	cmp	r3, r1
 8002a04:	d10a      	bne.n	8002a1c <HAL_ADC_Init+0x9c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a0e:	d002      	beq.n	8002a16 <HAL_ADC_Init+0x96>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	e004      	b.n	8002a20 <HAL_ADC_Init+0xa0>
 8002a16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a1a:	e001      	b.n	8002a20 <HAL_ADC_Init+0xa0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7b1b      	ldrb	r3, [r3, #12]
 8002a26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d003      	beq.n	8002a42 <HAL_ADC_Init+0xc2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_ADC_Init+0xc8>
 8002a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a46:	e000      	b.n	8002a4a <HAL_ADC_Init+0xca>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7d1b      	ldrb	r3, [r3, #20]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d119      	bne.n	8002a8c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7b1b      	ldrb	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	035a      	lsls	r2, r3, #13
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e00b      	b.n	8002a8c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_ADC_Init+0x1cc>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abc:	d003      	beq.n	8002ac6 <HAL_ADC_Init+0x146>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d104      	bne.n	8002ad0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	051b      	lsls	r3, r3, #20
 8002ace:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_ADC_Init+0x1d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10b      	bne.n	8002b0c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	f023 0303 	bic.w	r3, r3, #3
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b0a:	e018      	b.n	8002b3e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f023 0312 	bic.w	r3, r3, #18
 8002b14:	f043 0210 	orr.w	r2, r3, #16
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b2c:	e007      	b.n	8002b3e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013c00 	.word	0x40013c00
 8002b4c:	ffe1f7fd 	.word	0xffe1f7fd
 8002b50:	ff1f0efe 	.word	0xff1f0efe

08002b54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_Start+0x1a>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e098      	b.n	8002ca0 <HAL_ADC_Start+0x14c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f992 	bl	8002ea0 <ADC_Enable>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 8087 	bne.w	8002c96 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a41      	ldr	r2, [pc, #260]	; (8002ca8 <HAL_ADC_Start+0x154>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d105      	bne.n	8002bb2 <HAL_ADC_Start+0x5e>
 8002ba6:	4b41      	ldr	r3, [pc, #260]	; (8002cac <HAL_ADC_Start+0x158>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d115      	bne.n	8002bde <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d026      	beq.n	8002c1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bdc:	e01d      	b.n	8002c1a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <HAL_ADC_Start+0x158>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_ADC_Start+0xaa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_ADC_Start+0x154>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10d      	bne.n	8002c1a <HAL_ADC_Start+0xc6>
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_ADC_Start+0x158>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f023 0206 	bic.w	r2, r3, #6
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c32:	e002      	b.n	8002c3a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0202 	mvn.w	r2, #2
 8002c4a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c5a:	d113      	bne.n	8002c84 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c60:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_ADC_Start+0x154>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d105      	bne.n	8002c72 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_ADC_Start+0x158>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	e00c      	b.n	8002c9e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	e003      	b.n	8002c9e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40012800 	.word	0x40012800
 8002cac:	40012400 	.word	0x40012400

08002cb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x20>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0dc      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x1da>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d81c      	bhi.n	8002d1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b05      	subs	r3, #5
 8002cf2:	221f      	movs	r2, #31
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	4019      	ands	r1, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b05      	subs	r3, #5
 8002d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34
 8002d18:	e03c      	b.n	8002d94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d81c      	bhi.n	8002d5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	3b23      	subs	r3, #35	; 0x23
 8002d34:	221f      	movs	r2, #31
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	4019      	ands	r1, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b23      	subs	r3, #35	; 0x23
 8002d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
 8002d5a:	e01b      	b.n	8002d94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b41      	subs	r3, #65	; 0x41
 8002d6e:	221f      	movs	r2, #31
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4019      	ands	r1, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b41      	subs	r3, #65	; 0x41
 8002d88:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b09      	cmp	r3, #9
 8002d9a:	d91c      	bls.n	8002dd6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68d9      	ldr	r1, [r3, #12]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	3b1e      	subs	r3, #30
 8002dae:	2207      	movs	r2, #7
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4019      	ands	r1, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6898      	ldr	r0, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b1e      	subs	r3, #30
 8002dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	e019      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6919      	ldr	r1, [r3, #16]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	2207      	movs	r2, #7
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	4019      	ands	r1, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6898      	ldr	r0, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d003      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e16:	2b11      	cmp	r3, #17
 8002e18:	d132      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d125      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d126      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e40:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d11a      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <HAL_ADC_ConfigChannel+0x1ec>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	0c9a      	lsrs	r2, r3, #18
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1b2>
 8002e6e:	e007      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40012400 	.word	0x40012400
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	431bde83 	.word	0x431bde83

08002ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d040      	beq.n	8002f40 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <ADC_Enable+0xac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <ADC_Enable+0xb0>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	0c9b      	lsrs	r3, r3, #18
 8002eda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002edc:	e002      	b.n	8002ee4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f9      	bne.n	8002ede <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eea:	f7ff fd1b 	bl	8002924 <HAL_GetTick>
 8002eee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ef0:	e01f      	b.n	8002f32 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ef2:	f7ff fd17 	bl	8002924 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d918      	bls.n	8002f32 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d011      	beq.n	8002f32 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f043 0210 	orr.w	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e007      	b.n	8002f42 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d1d8      	bne.n	8002ef2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	431bde83 	.word	0x431bde83

08002f54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d12e      	bne.n	8002fcc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f7e:	f7ff fcd1 	bl	8002924 <HAL_GetTick>
 8002f82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f84:	e01b      	b.n	8002fbe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f86:	f7ff fccd 	bl	8002924 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d914      	bls.n	8002fbe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10d      	bne.n	8002fbe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	f043 0210 	orr.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e007      	b.n	8002fce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d0dc      	beq.n	8002f86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4906      	ldr	r1, [pc, #24]	; (8003070 <__NVIC_EnableIRQ+0x34>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff90 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff2d 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff42 	bl	8003020 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff90 	bl	80030c8 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5f 	bl	8003074 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff35 	bl	800303c <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa2 	bl	800312c <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003204:	2b02      	cmp	r3, #2
 8003206:	d008      	beq.n	800321a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2204      	movs	r2, #4
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e020      	b.n	800325c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 020e 	bic.w	r2, r2, #14
 8003228:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
	...

08003268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800327a:	2b02      	cmp	r3, #2
 800327c:	d005      	beq.n	800328a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e0d6      	b.n	8003438 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 020e 	bic.w	r2, r2, #14
 8003298:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b64      	ldr	r3, [pc, #400]	; (8003444 <HAL_DMA_Abort_IT+0x1dc>)
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d958      	bls.n	8003368 <HAL_DMA_Abort_IT+0x100>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a63      	ldr	r2, [pc, #396]	; (8003448 <HAL_DMA_Abort_IT+0x1e0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d04f      	beq.n	8003360 <HAL_DMA_Abort_IT+0xf8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a61      	ldr	r2, [pc, #388]	; (800344c <HAL_DMA_Abort_IT+0x1e4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d048      	beq.n	800335c <HAL_DMA_Abort_IT+0xf4>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a60      	ldr	r2, [pc, #384]	; (8003450 <HAL_DMA_Abort_IT+0x1e8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_DMA_Abort_IT+0xee>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <HAL_DMA_Abort_IT+0x1ec>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d038      	beq.n	8003350 <HAL_DMA_Abort_IT+0xe8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_DMA_Abort_IT+0x1f0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d030      	beq.n	800334a <HAL_DMA_Abort_IT+0xe2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a5b      	ldr	r2, [pc, #364]	; (800345c <HAL_DMA_Abort_IT+0x1f4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d028      	beq.n	8003344 <HAL_DMA_Abort_IT+0xdc>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a53      	ldr	r2, [pc, #332]	; (8003444 <HAL_DMA_Abort_IT+0x1dc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d020      	beq.n	800333e <HAL_DMA_Abort_IT+0xd6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a57      	ldr	r2, [pc, #348]	; (8003460 <HAL_DMA_Abort_IT+0x1f8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d019      	beq.n	800333a <HAL_DMA_Abort_IT+0xd2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a56      	ldr	r2, [pc, #344]	; (8003464 <HAL_DMA_Abort_IT+0x1fc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d012      	beq.n	8003336 <HAL_DMA_Abort_IT+0xce>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a54      	ldr	r2, [pc, #336]	; (8003468 <HAL_DMA_Abort_IT+0x200>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00a      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a53      	ldr	r2, [pc, #332]	; (800346c <HAL_DMA_Abort_IT+0x204>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d102      	bne.n	800332a <HAL_DMA_Abort_IT+0xc2>
 8003324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003328:	e01b      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 800332a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800332e:	e018      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 8003330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003334:	e015      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 8003336:	2310      	movs	r3, #16
 8003338:	e013      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 800333a:	2301      	movs	r3, #1
 800333c:	e011      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 800333e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003342:	e00e      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 8003344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003348:	e00b      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 800334a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334e:	e008      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 8003350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003354:	e005      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 8003356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800335a:	e002      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 800335c:	2310      	movs	r3, #16
 800335e:	e000      	b.n	8003362 <HAL_DMA_Abort_IT+0xfa>
 8003360:	2301      	movs	r3, #1
 8003362:	4a43      	ldr	r2, [pc, #268]	; (8003470 <HAL_DMA_Abort_IT+0x208>)
 8003364:	6053      	str	r3, [r2, #4]
 8003366:	e057      	b.n	8003418 <HAL_DMA_Abort_IT+0x1b0>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a36      	ldr	r2, [pc, #216]	; (8003448 <HAL_DMA_Abort_IT+0x1e0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04f      	beq.n	8003412 <HAL_DMA_Abort_IT+0x1aa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a35      	ldr	r2, [pc, #212]	; (800344c <HAL_DMA_Abort_IT+0x1e4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d048      	beq.n	800340e <HAL_DMA_Abort_IT+0x1a6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a33      	ldr	r2, [pc, #204]	; (8003450 <HAL_DMA_Abort_IT+0x1e8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d040      	beq.n	8003408 <HAL_DMA_Abort_IT+0x1a0>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a32      	ldr	r2, [pc, #200]	; (8003454 <HAL_DMA_Abort_IT+0x1ec>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d038      	beq.n	8003402 <HAL_DMA_Abort_IT+0x19a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a30      	ldr	r2, [pc, #192]	; (8003458 <HAL_DMA_Abort_IT+0x1f0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d030      	beq.n	80033fc <HAL_DMA_Abort_IT+0x194>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2f      	ldr	r2, [pc, #188]	; (800345c <HAL_DMA_Abort_IT+0x1f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d028      	beq.n	80033f6 <HAL_DMA_Abort_IT+0x18e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_DMA_Abort_IT+0x1dc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d020      	beq.n	80033f0 <HAL_DMA_Abort_IT+0x188>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2b      	ldr	r2, [pc, #172]	; (8003460 <HAL_DMA_Abort_IT+0x1f8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d019      	beq.n	80033ec <HAL_DMA_Abort_IT+0x184>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_DMA_Abort_IT+0x1fc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d012      	beq.n	80033e8 <HAL_DMA_Abort_IT+0x180>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a28      	ldr	r2, [pc, #160]	; (8003468 <HAL_DMA_Abort_IT+0x200>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00a      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a26      	ldr	r2, [pc, #152]	; (800346c <HAL_DMA_Abort_IT+0x204>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d102      	bne.n	80033dc <HAL_DMA_Abort_IT+0x174>
 80033d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033da:	e01b      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 80033dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e0:	e018      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 80033e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033e6:	e015      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 80033e8:	2310      	movs	r3, #16
 80033ea:	e013      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e011      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 80033f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033f4:	e00e      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 80033f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033fa:	e00b      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 80033fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003400:	e008      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 8003402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003406:	e005      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 8003408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800340c:	e002      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 800340e:	2310      	movs	r3, #16
 8003410:	e000      	b.n	8003414 <HAL_DMA_Abort_IT+0x1ac>
 8003412:	2301      	movs	r3, #1
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <HAL_DMA_Abort_IT+0x20c>)
 8003416:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
    } 
  }
  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40020080 	.word	0x40020080
 8003448:	40020008 	.word	0x40020008
 800344c:	4002001c 	.word	0x4002001c
 8003450:	40020030 	.word	0x40020030
 8003454:	40020044 	.word	0x40020044
 8003458:	40020058 	.word	0x40020058
 800345c:	4002006c 	.word	0x4002006c
 8003460:	40020408 	.word	0x40020408
 8003464:	4002041c 	.word	0x4002041c
 8003468:	40020430 	.word	0x40020430
 800346c:	40020444 	.word	0x40020444
 8003470:	40020400 	.word	0x40020400
 8003474:	40020000 	.word	0x40020000

08003478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003478:	b480      	push	{r7}
 800347a:	b08b      	sub	sp, #44	; 0x2c
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348a:	e179      	b.n	8003780 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800348c:	2201      	movs	r2, #1
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	f040 8168 	bne.w	800377a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4aa0      	ldr	r2, [pc, #640]	; (8003730 <HAL_GPIO_Init+0x2b8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d05e      	beq.n	8003572 <HAL_GPIO_Init+0xfa>
 80034b4:	4a9e      	ldr	r2, [pc, #632]	; (8003730 <HAL_GPIO_Init+0x2b8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d875      	bhi.n	80035a6 <HAL_GPIO_Init+0x12e>
 80034ba:	4a9e      	ldr	r2, [pc, #632]	; (8003734 <HAL_GPIO_Init+0x2bc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d058      	beq.n	8003572 <HAL_GPIO_Init+0xfa>
 80034c0:	4a9c      	ldr	r2, [pc, #624]	; (8003734 <HAL_GPIO_Init+0x2bc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d86f      	bhi.n	80035a6 <HAL_GPIO_Init+0x12e>
 80034c6:	4a9c      	ldr	r2, [pc, #624]	; (8003738 <HAL_GPIO_Init+0x2c0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d052      	beq.n	8003572 <HAL_GPIO_Init+0xfa>
 80034cc:	4a9a      	ldr	r2, [pc, #616]	; (8003738 <HAL_GPIO_Init+0x2c0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d869      	bhi.n	80035a6 <HAL_GPIO_Init+0x12e>
 80034d2:	4a9a      	ldr	r2, [pc, #616]	; (800373c <HAL_GPIO_Init+0x2c4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d04c      	beq.n	8003572 <HAL_GPIO_Init+0xfa>
 80034d8:	4a98      	ldr	r2, [pc, #608]	; (800373c <HAL_GPIO_Init+0x2c4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d863      	bhi.n	80035a6 <HAL_GPIO_Init+0x12e>
 80034de:	4a98      	ldr	r2, [pc, #608]	; (8003740 <HAL_GPIO_Init+0x2c8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d046      	beq.n	8003572 <HAL_GPIO_Init+0xfa>
 80034e4:	4a96      	ldr	r2, [pc, #600]	; (8003740 <HAL_GPIO_Init+0x2c8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d85d      	bhi.n	80035a6 <HAL_GPIO_Init+0x12e>
 80034ea:	2b12      	cmp	r3, #18
 80034ec:	d82a      	bhi.n	8003544 <HAL_GPIO_Init+0xcc>
 80034ee:	2b12      	cmp	r3, #18
 80034f0:	d859      	bhi.n	80035a6 <HAL_GPIO_Init+0x12e>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_GPIO_Init+0x80>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	08003573 	.word	0x08003573
 80034fc:	0800354d 	.word	0x0800354d
 8003500:	0800355f 	.word	0x0800355f
 8003504:	080035a1 	.word	0x080035a1
 8003508:	080035a7 	.word	0x080035a7
 800350c:	080035a7 	.word	0x080035a7
 8003510:	080035a7 	.word	0x080035a7
 8003514:	080035a7 	.word	0x080035a7
 8003518:	080035a7 	.word	0x080035a7
 800351c:	080035a7 	.word	0x080035a7
 8003520:	080035a7 	.word	0x080035a7
 8003524:	080035a7 	.word	0x080035a7
 8003528:	080035a7 	.word	0x080035a7
 800352c:	080035a7 	.word	0x080035a7
 8003530:	080035a7 	.word	0x080035a7
 8003534:	080035a7 	.word	0x080035a7
 8003538:	080035a7 	.word	0x080035a7
 800353c:	08003555 	.word	0x08003555
 8003540:	08003569 	.word	0x08003569
 8003544:	4a7f      	ldr	r2, [pc, #508]	; (8003744 <HAL_GPIO_Init+0x2cc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800354a:	e02c      	b.n	80035a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	623b      	str	r3, [r7, #32]
          break;
 8003552:	e029      	b.n	80035a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	3304      	adds	r3, #4
 800355a:	623b      	str	r3, [r7, #32]
          break;
 800355c:	e024      	b.n	80035a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	3308      	adds	r3, #8
 8003564:	623b      	str	r3, [r7, #32]
          break;
 8003566:	e01f      	b.n	80035a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	330c      	adds	r3, #12
 800356e:	623b      	str	r3, [r7, #32]
          break;
 8003570:	e01a      	b.n	80035a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800357a:	2304      	movs	r3, #4
 800357c:	623b      	str	r3, [r7, #32]
          break;
 800357e:	e013      	b.n	80035a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003588:	2308      	movs	r3, #8
 800358a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	611a      	str	r2, [r3, #16]
          break;
 8003592:	e009      	b.n	80035a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003594:	2308      	movs	r3, #8
 8003596:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	615a      	str	r2, [r3, #20]
          break;
 800359e:	e003      	b.n	80035a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035a0:	2300      	movs	r3, #0
 80035a2:	623b      	str	r3, [r7, #32]
          break;
 80035a4:	e000      	b.n	80035a8 <HAL_GPIO_Init+0x130>
          break;
 80035a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2bff      	cmp	r3, #255	; 0xff
 80035ac:	d801      	bhi.n	80035b2 <HAL_GPIO_Init+0x13a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_Init+0x13e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2bff      	cmp	r3, #255	; 0xff
 80035bc:	d802      	bhi.n	80035c4 <HAL_GPIO_Init+0x14c>
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	e002      	b.n	80035ca <HAL_GPIO_Init+0x152>
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	3b08      	subs	r3, #8
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	210f      	movs	r1, #15
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	401a      	ands	r2, r3
 80035dc:	6a39      	ldr	r1, [r7, #32]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	431a      	orrs	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80c1 	beq.w	800377a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6193      	str	r3, [r2, #24]
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_GPIO_Init+0x2d0>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003610:	4a4e      	ldr	r2, [pc, #312]	; (800374c <HAL_GPIO_Init+0x2d4>)
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a46      	ldr	r2, [pc, #280]	; (8003750 <HAL_GPIO_Init+0x2d8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01f      	beq.n	800367c <HAL_GPIO_Init+0x204>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a45      	ldr	r2, [pc, #276]	; (8003754 <HAL_GPIO_Init+0x2dc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d019      	beq.n	8003678 <HAL_GPIO_Init+0x200>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a44      	ldr	r2, [pc, #272]	; (8003758 <HAL_GPIO_Init+0x2e0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_GPIO_Init+0x1fc>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a43      	ldr	r2, [pc, #268]	; (800375c <HAL_GPIO_Init+0x2e4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00d      	beq.n	8003670 <HAL_GPIO_Init+0x1f8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a42      	ldr	r2, [pc, #264]	; (8003760 <HAL_GPIO_Init+0x2e8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <HAL_GPIO_Init+0x1f4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a41      	ldr	r2, [pc, #260]	; (8003764 <HAL_GPIO_Init+0x2ec>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <HAL_GPIO_Init+0x1f0>
 8003664:	2305      	movs	r3, #5
 8003666:	e00a      	b.n	800367e <HAL_GPIO_Init+0x206>
 8003668:	2306      	movs	r3, #6
 800366a:	e008      	b.n	800367e <HAL_GPIO_Init+0x206>
 800366c:	2304      	movs	r3, #4
 800366e:	e006      	b.n	800367e <HAL_GPIO_Init+0x206>
 8003670:	2303      	movs	r3, #3
 8003672:	e004      	b.n	800367e <HAL_GPIO_Init+0x206>
 8003674:	2302      	movs	r3, #2
 8003676:	e002      	b.n	800367e <HAL_GPIO_Init+0x206>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_GPIO_Init+0x206>
 800367c:	2300      	movs	r3, #0
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	f002 0203 	and.w	r2, r2, #3
 8003684:	0092      	lsls	r2, r2, #2
 8003686:	4093      	lsls	r3, r2
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800368e:	492f      	ldr	r1, [pc, #188]	; (800374c <HAL_GPIO_Init+0x2d4>)
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	3302      	adds	r3, #2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036a8:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	492e      	ldr	r1, [pc, #184]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	43db      	mvns	r3, r3
 80036be:	492a      	ldr	r1, [pc, #168]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	4924      	ldr	r1, [pc, #144]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	4920      	ldr	r1, [pc, #128]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d006      	beq.n	8003706 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	491a      	ldr	r1, [pc, #104]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]
 8003704:	e006      	b.n	8003714 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	43db      	mvns	r3, r3
 800370e:	4916      	ldr	r1, [pc, #88]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 8003710:	4013      	ands	r3, r2
 8003712:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d025      	beq.n	800376c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	4910      	ldr	r1, [pc, #64]	; (8003768 <HAL_GPIO_Init+0x2f0>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	60cb      	str	r3, [r1, #12]
 800372c:	e025      	b.n	800377a <HAL_GPIO_Init+0x302>
 800372e:	bf00      	nop
 8003730:	10320000 	.word	0x10320000
 8003734:	10310000 	.word	0x10310000
 8003738:	10220000 	.word	0x10220000
 800373c:	10210000 	.word	0x10210000
 8003740:	10120000 	.word	0x10120000
 8003744:	10110000 	.word	0x10110000
 8003748:	40021000 	.word	0x40021000
 800374c:	40010000 	.word	0x40010000
 8003750:	40010800 	.word	0x40010800
 8003754:	40010c00 	.word	0x40010c00
 8003758:	40011000 	.word	0x40011000
 800375c:	40011400 	.word	0x40011400
 8003760:	40011800 	.word	0x40011800
 8003764:	40011c00 	.word	0x40011c00
 8003768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_GPIO_Init+0x324>)
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	43db      	mvns	r3, r3
 8003774:	4909      	ldr	r1, [pc, #36]	; (800379c <HAL_GPIO_Init+0x324>)
 8003776:	4013      	ands	r3, r2
 8003778:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	3301      	adds	r3, #1
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	f47f ae7e 	bne.w	800348c <HAL_GPIO_Init+0x14>
  }
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	372c      	adds	r7, #44	; 0x2c
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40010400 	.word	0x40010400

080037a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	807b      	strh	r3, [r7, #2]
 80037ac:	4613      	mov	r3, r2
 80037ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037b0:	787b      	ldrb	r3, [r7, #1]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037bc:	e003      	b.n	80037c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037be:	887b      	ldrh	r3, [r7, #2]
 80037c0:	041a      	lsls	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	611a      	str	r2, [r3, #16]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fd02 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40010400 	.word	0x40010400

08003800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e12b      	b.n	8003a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fd46 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003864:	f000 fffa 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8003868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4a81      	ldr	r2, [pc, #516]	; (8003a74 <HAL_I2C_Init+0x274>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d807      	bhi.n	8003884 <HAL_I2C_Init+0x84>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a80      	ldr	r2, [pc, #512]	; (8003a78 <HAL_I2C_Init+0x278>)
 8003878:	4293      	cmp	r3, r2
 800387a:	bf94      	ite	ls
 800387c:	2301      	movls	r3, #1
 800387e:	2300      	movhi	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e006      	b.n	8003892 <HAL_I2C_Init+0x92>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a7d      	ldr	r2, [pc, #500]	; (8003a7c <HAL_I2C_Init+0x27c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	bf94      	ite	ls
 800388c:	2301      	movls	r3, #1
 800388e:	2300      	movhi	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0e7      	b.n	8003a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a78      	ldr	r2, [pc, #480]	; (8003a80 <HAL_I2C_Init+0x280>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0c9b      	lsrs	r3, r3, #18
 80038a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a6a      	ldr	r2, [pc, #424]	; (8003a74 <HAL_I2C_Init+0x274>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d802      	bhi.n	80038d4 <HAL_I2C_Init+0xd4>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	e009      	b.n	80038e8 <HAL_I2C_Init+0xe8>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	4a69      	ldr	r2, [pc, #420]	; (8003a84 <HAL_I2C_Init+0x284>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	3301      	adds	r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	495c      	ldr	r1, [pc, #368]	; (8003a74 <HAL_I2C_Init+0x274>)
 8003904:	428b      	cmp	r3, r1
 8003906:	d819      	bhi.n	800393c <HAL_I2C_Init+0x13c>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1e59      	subs	r1, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fbb1 f3f3 	udiv	r3, r1, r3
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	f640 73fc 	movw	r3, #4092	; 0xffc
 800391c:	400b      	ands	r3, r1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_I2C_Init+0x138>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e59      	subs	r1, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003930:	3301      	adds	r3, #1
 8003932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003936:	e051      	b.n	80039dc <HAL_I2C_Init+0x1dc>
 8003938:	2304      	movs	r3, #4
 800393a:	e04f      	b.n	80039dc <HAL_I2C_Init+0x1dc>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <HAL_I2C_Init+0x168>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e58      	subs	r0, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	440b      	add	r3, r1
 8003952:	fbb0 f3f3 	udiv	r3, r0, r3
 8003956:	3301      	adds	r3, #1
 8003958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e012      	b.n	800398e <HAL_I2C_Init+0x18e>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e58      	subs	r0, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	0099      	lsls	r1, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	fbb0 f3f3 	udiv	r3, r0, r3
 800397e:	3301      	adds	r3, #1
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_I2C_Init+0x196>
 8003992:	2301      	movs	r3, #1
 8003994:	e022      	b.n	80039dc <HAL_I2C_Init+0x1dc>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10e      	bne.n	80039bc <HAL_I2C_Init+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e58      	subs	r0, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6859      	ldr	r1, [r3, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	440b      	add	r3, r1
 80039ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ba:	e00f      	b.n	80039dc <HAL_I2C_Init+0x1dc>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e58      	subs	r0, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	0099      	lsls	r1, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	6809      	ldr	r1, [r1, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69da      	ldr	r2, [r3, #28]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6911      	ldr	r1, [r2, #16]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68d2      	ldr	r2, [r2, #12]
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	000186a0 	.word	0x000186a0
 8003a78:	001e847f 	.word	0x001e847f
 8003a7c:	003d08ff 	.word	0x003d08ff
 8003a80:	431bde83 	.word	0x431bde83
 8003a84:	10624dd3 	.word	0x10624dd3

08003a88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	817b      	strh	r3, [r7, #10]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	813b      	strh	r3, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aa2:	f7fe ff3f 	bl	8002924 <HAL_GetTick>
 8003aa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	f040 80d9 	bne.w	8003c68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2319      	movs	r3, #25
 8003abc:	2201      	movs	r2, #1
 8003abe:	496d      	ldr	r1, [pc, #436]	; (8003c74 <HAL_I2C_Mem_Write+0x1ec>)
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f971 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
 8003ace:	e0cc      	b.n	8003c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_I2C_Mem_Write+0x56>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e0c5      	b.n	8003c6a <HAL_I2C_Mem_Write+0x1e2>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d007      	beq.n	8003b04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2221      	movs	r2, #33	; 0x21
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2240      	movs	r2, #64	; 0x40
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a4d      	ldr	r2, [pc, #308]	; (8003c78 <HAL_I2C_Mem_Write+0x1f0>)
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b46:	88f8      	ldrh	r0, [r7, #6]
 8003b48:	893a      	ldrh	r2, [r7, #8]
 8003b4a:	8979      	ldrh	r1, [r7, #10]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	4603      	mov	r3, r0
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f890 	bl	8003c7c <I2C_RequestMemoryWrite>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d052      	beq.n	8003c08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e081      	b.n	8003c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f9f2 	bl	8003f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d107      	bne.n	8003b8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06b      	b.n	8003c6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d11b      	bne.n	8003c08 <HAL_I2C_Mem_Write+0x180>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d017      	beq.n	8003c08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1aa      	bne.n	8003b66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f9de 	bl	8003fd6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d107      	bne.n	8003c38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e016      	b.n	8003c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	00100002 	.word	0x00100002
 8003c78:	ffff0000 	.word	0xffff0000

08003c7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f878 	bl	8003da8 <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ccc:	d103      	bne.n	8003cd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e05f      	b.n	8003d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	492d      	ldr	r1, [pc, #180]	; (8003da4 <I2C_RequestMemoryWrite+0x128>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f8b0 	bl	8003e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e04c      	b.n	8003d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	6a39      	ldr	r1, [r7, #32]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f91a 	bl	8003f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00d      	beq.n	8003d42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d107      	bne.n	8003d3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e02b      	b.n	8003d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d48:	893b      	ldrh	r3, [r7, #8]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	611a      	str	r2, [r3, #16]
 8003d52:	e021      	b.n	8003d98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d54:	893b      	ldrh	r3, [r7, #8]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d64:	6a39      	ldr	r1, [r7, #32]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f8f4 	bl	8003f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00d      	beq.n	8003d8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d107      	bne.n	8003d8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e005      	b.n	8003d9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8e:	893b      	ldrh	r3, [r7, #8]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	00010002 	.word	0x00010002

08003da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db8:	e025      	b.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d021      	beq.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc2:	f7fe fdaf 	bl	8002924 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d302      	bcc.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d116      	bne.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e023      	b.n	8003e4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10d      	bne.n	8003e2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	e00c      	b.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	43da      	mvns	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4013      	ands	r3, r2
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d0b6      	beq.n	8003dba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e64:	e051      	b.n	8003f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e74:	d123      	bne.n	8003ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f043 0204 	orr.w	r2, r3, #4
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e046      	b.n	8003f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d021      	beq.n	8003f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fe fd2d 	bl	8002924 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d116      	bne.n	8003f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f043 0220 	orr.w	r2, r3, #32
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e020      	b.n	8003f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10c      	bne.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	e00b      	b.n	8003f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	43da      	mvns	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d18d      	bne.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f60:	e02d      	b.n	8003fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f878 	bl	8004058 <I2C_IsAcknowledgeFailed>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e02d      	b.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d021      	beq.n	8003fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7a:	f7fe fcd3 	bl	8002924 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d302      	bcc.n	8003f90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d116      	bne.n	8003fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e007      	b.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d1ca      	bne.n	8003f62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fe2:	e02d      	b.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f837 	bl	8004058 <I2C_IsAcknowledgeFailed>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e02d      	b.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d021      	beq.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffc:	f7fe fc92 	bl	8002924 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	d302      	bcc.n	8004012 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e007      	b.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b04      	cmp	r3, #4
 800404c:	d1ca      	bne.n	8003fe4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	d11b      	bne.n	80040a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004078:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e26c      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8087 	beq.w	80041e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040d4:	4b92      	ldr	r3, [pc, #584]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d00c      	beq.n	80040fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040e0:	4b8f      	ldr	r3, [pc, #572]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 030c 	and.w	r3, r3, #12
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d112      	bne.n	8004112 <HAL_RCC_OscConfig+0x5e>
 80040ec:	4b8c      	ldr	r3, [pc, #560]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d10b      	bne.n	8004112 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fa:	4b89      	ldr	r3, [pc, #548]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d06c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x12c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d168      	bne.n	80041e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e246      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x76>
 800411c:	4b80      	ldr	r3, [pc, #512]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a7f      	ldr	r2, [pc, #508]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	e02e      	b.n	8004188 <HAL_RCC_OscConfig+0xd4>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x98>
 8004132:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a7a      	ldr	r2, [pc, #488]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4b78      	ldr	r3, [pc, #480]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a77      	ldr	r2, [pc, #476]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e01d      	b.n	8004188 <HAL_RCC_OscConfig+0xd4>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0xbc>
 8004156:	4b72      	ldr	r3, [pc, #456]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a71      	ldr	r2, [pc, #452]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 800415c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b6f      	ldr	r3, [pc, #444]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a6e      	ldr	r2, [pc, #440]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e00b      	b.n	8004188 <HAL_RCC_OscConfig+0xd4>
 8004170:	4b6b      	ldr	r3, [pc, #428]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a6a      	ldr	r2, [pc, #424]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b68      	ldr	r3, [pc, #416]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a67      	ldr	r2, [pc, #412]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fe fbc8 	bl	8002924 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fe fbc4 	bl	8002924 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1fa      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b5d      	ldr	r3, [pc, #372]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0xe4>
 80041b6:	e014      	b.n	80041e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fbb4 	bl	8002924 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fe fbb0 	bl	8002924 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1e6      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d2:	4b53      	ldr	r3, [pc, #332]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x10c>
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d063      	beq.n	80042b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ee:	4b4c      	ldr	r3, [pc, #304]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041fa:	4b49      	ldr	r3, [pc, #292]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b08      	cmp	r3, #8
 8004204:	d11c      	bne.n	8004240 <HAL_RCC_OscConfig+0x18c>
 8004206:	4b46      	ldr	r3, [pc, #280]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d116      	bne.n	8004240 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	4b43      	ldr	r3, [pc, #268]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_RCC_OscConfig+0x176>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e1ba      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422a:	4b3d      	ldr	r3, [pc, #244]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4939      	ldr	r1, [pc, #228]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423e:	e03a      	b.n	80042b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCC_OscConfig+0x270>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424e:	f7fe fb69 	bl	8002924 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004256:	f7fe fb65 	bl	8002924 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e19b      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4927      	ldr	r1, [pc, #156]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	600b      	str	r3, [r1, #0]
 8004288:	e015      	b.n	80042b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428a:	4b26      	ldr	r3, [pc, #152]	; (8004324 <HAL_RCC_OscConfig+0x270>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe fb48 	bl	8002924 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004298:	f7fe fb44 	bl	8002924 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e17a      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d03a      	beq.n	8004338 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d019      	beq.n	80042fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ca:	4b17      	ldr	r3, [pc, #92]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d0:	f7fe fb28 	bl	8002924 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fe fb24 	bl	8002924 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e15a      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042f6:	2001      	movs	r0, #1
 80042f8:	f000 fad8 	bl	80048ac <RCC_Delay>
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004304:	f7fe fb0e 	bl	8002924 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430a:	e00f      	b.n	800432c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430c:	f7fe fb0a 	bl	8002924 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d908      	bls.n	800432c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e140      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
 8004324:	42420000 	.word	0x42420000
 8004328:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432c:	4b9e      	ldr	r3, [pc, #632]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e9      	bne.n	800430c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80a6 	beq.w	8004492 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434a:	4b97      	ldr	r3, [pc, #604]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10d      	bne.n	8004372 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004356:	4b94      	ldr	r3, [pc, #592]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4a93      	ldr	r2, [pc, #588]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800435c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004360:	61d3      	str	r3, [r2, #28]
 8004362:	4b91      	ldr	r3, [pc, #580]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b8e      	ldr	r3, [pc, #568]	; (80045ac <HAL_RCC_OscConfig+0x4f8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d118      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800437e:	4b8b      	ldr	r3, [pc, #556]	; (80045ac <HAL_RCC_OscConfig+0x4f8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a8a      	ldr	r2, [pc, #552]	; (80045ac <HAL_RCC_OscConfig+0x4f8>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438a:	f7fe facb 	bl	8002924 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004392:	f7fe fac7 	bl	8002924 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b64      	cmp	r3, #100	; 0x64
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e0fd      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a4:	4b81      	ldr	r3, [pc, #516]	; (80045ac <HAL_RCC_OscConfig+0x4f8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x312>
 80043b8:	4b7b      	ldr	r3, [pc, #492]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4a7a      	ldr	r2, [pc, #488]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6213      	str	r3, [r2, #32]
 80043c4:	e02d      	b.n	8004422 <HAL_RCC_OscConfig+0x36e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x334>
 80043ce:	4b76      	ldr	r3, [pc, #472]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4a75      	ldr	r2, [pc, #468]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	6213      	str	r3, [r2, #32]
 80043da:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4a72      	ldr	r2, [pc, #456]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	6213      	str	r3, [r2, #32]
 80043e6:	e01c      	b.n	8004422 <HAL_RCC_OscConfig+0x36e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d10c      	bne.n	800440a <HAL_RCC_OscConfig+0x356>
 80043f0:	4b6d      	ldr	r3, [pc, #436]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4a6c      	ldr	r2, [pc, #432]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043f6:	f043 0304 	orr.w	r3, r3, #4
 80043fa:	6213      	str	r3, [r2, #32]
 80043fc:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	4a69      	ldr	r2, [pc, #420]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6213      	str	r3, [r2, #32]
 8004408:	e00b      	b.n	8004422 <HAL_RCC_OscConfig+0x36e>
 800440a:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4a66      	ldr	r2, [pc, #408]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	6213      	str	r3, [r2, #32]
 8004416:	4b64      	ldr	r3, [pc, #400]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	4a63      	ldr	r2, [pc, #396]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800441c:	f023 0304 	bic.w	r3, r3, #4
 8004420:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d015      	beq.n	8004456 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442a:	f7fe fa7b 	bl	8002924 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe fa77 	bl	8002924 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e0ab      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	4b57      	ldr	r3, [pc, #348]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ee      	beq.n	8004432 <HAL_RCC_OscConfig+0x37e>
 8004454:	e014      	b.n	8004480 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004456:	f7fe fa65 	bl	8002924 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fe fa61 	bl	8002924 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e095      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004474:	4b4c      	ldr	r3, [pc, #304]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ee      	bne.n	800445e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d105      	bne.n	8004492 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004486:	4b48      	ldr	r3, [pc, #288]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4a47      	ldr	r2, [pc, #284]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800448c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004490:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8081 	beq.w	800459e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800449c:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 030c 	and.w	r3, r3, #12
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d061      	beq.n	800456c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d146      	bne.n	800453e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b0:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <HAL_RCC_OscConfig+0x4fc>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fe fa35 	bl	8002924 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044be:	f7fe fa31 	bl	8002924 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e067      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d0:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f0      	bne.n	80044be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e4:	d108      	bne.n	80044f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044e6:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	492d      	ldr	r1, [pc, #180]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f8:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a19      	ldr	r1, [r3, #32]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	430b      	orrs	r3, r1
 800450a:	4927      	ldr	r1, [pc, #156]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800450c:	4313      	orrs	r3, r2
 800450e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004510:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <HAL_RCC_OscConfig+0x4fc>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe fa05 	bl	8002924 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451e:	f7fe fa01 	bl	8002924 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e037      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x46a>
 800453c:	e02f      	b.n	800459e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453e:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_RCC_OscConfig+0x4fc>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe f9ee 	bl	8002924 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fe f9ea 	bl	8002924 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e020      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455e:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x498>
 800456a:	e018      	b.n	800459e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e013      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_OscConfig+0x4f4>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	429a      	cmp	r2, r3
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40007000 	.word	0x40007000
 80045b0:	42420060 	.word	0x42420060

080045b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0d0      	b.n	800476a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c8:	4b6a      	ldr	r3, [pc, #424]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d910      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b67      	ldr	r3, [pc, #412]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 0207 	bic.w	r2, r3, #7
 80045de:	4965      	ldr	r1, [pc, #404]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b63      	ldr	r3, [pc, #396]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0b8      	b.n	800476a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b59      	ldr	r3, [pc, #356]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	4a58      	ldr	r2, [pc, #352]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800461a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004628:	4b53      	ldr	r3, [pc, #332]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b50      	ldr	r3, [pc, #320]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	494d      	ldr	r1, [pc, #308]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d040      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d115      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e073      	b.n	800476a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004682:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e06b      	b.n	800476a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004692:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4936      	ldr	r1, [pc, #216]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a4:	f7fe f93e 	bl	8002924 <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fe f93a 	bl	8002924 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e053      	b.n	800476a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 020c 	and.w	r2, r3, #12
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d1eb      	bne.n	80046ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d4:	4b27      	ldr	r3, [pc, #156]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d210      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 0207 	bic.w	r2, r3, #7
 80046ea:	4922      	ldr	r1, [pc, #136]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e032      	b.n	800476a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4916      	ldr	r1, [pc, #88]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490e      	ldr	r1, [pc, #56]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004742:	f000 f821 	bl	8004788 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490a      	ldr	r1, [pc, #40]	; (800477c <HAL_RCC_ClockConfig+0x1c8>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1cc>)
 800475c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1d0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe f89c 	bl	80028a0 <HAL_InitTick>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40022000 	.word	0x40022000
 8004778:	40021000 	.word	0x40021000
 800477c:	08007a18 	.word	0x08007a18
 8004780:	20000000 	.word	0x20000000
 8004784:	20000008 	.word	0x20000008

08004788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004788:	b490      	push	{r4, r7}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800478e:	4b2a      	ldr	r3, [pc, #168]	; (8004838 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004790:	1d3c      	adds	r4, r7, #4
 8004792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004798:	f240 2301 	movw	r3, #513	; 0x201
 800479c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047b2:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_RCC_GetSysClockFreq+0xb4>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d002      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x40>
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d003      	beq.n	80047ce <HAL_RCC_GetSysClockFreq+0x46>
 80047c6:	e02d      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ca:	623b      	str	r3, [r7, #32]
      break;
 80047cc:	e02d      	b.n	800482a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	0c9b      	lsrs	r3, r3, #18
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047da:	4413      	add	r3, r2
 80047dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <HAL_RCC_GetSysClockFreq+0xb4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	0c5b      	lsrs	r3, r3, #17
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047fa:	4413      	add	r3, r2
 80047fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004800:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	4a0e      	ldr	r2, [pc, #56]	; (8004840 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004806:	fb02 f203 	mul.w	r2, r2, r3
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
 8004812:	e004      	b.n	800481e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	4a0b      	ldr	r2, [pc, #44]	; (8004844 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	623b      	str	r3, [r7, #32]
      break;
 8004822:	e002      	b.n	800482a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004826:	623b      	str	r3, [r7, #32]
      break;
 8004828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482a:	6a3b      	ldr	r3, [r7, #32]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3728      	adds	r7, #40	; 0x28
 8004830:	46bd      	mov	sp, r7
 8004832:	bc90      	pop	{r4, r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	08007a08 	.word	0x08007a08
 800483c:	40021000 	.word	0x40021000
 8004840:	007a1200 	.word	0x007a1200
 8004844:	003d0900 	.word	0x003d0900

08004848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800484c:	4b02      	ldr	r3, [pc, #8]	; (8004858 <HAL_RCC_GetHCLKFreq+0x10>)
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr
 8004858:	20000000 	.word	0x20000000

0800485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004860:	f7ff fff2 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4903      	ldr	r1, [pc, #12]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000
 8004880:	08007a28 	.word	0x08007a28

08004884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004888:	f7ff ffde 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	0adb      	lsrs	r3, r3, #11
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4903      	ldr	r1, [pc, #12]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	08007a28 	.word	0x08007a28

080048ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <RCC_Delay+0x34>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <RCC_Delay+0x38>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	0a5b      	lsrs	r3, r3, #9
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048c8:	bf00      	nop
  }
  while (Delay --);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1e5a      	subs	r2, r3, #1
 80048ce:	60fa      	str	r2, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f9      	bne.n	80048c8 <RCC_Delay+0x1c>
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	20000000 	.word	0x20000000
 80048e4:	10624dd3 	.word	0x10624dd3

080048e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d07d      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004908:	4b4f      	ldr	r3, [pc, #316]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004914:	4b4c      	ldr	r3, [pc, #304]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	4a4b      	ldr	r2, [pc, #300]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	61d3      	str	r3, [r2, #28]
 8004920:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492c:	2301      	movs	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	4b46      	ldr	r3, [pc, #280]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d118      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493c:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a42      	ldr	r2, [pc, #264]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004946:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004948:	f7fd ffec 	bl	8002924 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	e008      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004950:	f7fd ffe8 	bl	8002924 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e06d      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004962:	4b3a      	ldr	r3, [pc, #232]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800496e:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d02e      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d027      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800498c:	4b2e      	ldr	r3, [pc, #184]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004994:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004998:	2201      	movs	r2, #1
 800499a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800499c:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049a2:	4a29      	ldr	r2, [pc, #164]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d014      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fd ffb7 	bl	8002924 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd ffb3 	bl	8002924 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e036      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ee      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049dc:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4917      	ldr	r1, [pc, #92]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	490b      	ldr	r1, [pc, #44]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	4904      	ldr	r1, [pc, #16]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40007000 	.word	0x40007000
 8004a50:	42420440 	.word	0x42420440

08004a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e076      	b.n	8004b54 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d108      	bne.n	8004a80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a76:	d009      	beq.n	8004a8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	61da      	str	r2, [r3, #28]
 8004a7e:	e005      	b.n	8004a8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc fe20 	bl	80016ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	ea42 0103 	orr.w	r1, r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	0c1a      	lsrs	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f002 0204 	and.w	r2, r2, #4
 8004b32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e041      	b.n	8004bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fd fa4e 	bl	8002024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 fbfc 	bl	8005398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d001      	beq.n	8004c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e044      	b.n	8004c9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xac>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x6c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <HAL_TIM_Base_Start_IT+0xb0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x6c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x6c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x6c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a16      	ldr	r2, [pc, #88]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x6c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d111      	bne.n	8004c8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d010      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8a:	e007      	b.n	8004c9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40013400 	.word	0x40013400
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00

08004cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e041      	b.n	8004d52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd f946 	bl	8001f74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 fb4c 	bl	8005398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <HAL_TIM_PWM_Start+0x24>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e022      	b.n	8004dc6 <HAL_TIM_PWM_Start+0x6a>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d109      	bne.n	8004d9a <HAL_TIM_PWM_Start+0x3e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	bf14      	ite	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	2300      	moveq	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	e015      	b.n	8004dc6 <HAL_TIM_PWM_Start+0x6a>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d109      	bne.n	8004db4 <HAL_TIM_PWM_Start+0x58>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e008      	b.n	8004dc6 <HAL_TIM_PWM_Start+0x6a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e072      	b.n	8004eb4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0x82>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	e013      	b.n	8004e06 <HAL_TIM_PWM_Start+0xaa>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Start+0x92>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dec:	e00b      	b.n	8004e06 <HAL_TIM_PWM_Start+0xaa>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_PWM_Start+0xa2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dfc:	e003      	b.n	8004e06 <HAL_TIM_PWM_Start+0xaa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fce8 	bl	80057e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a28      	ldr	r2, [pc, #160]	; (8004ebc <HAL_TIM_PWM_Start+0x160>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_TIM_PWM_Start+0xcc>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <HAL_TIM_PWM_Start+0x164>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d101      	bne.n	8004e2c <HAL_TIM_PWM_Start+0xd0>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <HAL_TIM_PWM_Start+0xd2>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_TIM_PWM_Start+0x160>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d018      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x122>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <HAL_TIM_PWM_Start+0x164>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x122>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5e:	d00e      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x122>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HAL_TIM_PWM_Start+0x168>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x122>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <HAL_TIM_PWM_Start+0x16c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_TIM_PWM_Start+0x122>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <HAL_TIM_PWM_Start+0x170>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d111      	bne.n	8004ea2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d010      	beq.n	8004eb2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	e007      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40013400 	.word	0x40013400
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00

08004ed0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fc7e 	bl	80057e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2e      	ldr	r2, [pc, #184]	; (8004fa8 <HAL_TIM_PWM_Stop+0xd8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_PWM_Stop+0x2c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a2d      	ldr	r2, [pc, #180]	; (8004fac <HAL_TIM_PWM_Stop+0xdc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_TIM_PWM_Stop+0x30>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_TIM_PWM_Stop+0x32>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d017      	beq.n	8004f36 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <HAL_TIM_PWM_Stop+0x66>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	f240 4344 	movw	r3, #1092	; 0x444
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <HAL_TIM_PWM_Stop+0x66>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6a1a      	ldr	r2, [r3, #32]
 8004f3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10f      	bne.n	8004f66 <HAL_TIM_PWM_Stop+0x96>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	f240 4344 	movw	r3, #1092	; 0x444
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d107      	bne.n	8004f66 <HAL_TIM_PWM_Stop+0x96>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_PWM_Stop+0xa6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	e013      	b.n	8004f9e <HAL_TIM_PWM_Stop+0xce>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_Stop+0xb6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	e00b      	b.n	8004f9e <HAL_TIM_PWM_Stop+0xce>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_PWM_Stop+0xc6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f94:	e003      	b.n	8004f9e <HAL_TIM_PWM_Stop+0xce>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40013400 	.word	0x40013400

08004fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d122      	bne.n	800500c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0202 	mvn.w	r2, #2
 8004fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f9b4 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9a7 	bl	800534e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f9b6 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b04      	cmp	r3, #4
 8005018:	d122      	bne.n	8005060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d11b      	bne.n	8005060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0204 	mvn.w	r2, #4
 8005030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f98a 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 800504c:	e005      	b.n	800505a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f97d 	bl	800534e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f98c 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b08      	cmp	r3, #8
 800506c:	d122      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b08      	cmp	r3, #8
 800507a:	d11b      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0208 	mvn.w	r2, #8
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2204      	movs	r2, #4
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f960 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f953 	bl	800534e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f962 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d122      	bne.n	8005108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d11b      	bne.n	8005108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0210 	mvn.w	r2, #16
 80050d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2208      	movs	r2, #8
 80050de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f936 	bl	8005360 <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f929 	bl	800534e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f938 	bl	8005372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10e      	bne.n	8005134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	d107      	bne.n	8005134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0201 	mvn.w	r2, #1
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f904 	bl	800533c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d10e      	bne.n	8005160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d107      	bne.n	8005160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fc2c 	bl	80059b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d10e      	bne.n	800518c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d107      	bne.n	800518c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8fc 	bl	8005384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b20      	cmp	r3, #32
 8005198:	d10e      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0220 	mvn.w	r2, #32
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fbf7 	bl	80059a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e0ac      	b.n	8005334 <HAL_TIM_PWM_ConfigChannel+0x174>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	f200 809f 	bhi.w	8005328 <HAL_TIM_PWM_ConfigChannel+0x168>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005225 	.word	0x08005225
 80051f4:	08005329 	.word	0x08005329
 80051f8:	08005329 	.word	0x08005329
 80051fc:	08005329 	.word	0x08005329
 8005200:	08005265 	.word	0x08005265
 8005204:	08005329 	.word	0x08005329
 8005208:	08005329 	.word	0x08005329
 800520c:	08005329 	.word	0x08005329
 8005210:	080052a7 	.word	0x080052a7
 8005214:	08005329 	.word	0x08005329
 8005218:	08005329 	.word	0x08005329
 800521c:	08005329 	.word	0x08005329
 8005220:	080052e7 	.word	0x080052e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f92e 	bl	800548c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0208 	orr.w	r2, r2, #8
 800523e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0204 	bic.w	r2, r2, #4
 800524e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6999      	ldr	r1, [r3, #24]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	619a      	str	r2, [r3, #24]
      break;
 8005262:	e062      	b.n	800532a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f97e 	bl	800556c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6999      	ldr	r1, [r3, #24]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	619a      	str	r2, [r3, #24]
      break;
 80052a4:	e041      	b.n	800532a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f9d1 	bl	8005654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0208 	orr.w	r2, r2, #8
 80052c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0204 	bic.w	r2, r2, #4
 80052d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69d9      	ldr	r1, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	61da      	str	r2, [r3, #28]
      break;
 80052e4:	e021      	b.n	800532a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fa25 	bl	800573c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69d9      	ldr	r1, [r3, #28]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	021a      	lsls	r2, r3, #8
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	61da      	str	r2, [r3, #28]
      break;
 8005326:	e000      	b.n	800532a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005328:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr
	...

08005398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a33      	ldr	r2, [pc, #204]	; (8005478 <TIM_Base_SetConfig+0xe0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a32      	ldr	r2, [pc, #200]	; (800547c <TIM_Base_SetConfig+0xe4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00f      	beq.n	80053d8 <TIM_Base_SetConfig+0x40>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053be:	d00b      	beq.n	80053d8 <TIM_Base_SetConfig+0x40>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <TIM_Base_SetConfig+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <TIM_Base_SetConfig+0x40>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <TIM_Base_SetConfig+0xec>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_Base_SetConfig+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a2d      	ldr	r2, [pc, #180]	; (8005488 <TIM_Base_SetConfig+0xf0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d108      	bne.n	80053ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a22      	ldr	r2, [pc, #136]	; (8005478 <TIM_Base_SetConfig+0xe0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <TIM_Base_SetConfig+0x82>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a21      	ldr	r2, [pc, #132]	; (800547c <TIM_Base_SetConfig+0xe4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00f      	beq.n	800541a <TIM_Base_SetConfig+0x82>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005400:	d00b      	beq.n	800541a <TIM_Base_SetConfig+0x82>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <TIM_Base_SetConfig+0xe8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_Base_SetConfig+0x82>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <TIM_Base_SetConfig+0xec>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_Base_SetConfig+0x82>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <TIM_Base_SetConfig+0xf0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d108      	bne.n	800542c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <TIM_Base_SetConfig+0xe0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_Base_SetConfig+0xc8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <TIM_Base_SetConfig+0xe4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d103      	bne.n	8005468 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	615a      	str	r2, [r3, #20]
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40013400 	.word	0x40013400
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00

0800548c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f023 0201 	bic.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 0302 	bic.w	r3, r3, #2
 80054d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a20      	ldr	r2, [pc, #128]	; (8005564 <TIM_OC1_SetConfig+0xd8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_OC1_SetConfig+0x64>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <TIM_OC1_SetConfig+0xdc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10c      	bne.n	800550a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f023 0308 	bic.w	r3, r3, #8
 80054f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a15      	ldr	r2, [pc, #84]	; (8005564 <TIM_OC1_SetConfig+0xd8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_OC1_SetConfig+0x8e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a14      	ldr	r2, [pc, #80]	; (8005568 <TIM_OC1_SetConfig+0xdc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d111      	bne.n	800553e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	621a      	str	r2, [r3, #32]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40013400 	.word	0x40013400

0800556c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f023 0210 	bic.w	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0320 	bic.w	r3, r3, #32
 80055b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a21      	ldr	r2, [pc, #132]	; (800564c <TIM_OC2_SetConfig+0xe0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_OC2_SetConfig+0x68>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a20      	ldr	r2, [pc, #128]	; (8005650 <TIM_OC2_SetConfig+0xe4>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d10d      	bne.n	80055f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a16      	ldr	r2, [pc, #88]	; (800564c <TIM_OC2_SetConfig+0xe0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC2_SetConfig+0x94>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a15      	ldr	r2, [pc, #84]	; (8005650 <TIM_OC2_SetConfig+0xe4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d113      	bne.n	8005628 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40013400 	.word	0x40013400

08005654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800569c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <TIM_OC3_SetConfig+0xe0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC3_SetConfig+0x66>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a20      	ldr	r2, [pc, #128]	; (8005738 <TIM_OC3_SetConfig+0xe4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d10d      	bne.n	80056d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a16      	ldr	r2, [pc, #88]	; (8005734 <TIM_OC3_SetConfig+0xe0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC3_SetConfig+0x92>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a15      	ldr	r2, [pc, #84]	; (8005738 <TIM_OC3_SetConfig+0xe4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d113      	bne.n	800570e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40013400 	.word	0x40013400

0800573c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	031b      	lsls	r3, r3, #12
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a11      	ldr	r2, [pc, #68]	; (80057dc <TIM_OC4_SetConfig+0xa0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC4_SetConfig+0x68>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <TIM_OC4_SetConfig+0xa4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d109      	bne.n	80057b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	019b      	lsls	r3, r3, #6
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40013400 	.word	0x40013400

080057e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2201      	movs	r2, #1
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	43db      	mvns	r3, r3
 8005806:	401a      	ands	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1a      	ldr	r2, [r3, #32]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	fa01 f303 	lsl.w	r3, r1, r3
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005840:	2302      	movs	r3, #2
 8005842:	e050      	b.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d018      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589a:	d00e      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d009      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a14      	ldr	r2, [pc, #80]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a12      	ldr	r2, [pc, #72]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10c      	bne.n	80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40013400 	.word	0x40013400
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800
 8005900:	40000c00 	.word	0x40000c00

08005904 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800591c:	2302      	movs	r3, #2
 800591e:	e03d      	b.n	800599c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e03f      	b.n	8005a5c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7fc fc61 	bl	80022b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2224      	movs	r2, #36	; 0x24
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fc84 	bl	800631c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d17c      	bne.n	8005b7e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_UART_Transmit+0x2c>
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e075      	b.n	8005b80 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Transmit+0x3e>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e06e      	b.n	8005b80 <HAL_UART_Transmit+0x11c>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2221      	movs	r2, #33	; 0x21
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab8:	f7fc ff34 	bl	8002924 <HAL_GetTick>
 8005abc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d108      	bne.n	8005ae6 <HAL_UART_Transmit+0x82>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e003      	b.n	8005aee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005af6:	e02a      	b.n	8005b4e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2200      	movs	r2, #0
 8005b00:	2180      	movs	r1, #128	; 0x80
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fa37 	bl	8005f76 <UART_WaitOnFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e036      	b.n	8005b80 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e007      	b.n	8005b40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1cf      	bne.n	8005af8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2140      	movs	r1, #64	; 0x40
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fa07 	bl	8005f76 <UART_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e006      	b.n	8005b80 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d11d      	bne.n	8005bde <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_UART_Receive_IT+0x26>
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e016      	b.n	8005be0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Receive_IT+0x38>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e00f      	b.n	8005be0 <HAL_UART_Receive_IT+0x58>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fa18 	bl	800600a <UART_Start_Receive_IT>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	e000      	b.n	8005be0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	; 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10d      	bne.n	8005c3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_UART_IRQHandler+0x52>
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fac9 	bl	80061ca <UART_Receive_IT>
      return;
 8005c38:	e17b      	b.n	8005f32 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80b1 	beq.w	8005da4 <HAL_UART_IRQHandler+0x1bc>
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_UART_IRQHandler+0x70>
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80a6 	beq.w	8005da4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_UART_IRQHandler+0x90>
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f043 0201 	orr.w	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_UART_IRQHandler+0xb0>
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	f043 0202 	orr.w	r2, r3, #2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_UART_IRQHandler+0xd0>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	f043 0204 	orr.w	r2, r3, #4
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00f      	beq.n	8005ce2 <HAL_UART_IRQHandler+0xfa>
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <HAL_UART_IRQHandler+0xee>
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f043 0208 	orr.w	r2, r3, #8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 811e 	beq.w	8005f28 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <HAL_UART_IRQHandler+0x11e>
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fa62 	bl	80061ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <HAL_UART_IRQHandler+0x146>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d031      	beq.n	8005d92 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f9a4 	bl	800607c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d023      	beq.n	8005d8a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695a      	ldr	r2, [r3, #20]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d50:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d013      	beq.n	8005d82 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	4a76      	ldr	r2, [pc, #472]	; (8005f38 <HAL_UART_IRQHandler+0x350>)
 8005d60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd fa7e 	bl	8003268 <HAL_DMA_Abort_IT>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d80:	e00e      	b.n	8005da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f8e3 	bl	8005f4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d88:	e00a      	b.n	8005da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8df 	bl	8005f4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	e006      	b.n	8005da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f8db 	bl	8005f4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d9e:	e0c3      	b.n	8005f28 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	bf00      	nop
    return;
 8005da2:	e0c1      	b.n	8005f28 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	f040 80a1 	bne.w	8005ef0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 809b 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8095 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d04e      	beq.n	8005e88 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005df4:	8a3b      	ldrh	r3, [r7, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8098 	beq.w	8005f2c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e00:	8a3a      	ldrh	r2, [r7, #16]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	f080 8092 	bcs.w	8005f2c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8a3a      	ldrh	r2, [r7, #16]
 8005e0c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d02b      	beq.n	8005e70 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e26:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e46:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0210 	bic.w	r2, r2, #16
 8005e64:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fd f9c1 	bl	80031f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f86d 	bl	8005f60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e86:	e051      	b.n	8005f2c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d047      	beq.n	8005f30 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005ea0:	8a7b      	ldrh	r3, [r7, #18]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d044      	beq.n	8005f30 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005eb4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0210 	bic.w	r2, r2, #16
 8005ee2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ee4:	8a7b      	ldrh	r3, [r7, #18]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f839 	bl	8005f60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005eee:	e01f      	b.n	8005f30 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <HAL_UART_IRQHandler+0x324>
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8f9 	bl	80060fc <UART_Transmit_IT>
    return;
 8005f0a:	e012      	b.n	8005f32 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00d      	beq.n	8005f32 <HAL_UART_IRQHandler+0x34a>
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d008      	beq.n	8005f32 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f93a 	bl	800619a <UART_EndTransmit_IT>
    return;
 8005f26:	e004      	b.n	8005f32 <HAL_UART_IRQHandler+0x34a>
    return;
 8005f28:	bf00      	nop
 8005f2a:	e002      	b.n	8005f32 <HAL_UART_IRQHandler+0x34a>
      return;
 8005f2c:	bf00      	nop
 8005f2e:	e000      	b.n	8005f32 <HAL_UART_IRQHandler+0x34a>
      return;
 8005f30:	bf00      	nop
  }
}
 8005f32:	3728      	adds	r7, #40	; 0x28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	080060d5 	.word	0x080060d5

08005f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr

08005f4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr

08005f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f86:	e02c      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d028      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f96:	f7fc fcc5 	bl	8002924 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d21d      	bcs.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fb4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695a      	ldr	r2, [r3, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e00f      	b.n	8006002 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4013      	ands	r3, r2
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2301      	moveq	r3, #1
 8005ff4:	2300      	movne	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d0c3      	beq.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	4613      	mov	r3, r2
 8006016:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2222      	movs	r2, #34	; 0x22
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800604e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0220 	orr.w	r2, r2, #32
 800606e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006092:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d107      	bne.n	80060bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0210 	bic.w	r2, r2, #16
 80060ba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff ff2d 	bl	8005f4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b21      	cmp	r3, #33	; 0x21
 800610e:	d13e      	bne.n	800618e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d114      	bne.n	8006144 <UART_Transmit_IT+0x48>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d110      	bne.n	8006144 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006136:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	1c9a      	adds	r2, r3, #2
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]
 8006142:	e008      	b.n	8006156 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6211      	str	r1, [r2, #32]
 800614e:	781a      	ldrb	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29b      	uxth	r3, r3
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	4619      	mov	r1, r3
 8006164:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006178:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006188:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800618e:	2302      	movs	r3, #2
  }
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	bc80      	pop	{r7}
 8006198:	4770      	bx	lr

0800619a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff febe 	bl	8005f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b22      	cmp	r3, #34	; 0x22
 80061dc:	f040 8099 	bne.w	8006312 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e8:	d117      	bne.n	800621a <UART_Receive_IT+0x50>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d113      	bne.n	800621a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006208:	b29a      	uxth	r2, r3
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	1c9a      	adds	r2, r3, #2
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	629a      	str	r2, [r3, #40]	; 0x28
 8006218:	e026      	b.n	8006268 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622c:	d007      	beq.n	800623e <UART_Receive_IT+0x74>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <UART_Receive_IT+0x82>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e008      	b.n	800625e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006258:	b2da      	uxtb	r2, r3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29b      	uxth	r3, r3
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4619      	mov	r1, r3
 8006276:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006278:	2b00      	cmp	r3, #0
 800627a:	d148      	bne.n	800630e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0220 	bic.w	r2, r2, #32
 800628a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800629a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d123      	bne.n	8006304 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0210 	bic.w	r2, r2, #16
 80062d0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d10a      	bne.n	80062f6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fe2f 	bl	8005f60 <HAL_UARTEx_RxEventCallback>
 8006302:	e002      	b.n	800630a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fc f87b 	bl	8002400 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	e002      	b.n	8006314 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	e000      	b.n	8006314 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006312:	2302      	movs	r3, #2
  }
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006356:	f023 030c 	bic.w	r3, r3, #12
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	430b      	orrs	r3, r1
 8006362:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a2c      	ldr	r2, [pc, #176]	; (8006430 <UART_SetConfig+0x114>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d103      	bne.n	800638c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006384:	f7fe fa7e 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	e002      	b.n	8006392 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800638c:	f7fe fa66 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8006390:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009a      	lsls	r2, r3, #2
 800639c:	441a      	add	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	4a22      	ldr	r2, [pc, #136]	; (8006434 <UART_SetConfig+0x118>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	0119      	lsls	r1, r3, #4
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009a      	lsls	r2, r3, #2
 80063bc:	441a      	add	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c8:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <UART_SetConfig+0x118>)
 80063ca:	fba3 0302 	umull	r0, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	2064      	movs	r0, #100	; 0x64
 80063d2:	fb00 f303 	mul.w	r3, r0, r3
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	3332      	adds	r3, #50	; 0x32
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <UART_SetConfig+0x118>)
 80063de:	fba2 2303 	umull	r2, r3, r2, r3
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e8:	4419      	add	r1, r3
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009a      	lsls	r2, r3, #2
 80063f4:	441a      	add	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <UART_SetConfig+0x118>)
 8006402:	fba3 0302 	umull	r0, r3, r3, r2
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2064      	movs	r0, #100	; 0x64
 800640a:	fb00 f303 	mul.w	r3, r0, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	3332      	adds	r3, #50	; 0x32
 8006414:	4a07      	ldr	r2, [pc, #28]	; (8006434 <UART_SetConfig+0x118>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f003 020f 	and.w	r2, r3, #15
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	440a      	add	r2, r1
 8006426:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40013800 	.word	0x40013800
 8006434:	51eb851f 	.word	0x51eb851f

08006438 <__errno>:
 8006438:	4b01      	ldr	r3, [pc, #4]	; (8006440 <__errno+0x8>)
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000010 	.word	0x20000010

08006444 <__libc_init_array>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	2600      	movs	r6, #0
 8006448:	4d0c      	ldr	r5, [pc, #48]	; (800647c <__libc_init_array+0x38>)
 800644a:	4c0d      	ldr	r4, [pc, #52]	; (8006480 <__libc_init_array+0x3c>)
 800644c:	1b64      	subs	r4, r4, r5
 800644e:	10a4      	asrs	r4, r4, #2
 8006450:	42a6      	cmp	r6, r4
 8006452:	d109      	bne.n	8006468 <__libc_init_array+0x24>
 8006454:	f000 fff8 	bl	8007448 <_init>
 8006458:	2600      	movs	r6, #0
 800645a:	4d0a      	ldr	r5, [pc, #40]	; (8006484 <__libc_init_array+0x40>)
 800645c:	4c0a      	ldr	r4, [pc, #40]	; (8006488 <__libc_init_array+0x44>)
 800645e:	1b64      	subs	r4, r4, r5
 8006460:	10a4      	asrs	r4, r4, #2
 8006462:	42a6      	cmp	r6, r4
 8006464:	d105      	bne.n	8006472 <__libc_init_array+0x2e>
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	f855 3b04 	ldr.w	r3, [r5], #4
 800646c:	4798      	blx	r3
 800646e:	3601      	adds	r6, #1
 8006470:	e7ee      	b.n	8006450 <__libc_init_array+0xc>
 8006472:	f855 3b04 	ldr.w	r3, [r5], #4
 8006476:	4798      	blx	r3
 8006478:	3601      	adds	r6, #1
 800647a:	e7f2      	b.n	8006462 <__libc_init_array+0x1e>
 800647c:	08007ac8 	.word	0x08007ac8
 8006480:	08007ac8 	.word	0x08007ac8
 8006484:	08007ac8 	.word	0x08007ac8
 8006488:	08007acc 	.word	0x08007acc

0800648c <memset>:
 800648c:	4603      	mov	r3, r0
 800648e:	4402      	add	r2, r0
 8006490:	4293      	cmp	r3, r2
 8006492:	d100      	bne.n	8006496 <memset+0xa>
 8006494:	4770      	bx	lr
 8006496:	f803 1b01 	strb.w	r1, [r3], #1
 800649a:	e7f9      	b.n	8006490 <memset+0x4>

0800649c <iprintf>:
 800649c:	b40f      	push	{r0, r1, r2, r3}
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <iprintf+0x2c>)
 80064a0:	b513      	push	{r0, r1, r4, lr}
 80064a2:	681c      	ldr	r4, [r3, #0]
 80064a4:	b124      	cbz	r4, 80064b0 <iprintf+0x14>
 80064a6:	69a3      	ldr	r3, [r4, #24]
 80064a8:	b913      	cbnz	r3, 80064b0 <iprintf+0x14>
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 fa5e 	bl	800696c <__sinit>
 80064b0:	ab05      	add	r3, sp, #20
 80064b2:	4620      	mov	r0, r4
 80064b4:	9a04      	ldr	r2, [sp, #16]
 80064b6:	68a1      	ldr	r1, [r4, #8]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	f000 fc29 	bl	8006d10 <_vfiprintf_r>
 80064be:	b002      	add	sp, #8
 80064c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c4:	b004      	add	sp, #16
 80064c6:	4770      	bx	lr
 80064c8:	20000010 	.word	0x20000010

080064cc <_puts_r>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	460e      	mov	r6, r1
 80064d0:	4605      	mov	r5, r0
 80064d2:	b118      	cbz	r0, 80064dc <_puts_r+0x10>
 80064d4:	6983      	ldr	r3, [r0, #24]
 80064d6:	b90b      	cbnz	r3, 80064dc <_puts_r+0x10>
 80064d8:	f000 fa48 	bl	800696c <__sinit>
 80064dc:	69ab      	ldr	r3, [r5, #24]
 80064de:	68ac      	ldr	r4, [r5, #8]
 80064e0:	b913      	cbnz	r3, 80064e8 <_puts_r+0x1c>
 80064e2:	4628      	mov	r0, r5
 80064e4:	f000 fa42 	bl	800696c <__sinit>
 80064e8:	4b2c      	ldr	r3, [pc, #176]	; (800659c <_puts_r+0xd0>)
 80064ea:	429c      	cmp	r4, r3
 80064ec:	d120      	bne.n	8006530 <_puts_r+0x64>
 80064ee:	686c      	ldr	r4, [r5, #4]
 80064f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064f2:	07db      	lsls	r3, r3, #31
 80064f4:	d405      	bmi.n	8006502 <_puts_r+0x36>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	0598      	lsls	r0, r3, #22
 80064fa:	d402      	bmi.n	8006502 <_puts_r+0x36>
 80064fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064fe:	f000 fad3 	bl	8006aa8 <__retarget_lock_acquire_recursive>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	0719      	lsls	r1, r3, #28
 8006506:	d51d      	bpl.n	8006544 <_puts_r+0x78>
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	b1db      	cbz	r3, 8006544 <_puts_r+0x78>
 800650c:	3e01      	subs	r6, #1
 800650e:	68a3      	ldr	r3, [r4, #8]
 8006510:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006514:	3b01      	subs	r3, #1
 8006516:	60a3      	str	r3, [r4, #8]
 8006518:	bb39      	cbnz	r1, 800656a <_puts_r+0x9e>
 800651a:	2b00      	cmp	r3, #0
 800651c:	da38      	bge.n	8006590 <_puts_r+0xc4>
 800651e:	4622      	mov	r2, r4
 8006520:	210a      	movs	r1, #10
 8006522:	4628      	mov	r0, r5
 8006524:	f000 f848 	bl	80065b8 <__swbuf_r>
 8006528:	3001      	adds	r0, #1
 800652a:	d011      	beq.n	8006550 <_puts_r+0x84>
 800652c:	250a      	movs	r5, #10
 800652e:	e011      	b.n	8006554 <_puts_r+0x88>
 8006530:	4b1b      	ldr	r3, [pc, #108]	; (80065a0 <_puts_r+0xd4>)
 8006532:	429c      	cmp	r4, r3
 8006534:	d101      	bne.n	800653a <_puts_r+0x6e>
 8006536:	68ac      	ldr	r4, [r5, #8]
 8006538:	e7da      	b.n	80064f0 <_puts_r+0x24>
 800653a:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <_puts_r+0xd8>)
 800653c:	429c      	cmp	r4, r3
 800653e:	bf08      	it	eq
 8006540:	68ec      	ldreq	r4, [r5, #12]
 8006542:	e7d5      	b.n	80064f0 <_puts_r+0x24>
 8006544:	4621      	mov	r1, r4
 8006546:	4628      	mov	r0, r5
 8006548:	f000 f888 	bl	800665c <__swsetup_r>
 800654c:	2800      	cmp	r0, #0
 800654e:	d0dd      	beq.n	800650c <_puts_r+0x40>
 8006550:	f04f 35ff 	mov.w	r5, #4294967295
 8006554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006556:	07da      	lsls	r2, r3, #31
 8006558:	d405      	bmi.n	8006566 <_puts_r+0x9a>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	059b      	lsls	r3, r3, #22
 800655e:	d402      	bmi.n	8006566 <_puts_r+0x9a>
 8006560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006562:	f000 faa2 	bl	8006aaa <__retarget_lock_release_recursive>
 8006566:	4628      	mov	r0, r5
 8006568:	bd70      	pop	{r4, r5, r6, pc}
 800656a:	2b00      	cmp	r3, #0
 800656c:	da04      	bge.n	8006578 <_puts_r+0xac>
 800656e:	69a2      	ldr	r2, [r4, #24]
 8006570:	429a      	cmp	r2, r3
 8006572:	dc06      	bgt.n	8006582 <_puts_r+0xb6>
 8006574:	290a      	cmp	r1, #10
 8006576:	d004      	beq.n	8006582 <_puts_r+0xb6>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	6022      	str	r2, [r4, #0]
 800657e:	7019      	strb	r1, [r3, #0]
 8006580:	e7c5      	b.n	800650e <_puts_r+0x42>
 8006582:	4622      	mov	r2, r4
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f817 	bl	80065b8 <__swbuf_r>
 800658a:	3001      	adds	r0, #1
 800658c:	d1bf      	bne.n	800650e <_puts_r+0x42>
 800658e:	e7df      	b.n	8006550 <_puts_r+0x84>
 8006590:	250a      	movs	r5, #10
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	6022      	str	r2, [r4, #0]
 8006598:	701d      	strb	r5, [r3, #0]
 800659a:	e7db      	b.n	8006554 <_puts_r+0x88>
 800659c:	08007a54 	.word	0x08007a54
 80065a0:	08007a74 	.word	0x08007a74
 80065a4:	08007a34 	.word	0x08007a34

080065a8 <puts>:
 80065a8:	4b02      	ldr	r3, [pc, #8]	; (80065b4 <puts+0xc>)
 80065aa:	4601      	mov	r1, r0
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f7ff bf8d 	b.w	80064cc <_puts_r>
 80065b2:	bf00      	nop
 80065b4:	20000010 	.word	0x20000010

080065b8 <__swbuf_r>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	460e      	mov	r6, r1
 80065bc:	4614      	mov	r4, r2
 80065be:	4605      	mov	r5, r0
 80065c0:	b118      	cbz	r0, 80065ca <__swbuf_r+0x12>
 80065c2:	6983      	ldr	r3, [r0, #24]
 80065c4:	b90b      	cbnz	r3, 80065ca <__swbuf_r+0x12>
 80065c6:	f000 f9d1 	bl	800696c <__sinit>
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <__swbuf_r+0x98>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d12b      	bne.n	8006628 <__swbuf_r+0x70>
 80065d0:	686c      	ldr	r4, [r5, #4]
 80065d2:	69a3      	ldr	r3, [r4, #24]
 80065d4:	60a3      	str	r3, [r4, #8]
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	071a      	lsls	r2, r3, #28
 80065da:	d52f      	bpl.n	800663c <__swbuf_r+0x84>
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	b36b      	cbz	r3, 800663c <__swbuf_r+0x84>
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	6820      	ldr	r0, [r4, #0]
 80065e4:	b2f6      	uxtb	r6, r6
 80065e6:	1ac0      	subs	r0, r0, r3
 80065e8:	6963      	ldr	r3, [r4, #20]
 80065ea:	4637      	mov	r7, r6
 80065ec:	4283      	cmp	r3, r0
 80065ee:	dc04      	bgt.n	80065fa <__swbuf_r+0x42>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f926 	bl	8006844 <_fflush_r>
 80065f8:	bb30      	cbnz	r0, 8006648 <__swbuf_r+0x90>
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	3001      	adds	r0, #1
 80065fe:	3b01      	subs	r3, #1
 8006600:	60a3      	str	r3, [r4, #8]
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	6022      	str	r2, [r4, #0]
 8006608:	701e      	strb	r6, [r3, #0]
 800660a:	6963      	ldr	r3, [r4, #20]
 800660c:	4283      	cmp	r3, r0
 800660e:	d004      	beq.n	800661a <__swbuf_r+0x62>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	07db      	lsls	r3, r3, #31
 8006614:	d506      	bpl.n	8006624 <__swbuf_r+0x6c>
 8006616:	2e0a      	cmp	r6, #10
 8006618:	d104      	bne.n	8006624 <__swbuf_r+0x6c>
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f000 f911 	bl	8006844 <_fflush_r>
 8006622:	b988      	cbnz	r0, 8006648 <__swbuf_r+0x90>
 8006624:	4638      	mov	r0, r7
 8006626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <__swbuf_r+0x9c>)
 800662a:	429c      	cmp	r4, r3
 800662c:	d101      	bne.n	8006632 <__swbuf_r+0x7a>
 800662e:	68ac      	ldr	r4, [r5, #8]
 8006630:	e7cf      	b.n	80065d2 <__swbuf_r+0x1a>
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <__swbuf_r+0xa0>)
 8006634:	429c      	cmp	r4, r3
 8006636:	bf08      	it	eq
 8006638:	68ec      	ldreq	r4, [r5, #12]
 800663a:	e7ca      	b.n	80065d2 <__swbuf_r+0x1a>
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f000 f80c 	bl	800665c <__swsetup_r>
 8006644:	2800      	cmp	r0, #0
 8006646:	d0cb      	beq.n	80065e0 <__swbuf_r+0x28>
 8006648:	f04f 37ff 	mov.w	r7, #4294967295
 800664c:	e7ea      	b.n	8006624 <__swbuf_r+0x6c>
 800664e:	bf00      	nop
 8006650:	08007a54 	.word	0x08007a54
 8006654:	08007a74 	.word	0x08007a74
 8006658:	08007a34 	.word	0x08007a34

0800665c <__swsetup_r>:
 800665c:	4b32      	ldr	r3, [pc, #200]	; (8006728 <__swsetup_r+0xcc>)
 800665e:	b570      	push	{r4, r5, r6, lr}
 8006660:	681d      	ldr	r5, [r3, #0]
 8006662:	4606      	mov	r6, r0
 8006664:	460c      	mov	r4, r1
 8006666:	b125      	cbz	r5, 8006672 <__swsetup_r+0x16>
 8006668:	69ab      	ldr	r3, [r5, #24]
 800666a:	b913      	cbnz	r3, 8006672 <__swsetup_r+0x16>
 800666c:	4628      	mov	r0, r5
 800666e:	f000 f97d 	bl	800696c <__sinit>
 8006672:	4b2e      	ldr	r3, [pc, #184]	; (800672c <__swsetup_r+0xd0>)
 8006674:	429c      	cmp	r4, r3
 8006676:	d10f      	bne.n	8006698 <__swsetup_r+0x3c>
 8006678:	686c      	ldr	r4, [r5, #4]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006680:	0719      	lsls	r1, r3, #28
 8006682:	d42c      	bmi.n	80066de <__swsetup_r+0x82>
 8006684:	06dd      	lsls	r5, r3, #27
 8006686:	d411      	bmi.n	80066ac <__swsetup_r+0x50>
 8006688:	2309      	movs	r3, #9
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	81a3      	strh	r3, [r4, #12]
 8006696:	e03e      	b.n	8006716 <__swsetup_r+0xba>
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <__swsetup_r+0xd4>)
 800669a:	429c      	cmp	r4, r3
 800669c:	d101      	bne.n	80066a2 <__swsetup_r+0x46>
 800669e:	68ac      	ldr	r4, [r5, #8]
 80066a0:	e7eb      	b.n	800667a <__swsetup_r+0x1e>
 80066a2:	4b24      	ldr	r3, [pc, #144]	; (8006734 <__swsetup_r+0xd8>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	bf08      	it	eq
 80066a8:	68ec      	ldreq	r4, [r5, #12]
 80066aa:	e7e6      	b.n	800667a <__swsetup_r+0x1e>
 80066ac:	0758      	lsls	r0, r3, #29
 80066ae:	d512      	bpl.n	80066d6 <__swsetup_r+0x7a>
 80066b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b2:	b141      	cbz	r1, 80066c6 <__swsetup_r+0x6a>
 80066b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b8:	4299      	cmp	r1, r3
 80066ba:	d002      	beq.n	80066c2 <__swsetup_r+0x66>
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 fa59 	bl	8006b74 <_free_r>
 80066c2:	2300      	movs	r3, #0
 80066c4:	6363      	str	r3, [r4, #52]	; 0x34
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	2300      	movs	r3, #0
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f043 0308 	orr.w	r3, r3, #8
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	b94b      	cbnz	r3, 80066f6 <__swsetup_r+0x9a>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ec:	d003      	beq.n	80066f6 <__swsetup_r+0x9a>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 f9ff 	bl	8006af4 <__smakebuf_r>
 80066f6:	89a0      	ldrh	r0, [r4, #12]
 80066f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066fc:	f010 0301 	ands.w	r3, r0, #1
 8006700:	d00a      	beq.n	8006718 <__swsetup_r+0xbc>
 8006702:	2300      	movs	r3, #0
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	6963      	ldr	r3, [r4, #20]
 8006708:	425b      	negs	r3, r3
 800670a:	61a3      	str	r3, [r4, #24]
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	b943      	cbnz	r3, 8006722 <__swsetup_r+0xc6>
 8006710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006714:	d1ba      	bne.n	800668c <__swsetup_r+0x30>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	0781      	lsls	r1, r0, #30
 800671a:	bf58      	it	pl
 800671c:	6963      	ldrpl	r3, [r4, #20]
 800671e:	60a3      	str	r3, [r4, #8]
 8006720:	e7f4      	b.n	800670c <__swsetup_r+0xb0>
 8006722:	2000      	movs	r0, #0
 8006724:	e7f7      	b.n	8006716 <__swsetup_r+0xba>
 8006726:	bf00      	nop
 8006728:	20000010 	.word	0x20000010
 800672c:	08007a54 	.word	0x08007a54
 8006730:	08007a74 	.word	0x08007a74
 8006734:	08007a34 	.word	0x08007a34

08006738 <__sflush_r>:
 8006738:	898a      	ldrh	r2, [r1, #12]
 800673a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673e:	4605      	mov	r5, r0
 8006740:	0710      	lsls	r0, r2, #28
 8006742:	460c      	mov	r4, r1
 8006744:	d458      	bmi.n	80067f8 <__sflush_r+0xc0>
 8006746:	684b      	ldr	r3, [r1, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	dc05      	bgt.n	8006758 <__sflush_r+0x20>
 800674c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	dc02      	bgt.n	8006758 <__sflush_r+0x20>
 8006752:	2000      	movs	r0, #0
 8006754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800675a:	2e00      	cmp	r6, #0
 800675c:	d0f9      	beq.n	8006752 <__sflush_r+0x1a>
 800675e:	2300      	movs	r3, #0
 8006760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006764:	682f      	ldr	r7, [r5, #0]
 8006766:	602b      	str	r3, [r5, #0]
 8006768:	d032      	beq.n	80067d0 <__sflush_r+0x98>
 800676a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	075a      	lsls	r2, r3, #29
 8006770:	d505      	bpl.n	800677e <__sflush_r+0x46>
 8006772:	6863      	ldr	r3, [r4, #4]
 8006774:	1ac0      	subs	r0, r0, r3
 8006776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006778:	b10b      	cbz	r3, 800677e <__sflush_r+0x46>
 800677a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800677c:	1ac0      	subs	r0, r0, r3
 800677e:	2300      	movs	r3, #0
 8006780:	4602      	mov	r2, r0
 8006782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006784:	4628      	mov	r0, r5
 8006786:	6a21      	ldr	r1, [r4, #32]
 8006788:	47b0      	blx	r6
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	d106      	bne.n	800679e <__sflush_r+0x66>
 8006790:	6829      	ldr	r1, [r5, #0]
 8006792:	291d      	cmp	r1, #29
 8006794:	d82c      	bhi.n	80067f0 <__sflush_r+0xb8>
 8006796:	4a2a      	ldr	r2, [pc, #168]	; (8006840 <__sflush_r+0x108>)
 8006798:	40ca      	lsrs	r2, r1
 800679a:	07d6      	lsls	r6, r2, #31
 800679c:	d528      	bpl.n	80067f0 <__sflush_r+0xb8>
 800679e:	2200      	movs	r2, #0
 80067a0:	6062      	str	r2, [r4, #4]
 80067a2:	6922      	ldr	r2, [r4, #16]
 80067a4:	04d9      	lsls	r1, r3, #19
 80067a6:	6022      	str	r2, [r4, #0]
 80067a8:	d504      	bpl.n	80067b4 <__sflush_r+0x7c>
 80067aa:	1c42      	adds	r2, r0, #1
 80067ac:	d101      	bne.n	80067b2 <__sflush_r+0x7a>
 80067ae:	682b      	ldr	r3, [r5, #0]
 80067b0:	b903      	cbnz	r3, 80067b4 <__sflush_r+0x7c>
 80067b2:	6560      	str	r0, [r4, #84]	; 0x54
 80067b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067b6:	602f      	str	r7, [r5, #0]
 80067b8:	2900      	cmp	r1, #0
 80067ba:	d0ca      	beq.n	8006752 <__sflush_r+0x1a>
 80067bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c0:	4299      	cmp	r1, r3
 80067c2:	d002      	beq.n	80067ca <__sflush_r+0x92>
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 f9d5 	bl	8006b74 <_free_r>
 80067ca:	2000      	movs	r0, #0
 80067cc:	6360      	str	r0, [r4, #52]	; 0x34
 80067ce:	e7c1      	b.n	8006754 <__sflush_r+0x1c>
 80067d0:	6a21      	ldr	r1, [r4, #32]
 80067d2:	2301      	movs	r3, #1
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b0      	blx	r6
 80067d8:	1c41      	adds	r1, r0, #1
 80067da:	d1c7      	bne.n	800676c <__sflush_r+0x34>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0c4      	beq.n	800676c <__sflush_r+0x34>
 80067e2:	2b1d      	cmp	r3, #29
 80067e4:	d001      	beq.n	80067ea <__sflush_r+0xb2>
 80067e6:	2b16      	cmp	r3, #22
 80067e8:	d101      	bne.n	80067ee <__sflush_r+0xb6>
 80067ea:	602f      	str	r7, [r5, #0]
 80067ec:	e7b1      	b.n	8006752 <__sflush_r+0x1a>
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	e7ad      	b.n	8006754 <__sflush_r+0x1c>
 80067f8:	690f      	ldr	r7, [r1, #16]
 80067fa:	2f00      	cmp	r7, #0
 80067fc:	d0a9      	beq.n	8006752 <__sflush_r+0x1a>
 80067fe:	0793      	lsls	r3, r2, #30
 8006800:	bf18      	it	ne
 8006802:	2300      	movne	r3, #0
 8006804:	680e      	ldr	r6, [r1, #0]
 8006806:	bf08      	it	eq
 8006808:	694b      	ldreq	r3, [r1, #20]
 800680a:	eba6 0807 	sub.w	r8, r6, r7
 800680e:	600f      	str	r7, [r1, #0]
 8006810:	608b      	str	r3, [r1, #8]
 8006812:	f1b8 0f00 	cmp.w	r8, #0
 8006816:	dd9c      	ble.n	8006752 <__sflush_r+0x1a>
 8006818:	4643      	mov	r3, r8
 800681a:	463a      	mov	r2, r7
 800681c:	4628      	mov	r0, r5
 800681e:	6a21      	ldr	r1, [r4, #32]
 8006820:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006822:	47b0      	blx	r6
 8006824:	2800      	cmp	r0, #0
 8006826:	dc06      	bgt.n	8006836 <__sflush_r+0xfe>
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	e78e      	b.n	8006754 <__sflush_r+0x1c>
 8006836:	4407      	add	r7, r0
 8006838:	eba8 0800 	sub.w	r8, r8, r0
 800683c:	e7e9      	b.n	8006812 <__sflush_r+0xda>
 800683e:	bf00      	nop
 8006840:	20400001 	.word	0x20400001

08006844 <_fflush_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	690b      	ldr	r3, [r1, #16]
 8006848:	4605      	mov	r5, r0
 800684a:	460c      	mov	r4, r1
 800684c:	b913      	cbnz	r3, 8006854 <_fflush_r+0x10>
 800684e:	2500      	movs	r5, #0
 8006850:	4628      	mov	r0, r5
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	b118      	cbz	r0, 800685e <_fflush_r+0x1a>
 8006856:	6983      	ldr	r3, [r0, #24]
 8006858:	b90b      	cbnz	r3, 800685e <_fflush_r+0x1a>
 800685a:	f000 f887 	bl	800696c <__sinit>
 800685e:	4b14      	ldr	r3, [pc, #80]	; (80068b0 <_fflush_r+0x6c>)
 8006860:	429c      	cmp	r4, r3
 8006862:	d11b      	bne.n	800689c <_fflush_r+0x58>
 8006864:	686c      	ldr	r4, [r5, #4]
 8006866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0ef      	beq.n	800684e <_fflush_r+0xa>
 800686e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006870:	07d0      	lsls	r0, r2, #31
 8006872:	d404      	bmi.n	800687e <_fflush_r+0x3a>
 8006874:	0599      	lsls	r1, r3, #22
 8006876:	d402      	bmi.n	800687e <_fflush_r+0x3a>
 8006878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800687a:	f000 f915 	bl	8006aa8 <__retarget_lock_acquire_recursive>
 800687e:	4628      	mov	r0, r5
 8006880:	4621      	mov	r1, r4
 8006882:	f7ff ff59 	bl	8006738 <__sflush_r>
 8006886:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006888:	4605      	mov	r5, r0
 800688a:	07da      	lsls	r2, r3, #31
 800688c:	d4e0      	bmi.n	8006850 <_fflush_r+0xc>
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	059b      	lsls	r3, r3, #22
 8006892:	d4dd      	bmi.n	8006850 <_fflush_r+0xc>
 8006894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006896:	f000 f908 	bl	8006aaa <__retarget_lock_release_recursive>
 800689a:	e7d9      	b.n	8006850 <_fflush_r+0xc>
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <_fflush_r+0x70>)
 800689e:	429c      	cmp	r4, r3
 80068a0:	d101      	bne.n	80068a6 <_fflush_r+0x62>
 80068a2:	68ac      	ldr	r4, [r5, #8]
 80068a4:	e7df      	b.n	8006866 <_fflush_r+0x22>
 80068a6:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <_fflush_r+0x74>)
 80068a8:	429c      	cmp	r4, r3
 80068aa:	bf08      	it	eq
 80068ac:	68ec      	ldreq	r4, [r5, #12]
 80068ae:	e7da      	b.n	8006866 <_fflush_r+0x22>
 80068b0:	08007a54 	.word	0x08007a54
 80068b4:	08007a74 	.word	0x08007a74
 80068b8:	08007a34 	.word	0x08007a34

080068bc <std>:
 80068bc:	2300      	movs	r3, #0
 80068be:	b510      	push	{r4, lr}
 80068c0:	4604      	mov	r4, r0
 80068c2:	e9c0 3300 	strd	r3, r3, [r0]
 80068c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ca:	6083      	str	r3, [r0, #8]
 80068cc:	8181      	strh	r1, [r0, #12]
 80068ce:	6643      	str	r3, [r0, #100]	; 0x64
 80068d0:	81c2      	strh	r2, [r0, #14]
 80068d2:	6183      	str	r3, [r0, #24]
 80068d4:	4619      	mov	r1, r3
 80068d6:	2208      	movs	r2, #8
 80068d8:	305c      	adds	r0, #92	; 0x5c
 80068da:	f7ff fdd7 	bl	800648c <memset>
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <std+0x38>)
 80068e0:	6224      	str	r4, [r4, #32]
 80068e2:	6263      	str	r3, [r4, #36]	; 0x24
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <std+0x3c>)
 80068e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80068e8:	4b04      	ldr	r3, [pc, #16]	; (80068fc <std+0x40>)
 80068ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068ec:	4b04      	ldr	r3, [pc, #16]	; (8006900 <std+0x44>)
 80068ee:	6323      	str	r3, [r4, #48]	; 0x30
 80068f0:	bd10      	pop	{r4, pc}
 80068f2:	bf00      	nop
 80068f4:	080072bd 	.word	0x080072bd
 80068f8:	080072df 	.word	0x080072df
 80068fc:	08007317 	.word	0x08007317
 8006900:	0800733b 	.word	0x0800733b

08006904 <_cleanup_r>:
 8006904:	4901      	ldr	r1, [pc, #4]	; (800690c <_cleanup_r+0x8>)
 8006906:	f000 b8af 	b.w	8006a68 <_fwalk_reent>
 800690a:	bf00      	nop
 800690c:	08006845 	.word	0x08006845

08006910 <__sfmoreglue>:
 8006910:	b570      	push	{r4, r5, r6, lr}
 8006912:	2568      	movs	r5, #104	; 0x68
 8006914:	1e4a      	subs	r2, r1, #1
 8006916:	4355      	muls	r5, r2
 8006918:	460e      	mov	r6, r1
 800691a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800691e:	f000 f975 	bl	8006c0c <_malloc_r>
 8006922:	4604      	mov	r4, r0
 8006924:	b140      	cbz	r0, 8006938 <__sfmoreglue+0x28>
 8006926:	2100      	movs	r1, #0
 8006928:	e9c0 1600 	strd	r1, r6, [r0]
 800692c:	300c      	adds	r0, #12
 800692e:	60a0      	str	r0, [r4, #8]
 8006930:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006934:	f7ff fdaa 	bl	800648c <memset>
 8006938:	4620      	mov	r0, r4
 800693a:	bd70      	pop	{r4, r5, r6, pc}

0800693c <__sfp_lock_acquire>:
 800693c:	4801      	ldr	r0, [pc, #4]	; (8006944 <__sfp_lock_acquire+0x8>)
 800693e:	f000 b8b3 	b.w	8006aa8 <__retarget_lock_acquire_recursive>
 8006942:	bf00      	nop
 8006944:	20000448 	.word	0x20000448

08006948 <__sfp_lock_release>:
 8006948:	4801      	ldr	r0, [pc, #4]	; (8006950 <__sfp_lock_release+0x8>)
 800694a:	f000 b8ae 	b.w	8006aaa <__retarget_lock_release_recursive>
 800694e:	bf00      	nop
 8006950:	20000448 	.word	0x20000448

08006954 <__sinit_lock_acquire>:
 8006954:	4801      	ldr	r0, [pc, #4]	; (800695c <__sinit_lock_acquire+0x8>)
 8006956:	f000 b8a7 	b.w	8006aa8 <__retarget_lock_acquire_recursive>
 800695a:	bf00      	nop
 800695c:	20000443 	.word	0x20000443

08006960 <__sinit_lock_release>:
 8006960:	4801      	ldr	r0, [pc, #4]	; (8006968 <__sinit_lock_release+0x8>)
 8006962:	f000 b8a2 	b.w	8006aaa <__retarget_lock_release_recursive>
 8006966:	bf00      	nop
 8006968:	20000443 	.word	0x20000443

0800696c <__sinit>:
 800696c:	b510      	push	{r4, lr}
 800696e:	4604      	mov	r4, r0
 8006970:	f7ff fff0 	bl	8006954 <__sinit_lock_acquire>
 8006974:	69a3      	ldr	r3, [r4, #24]
 8006976:	b11b      	cbz	r3, 8006980 <__sinit+0x14>
 8006978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800697c:	f7ff bff0 	b.w	8006960 <__sinit_lock_release>
 8006980:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006984:	6523      	str	r3, [r4, #80]	; 0x50
 8006986:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <__sinit+0x68>)
 8006988:	4a13      	ldr	r2, [pc, #76]	; (80069d8 <__sinit+0x6c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	62a2      	str	r2, [r4, #40]	; 0x28
 800698e:	42a3      	cmp	r3, r4
 8006990:	bf08      	it	eq
 8006992:	2301      	moveq	r3, #1
 8006994:	4620      	mov	r0, r4
 8006996:	bf08      	it	eq
 8006998:	61a3      	streq	r3, [r4, #24]
 800699a:	f000 f81f 	bl	80069dc <__sfp>
 800699e:	6060      	str	r0, [r4, #4]
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 f81b 	bl	80069dc <__sfp>
 80069a6:	60a0      	str	r0, [r4, #8]
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 f817 	bl	80069dc <__sfp>
 80069ae:	2200      	movs	r2, #0
 80069b0:	2104      	movs	r1, #4
 80069b2:	60e0      	str	r0, [r4, #12]
 80069b4:	6860      	ldr	r0, [r4, #4]
 80069b6:	f7ff ff81 	bl	80068bc <std>
 80069ba:	2201      	movs	r2, #1
 80069bc:	2109      	movs	r1, #9
 80069be:	68a0      	ldr	r0, [r4, #8]
 80069c0:	f7ff ff7c 	bl	80068bc <std>
 80069c4:	2202      	movs	r2, #2
 80069c6:	2112      	movs	r1, #18
 80069c8:	68e0      	ldr	r0, [r4, #12]
 80069ca:	f7ff ff77 	bl	80068bc <std>
 80069ce:	2301      	movs	r3, #1
 80069d0:	61a3      	str	r3, [r4, #24]
 80069d2:	e7d1      	b.n	8006978 <__sinit+0xc>
 80069d4:	08007a30 	.word	0x08007a30
 80069d8:	08006905 	.word	0x08006905

080069dc <__sfp>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	4607      	mov	r7, r0
 80069e0:	f7ff ffac 	bl	800693c <__sfp_lock_acquire>
 80069e4:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <__sfp+0x84>)
 80069e6:	681e      	ldr	r6, [r3, #0]
 80069e8:	69b3      	ldr	r3, [r6, #24]
 80069ea:	b913      	cbnz	r3, 80069f2 <__sfp+0x16>
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff ffbd 	bl	800696c <__sinit>
 80069f2:	3648      	adds	r6, #72	; 0x48
 80069f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	d503      	bpl.n	8006a04 <__sfp+0x28>
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	b30b      	cbz	r3, 8006a44 <__sfp+0x68>
 8006a00:	6836      	ldr	r6, [r6, #0]
 8006a02:	e7f7      	b.n	80069f4 <__sfp+0x18>
 8006a04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a08:	b9d5      	cbnz	r5, 8006a40 <__sfp+0x64>
 8006a0a:	4b16      	ldr	r3, [pc, #88]	; (8006a64 <__sfp+0x88>)
 8006a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a10:	60e3      	str	r3, [r4, #12]
 8006a12:	6665      	str	r5, [r4, #100]	; 0x64
 8006a14:	f000 f847 	bl	8006aa6 <__retarget_lock_init_recursive>
 8006a18:	f7ff ff96 	bl	8006948 <__sfp_lock_release>
 8006a1c:	2208      	movs	r2, #8
 8006a1e:	4629      	mov	r1, r5
 8006a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a28:	6025      	str	r5, [r4, #0]
 8006a2a:	61a5      	str	r5, [r4, #24]
 8006a2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a30:	f7ff fd2c 	bl	800648c <memset>
 8006a34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a40:	3468      	adds	r4, #104	; 0x68
 8006a42:	e7d9      	b.n	80069f8 <__sfp+0x1c>
 8006a44:	2104      	movs	r1, #4
 8006a46:	4638      	mov	r0, r7
 8006a48:	f7ff ff62 	bl	8006910 <__sfmoreglue>
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	6030      	str	r0, [r6, #0]
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d1d5      	bne.n	8006a00 <__sfp+0x24>
 8006a54:	f7ff ff78 	bl	8006948 <__sfp_lock_release>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	e7ee      	b.n	8006a3c <__sfp+0x60>
 8006a5e:	bf00      	nop
 8006a60:	08007a30 	.word	0x08007a30
 8006a64:	ffff0001 	.word	0xffff0001

08006a68 <_fwalk_reent>:
 8006a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	4688      	mov	r8, r1
 8006a70:	2700      	movs	r7, #0
 8006a72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a7a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a7e:	d505      	bpl.n	8006a8c <_fwalk_reent+0x24>
 8006a80:	6824      	ldr	r4, [r4, #0]
 8006a82:	2c00      	cmp	r4, #0
 8006a84:	d1f7      	bne.n	8006a76 <_fwalk_reent+0xe>
 8006a86:	4638      	mov	r0, r7
 8006a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8c:	89ab      	ldrh	r3, [r5, #12]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d907      	bls.n	8006aa2 <_fwalk_reent+0x3a>
 8006a92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a96:	3301      	adds	r3, #1
 8006a98:	d003      	beq.n	8006aa2 <_fwalk_reent+0x3a>
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	47c0      	blx	r8
 8006aa0:	4307      	orrs	r7, r0
 8006aa2:	3568      	adds	r5, #104	; 0x68
 8006aa4:	e7e9      	b.n	8006a7a <_fwalk_reent+0x12>

08006aa6 <__retarget_lock_init_recursive>:
 8006aa6:	4770      	bx	lr

08006aa8 <__retarget_lock_acquire_recursive>:
 8006aa8:	4770      	bx	lr

08006aaa <__retarget_lock_release_recursive>:
 8006aaa:	4770      	bx	lr

08006aac <__swhatbuf_r>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	460e      	mov	r6, r1
 8006ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	2900      	cmp	r1, #0
 8006ab8:	461d      	mov	r5, r3
 8006aba:	b096      	sub	sp, #88	; 0x58
 8006abc:	da07      	bge.n	8006ace <__swhatbuf_r+0x22>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	89b3      	ldrh	r3, [r6, #12]
 8006ac4:	061a      	lsls	r2, r3, #24
 8006ac6:	d410      	bmi.n	8006aea <__swhatbuf_r+0x3e>
 8006ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006acc:	e00e      	b.n	8006aec <__swhatbuf_r+0x40>
 8006ace:	466a      	mov	r2, sp
 8006ad0:	f000 fc5a 	bl	8007388 <_fstat_r>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	dbf2      	blt.n	8006abe <__swhatbuf_r+0x12>
 8006ad8:	9a01      	ldr	r2, [sp, #4]
 8006ada:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ade:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ae2:	425a      	negs	r2, r3
 8006ae4:	415a      	adcs	r2, r3
 8006ae6:	602a      	str	r2, [r5, #0]
 8006ae8:	e7ee      	b.n	8006ac8 <__swhatbuf_r+0x1c>
 8006aea:	2340      	movs	r3, #64	; 0x40
 8006aec:	2000      	movs	r0, #0
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	b016      	add	sp, #88	; 0x58
 8006af2:	bd70      	pop	{r4, r5, r6, pc}

08006af4 <__smakebuf_r>:
 8006af4:	898b      	ldrh	r3, [r1, #12]
 8006af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af8:	079d      	lsls	r5, r3, #30
 8006afa:	4606      	mov	r6, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	d507      	bpl.n	8006b10 <__smakebuf_r+0x1c>
 8006b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	466a      	mov	r2, sp
 8006b12:	ab01      	add	r3, sp, #4
 8006b14:	f7ff ffca 	bl	8006aac <__swhatbuf_r>
 8006b18:	9900      	ldr	r1, [sp, #0]
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f000 f875 	bl	8006c0c <_malloc_r>
 8006b22:	b948      	cbnz	r0, 8006b38 <__smakebuf_r+0x44>
 8006b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b28:	059a      	lsls	r2, r3, #22
 8006b2a:	d4ef      	bmi.n	8006b0c <__smakebuf_r+0x18>
 8006b2c:	f023 0303 	bic.w	r3, r3, #3
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	e7e3      	b.n	8006b00 <__smakebuf_r+0xc>
 8006b38:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <__smakebuf_r+0x7c>)
 8006b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	6020      	str	r0, [r4, #0]
 8006b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	6120      	str	r0, [r4, #16]
 8006b4a:	6163      	str	r3, [r4, #20]
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	b15b      	cbz	r3, 8006b68 <__smakebuf_r+0x74>
 8006b50:	4630      	mov	r0, r6
 8006b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b56:	f000 fc29 	bl	80073ac <_isatty_r>
 8006b5a:	b128      	cbz	r0, 8006b68 <__smakebuf_r+0x74>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	89a0      	ldrh	r0, [r4, #12]
 8006b6a:	4305      	orrs	r5, r0
 8006b6c:	81a5      	strh	r5, [r4, #12]
 8006b6e:	e7cd      	b.n	8006b0c <__smakebuf_r+0x18>
 8006b70:	08006905 	.word	0x08006905

08006b74 <_free_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4605      	mov	r5, r0
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	d043      	beq.n	8006c04 <_free_r+0x90>
 8006b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b80:	1f0c      	subs	r4, r1, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bfb8      	it	lt
 8006b86:	18e4      	addlt	r4, r4, r3
 8006b88:	f000 fc40 	bl	800740c <__malloc_lock>
 8006b8c:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <_free_r+0x94>)
 8006b8e:	6813      	ldr	r3, [r2, #0]
 8006b90:	4610      	mov	r0, r2
 8006b92:	b933      	cbnz	r3, 8006ba2 <_free_r+0x2e>
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	6014      	str	r4, [r2, #0]
 8006b98:	4628      	mov	r0, r5
 8006b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b9e:	f000 bc3b 	b.w	8007418 <__malloc_unlock>
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	d90a      	bls.n	8006bbc <_free_r+0x48>
 8006ba6:	6821      	ldr	r1, [r4, #0]
 8006ba8:	1862      	adds	r2, r4, r1
 8006baa:	4293      	cmp	r3, r2
 8006bac:	bf01      	itttt	eq
 8006bae:	681a      	ldreq	r2, [r3, #0]
 8006bb0:	685b      	ldreq	r3, [r3, #4]
 8006bb2:	1852      	addeq	r2, r2, r1
 8006bb4:	6022      	streq	r2, [r4, #0]
 8006bb6:	6063      	str	r3, [r4, #4]
 8006bb8:	6004      	str	r4, [r0, #0]
 8006bba:	e7ed      	b.n	8006b98 <_free_r+0x24>
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	b10b      	cbz	r3, 8006bc6 <_free_r+0x52>
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	d9fa      	bls.n	8006bbc <_free_r+0x48>
 8006bc6:	6811      	ldr	r1, [r2, #0]
 8006bc8:	1850      	adds	r0, r2, r1
 8006bca:	42a0      	cmp	r0, r4
 8006bcc:	d10b      	bne.n	8006be6 <_free_r+0x72>
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	4401      	add	r1, r0
 8006bd2:	1850      	adds	r0, r2, r1
 8006bd4:	4283      	cmp	r3, r0
 8006bd6:	6011      	str	r1, [r2, #0]
 8006bd8:	d1de      	bne.n	8006b98 <_free_r+0x24>
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	4401      	add	r1, r0
 8006be0:	6011      	str	r1, [r2, #0]
 8006be2:	6053      	str	r3, [r2, #4]
 8006be4:	e7d8      	b.n	8006b98 <_free_r+0x24>
 8006be6:	d902      	bls.n	8006bee <_free_r+0x7a>
 8006be8:	230c      	movs	r3, #12
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	e7d4      	b.n	8006b98 <_free_r+0x24>
 8006bee:	6820      	ldr	r0, [r4, #0]
 8006bf0:	1821      	adds	r1, r4, r0
 8006bf2:	428b      	cmp	r3, r1
 8006bf4:	bf01      	itttt	eq
 8006bf6:	6819      	ldreq	r1, [r3, #0]
 8006bf8:	685b      	ldreq	r3, [r3, #4]
 8006bfa:	1809      	addeq	r1, r1, r0
 8006bfc:	6021      	streq	r1, [r4, #0]
 8006bfe:	6063      	str	r3, [r4, #4]
 8006c00:	6054      	str	r4, [r2, #4]
 8006c02:	e7c9      	b.n	8006b98 <_free_r+0x24>
 8006c04:	bd38      	pop	{r3, r4, r5, pc}
 8006c06:	bf00      	nop
 8006c08:	200000b8 	.word	0x200000b8

08006c0c <_malloc_r>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	1ccd      	adds	r5, r1, #3
 8006c10:	f025 0503 	bic.w	r5, r5, #3
 8006c14:	3508      	adds	r5, #8
 8006c16:	2d0c      	cmp	r5, #12
 8006c18:	bf38      	it	cc
 8006c1a:	250c      	movcc	r5, #12
 8006c1c:	2d00      	cmp	r5, #0
 8006c1e:	4606      	mov	r6, r0
 8006c20:	db01      	blt.n	8006c26 <_malloc_r+0x1a>
 8006c22:	42a9      	cmp	r1, r5
 8006c24:	d903      	bls.n	8006c2e <_malloc_r+0x22>
 8006c26:	230c      	movs	r3, #12
 8006c28:	6033      	str	r3, [r6, #0]
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c2e:	f000 fbed 	bl	800740c <__malloc_lock>
 8006c32:	4921      	ldr	r1, [pc, #132]	; (8006cb8 <_malloc_r+0xac>)
 8006c34:	680a      	ldr	r2, [r1, #0]
 8006c36:	4614      	mov	r4, r2
 8006c38:	b99c      	cbnz	r4, 8006c62 <_malloc_r+0x56>
 8006c3a:	4f20      	ldr	r7, [pc, #128]	; (8006cbc <_malloc_r+0xb0>)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	b923      	cbnz	r3, 8006c4a <_malloc_r+0x3e>
 8006c40:	4621      	mov	r1, r4
 8006c42:	4630      	mov	r0, r6
 8006c44:	f000 fb2a 	bl	800729c <_sbrk_r>
 8006c48:	6038      	str	r0, [r7, #0]
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f000 fb25 	bl	800729c <_sbrk_r>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d123      	bne.n	8006c9e <_malloc_r+0x92>
 8006c56:	230c      	movs	r3, #12
 8006c58:	4630      	mov	r0, r6
 8006c5a:	6033      	str	r3, [r6, #0]
 8006c5c:	f000 fbdc 	bl	8007418 <__malloc_unlock>
 8006c60:	e7e3      	b.n	8006c2a <_malloc_r+0x1e>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	1b5b      	subs	r3, r3, r5
 8006c66:	d417      	bmi.n	8006c98 <_malloc_r+0x8c>
 8006c68:	2b0b      	cmp	r3, #11
 8006c6a:	d903      	bls.n	8006c74 <_malloc_r+0x68>
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	441c      	add	r4, r3
 8006c70:	6025      	str	r5, [r4, #0]
 8006c72:	e004      	b.n	8006c7e <_malloc_r+0x72>
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	42a2      	cmp	r2, r4
 8006c78:	bf0c      	ite	eq
 8006c7a:	600b      	streq	r3, [r1, #0]
 8006c7c:	6053      	strne	r3, [r2, #4]
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f000 fbca 	bl	8007418 <__malloc_unlock>
 8006c84:	f104 000b 	add.w	r0, r4, #11
 8006c88:	1d23      	adds	r3, r4, #4
 8006c8a:	f020 0007 	bic.w	r0, r0, #7
 8006c8e:	1ac2      	subs	r2, r0, r3
 8006c90:	d0cc      	beq.n	8006c2c <_malloc_r+0x20>
 8006c92:	1a1b      	subs	r3, r3, r0
 8006c94:	50a3      	str	r3, [r4, r2]
 8006c96:	e7c9      	b.n	8006c2c <_malloc_r+0x20>
 8006c98:	4622      	mov	r2, r4
 8006c9a:	6864      	ldr	r4, [r4, #4]
 8006c9c:	e7cc      	b.n	8006c38 <_malloc_r+0x2c>
 8006c9e:	1cc4      	adds	r4, r0, #3
 8006ca0:	f024 0403 	bic.w	r4, r4, #3
 8006ca4:	42a0      	cmp	r0, r4
 8006ca6:	d0e3      	beq.n	8006c70 <_malloc_r+0x64>
 8006ca8:	1a21      	subs	r1, r4, r0
 8006caa:	4630      	mov	r0, r6
 8006cac:	f000 faf6 	bl	800729c <_sbrk_r>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d1dd      	bne.n	8006c70 <_malloc_r+0x64>
 8006cb4:	e7cf      	b.n	8006c56 <_malloc_r+0x4a>
 8006cb6:	bf00      	nop
 8006cb8:	200000b8 	.word	0x200000b8
 8006cbc:	200000bc 	.word	0x200000bc

08006cc0 <__sfputc_r>:
 8006cc0:	6893      	ldr	r3, [r2, #8]
 8006cc2:	b410      	push	{r4}
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	6093      	str	r3, [r2, #8]
 8006cca:	da07      	bge.n	8006cdc <__sfputc_r+0x1c>
 8006ccc:	6994      	ldr	r4, [r2, #24]
 8006cce:	42a3      	cmp	r3, r4
 8006cd0:	db01      	blt.n	8006cd6 <__sfputc_r+0x16>
 8006cd2:	290a      	cmp	r1, #10
 8006cd4:	d102      	bne.n	8006cdc <__sfputc_r+0x1c>
 8006cd6:	bc10      	pop	{r4}
 8006cd8:	f7ff bc6e 	b.w	80065b8 <__swbuf_r>
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	1c58      	adds	r0, r3, #1
 8006ce0:	6010      	str	r0, [r2, #0]
 8006ce2:	7019      	strb	r1, [r3, #0]
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	bc10      	pop	{r4}
 8006ce8:	4770      	bx	lr

08006cea <__sfputs_r>:
 8006cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cec:	4606      	mov	r6, r0
 8006cee:	460f      	mov	r7, r1
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	18d5      	adds	r5, r2, r3
 8006cf4:	42ac      	cmp	r4, r5
 8006cf6:	d101      	bne.n	8006cfc <__sfputs_r+0x12>
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	e007      	b.n	8006d0c <__sfputs_r+0x22>
 8006cfc:	463a      	mov	r2, r7
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d04:	f7ff ffdc 	bl	8006cc0 <__sfputc_r>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d1f3      	bne.n	8006cf4 <__sfputs_r+0xa>
 8006d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d10 <_vfiprintf_r>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	460d      	mov	r5, r1
 8006d16:	4614      	mov	r4, r2
 8006d18:	4698      	mov	r8, r3
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	b09d      	sub	sp, #116	; 0x74
 8006d1e:	b118      	cbz	r0, 8006d28 <_vfiprintf_r+0x18>
 8006d20:	6983      	ldr	r3, [r0, #24]
 8006d22:	b90b      	cbnz	r3, 8006d28 <_vfiprintf_r+0x18>
 8006d24:	f7ff fe22 	bl	800696c <__sinit>
 8006d28:	4b89      	ldr	r3, [pc, #548]	; (8006f50 <_vfiprintf_r+0x240>)
 8006d2a:	429d      	cmp	r5, r3
 8006d2c:	d11b      	bne.n	8006d66 <_vfiprintf_r+0x56>
 8006d2e:	6875      	ldr	r5, [r6, #4]
 8006d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d32:	07d9      	lsls	r1, r3, #31
 8006d34:	d405      	bmi.n	8006d42 <_vfiprintf_r+0x32>
 8006d36:	89ab      	ldrh	r3, [r5, #12]
 8006d38:	059a      	lsls	r2, r3, #22
 8006d3a:	d402      	bmi.n	8006d42 <_vfiprintf_r+0x32>
 8006d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d3e:	f7ff feb3 	bl	8006aa8 <__retarget_lock_acquire_recursive>
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	071b      	lsls	r3, r3, #28
 8006d46:	d501      	bpl.n	8006d4c <_vfiprintf_r+0x3c>
 8006d48:	692b      	ldr	r3, [r5, #16]
 8006d4a:	b9eb      	cbnz	r3, 8006d88 <_vfiprintf_r+0x78>
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7ff fc84 	bl	800665c <__swsetup_r>
 8006d54:	b1c0      	cbz	r0, 8006d88 <_vfiprintf_r+0x78>
 8006d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d58:	07dc      	lsls	r4, r3, #31
 8006d5a:	d50e      	bpl.n	8006d7a <_vfiprintf_r+0x6a>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	b01d      	add	sp, #116	; 0x74
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	4b7b      	ldr	r3, [pc, #492]	; (8006f54 <_vfiprintf_r+0x244>)
 8006d68:	429d      	cmp	r5, r3
 8006d6a:	d101      	bne.n	8006d70 <_vfiprintf_r+0x60>
 8006d6c:	68b5      	ldr	r5, [r6, #8]
 8006d6e:	e7df      	b.n	8006d30 <_vfiprintf_r+0x20>
 8006d70:	4b79      	ldr	r3, [pc, #484]	; (8006f58 <_vfiprintf_r+0x248>)
 8006d72:	429d      	cmp	r5, r3
 8006d74:	bf08      	it	eq
 8006d76:	68f5      	ldreq	r5, [r6, #12]
 8006d78:	e7da      	b.n	8006d30 <_vfiprintf_r+0x20>
 8006d7a:	89ab      	ldrh	r3, [r5, #12]
 8006d7c:	0598      	lsls	r0, r3, #22
 8006d7e:	d4ed      	bmi.n	8006d5c <_vfiprintf_r+0x4c>
 8006d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d82:	f7ff fe92 	bl	8006aaa <__retarget_lock_release_recursive>
 8006d86:	e7e9      	b.n	8006d5c <_vfiprintf_r+0x4c>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d92:	2330      	movs	r3, #48	; 0x30
 8006d94:	f04f 0901 	mov.w	r9, #1
 8006d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f5c <_vfiprintf_r+0x24c>
 8006da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006da4:	4623      	mov	r3, r4
 8006da6:	469a      	mov	sl, r3
 8006da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dac:	b10a      	cbz	r2, 8006db2 <_vfiprintf_r+0xa2>
 8006dae:	2a25      	cmp	r2, #37	; 0x25
 8006db0:	d1f9      	bne.n	8006da6 <_vfiprintf_r+0x96>
 8006db2:	ebba 0b04 	subs.w	fp, sl, r4
 8006db6:	d00b      	beq.n	8006dd0 <_vfiprintf_r+0xc0>
 8006db8:	465b      	mov	r3, fp
 8006dba:	4622      	mov	r2, r4
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f7ff ff93 	bl	8006cea <__sfputs_r>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f000 80aa 	beq.w	8006f1e <_vfiprintf_r+0x20e>
 8006dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dcc:	445a      	add	r2, fp
 8006dce:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80a2 	beq.w	8006f1e <_vfiprintf_r+0x20e>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006de4:	f10a 0a01 	add.w	sl, sl, #1
 8006de8:	9304      	str	r3, [sp, #16]
 8006dea:	9307      	str	r3, [sp, #28]
 8006dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006df0:	931a      	str	r3, [sp, #104]	; 0x68
 8006df2:	4654      	mov	r4, sl
 8006df4:	2205      	movs	r2, #5
 8006df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfa:	4858      	ldr	r0, [pc, #352]	; (8006f5c <_vfiprintf_r+0x24c>)
 8006dfc:	f000 faf8 	bl	80073f0 <memchr>
 8006e00:	9a04      	ldr	r2, [sp, #16]
 8006e02:	b9d8      	cbnz	r0, 8006e3c <_vfiprintf_r+0x12c>
 8006e04:	06d1      	lsls	r1, r2, #27
 8006e06:	bf44      	itt	mi
 8006e08:	2320      	movmi	r3, #32
 8006e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e0e:	0713      	lsls	r3, r2, #28
 8006e10:	bf44      	itt	mi
 8006e12:	232b      	movmi	r3, #43	; 0x2b
 8006e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e18:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e1e:	d015      	beq.n	8006e4c <_vfiprintf_r+0x13c>
 8006e20:	4654      	mov	r4, sl
 8006e22:	2000      	movs	r0, #0
 8006e24:	f04f 0c0a 	mov.w	ip, #10
 8006e28:	9a07      	ldr	r2, [sp, #28]
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e30:	3b30      	subs	r3, #48	; 0x30
 8006e32:	2b09      	cmp	r3, #9
 8006e34:	d94e      	bls.n	8006ed4 <_vfiprintf_r+0x1c4>
 8006e36:	b1b0      	cbz	r0, 8006e66 <_vfiprintf_r+0x156>
 8006e38:	9207      	str	r2, [sp, #28]
 8006e3a:	e014      	b.n	8006e66 <_vfiprintf_r+0x156>
 8006e3c:	eba0 0308 	sub.w	r3, r0, r8
 8006e40:	fa09 f303 	lsl.w	r3, r9, r3
 8006e44:	4313      	orrs	r3, r2
 8006e46:	46a2      	mov	sl, r4
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	e7d2      	b.n	8006df2 <_vfiprintf_r+0xe2>
 8006e4c:	9b03      	ldr	r3, [sp, #12]
 8006e4e:	1d19      	adds	r1, r3, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	9103      	str	r1, [sp, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	bfbb      	ittet	lt
 8006e58:	425b      	neglt	r3, r3
 8006e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e5e:	9307      	strge	r3, [sp, #28]
 8006e60:	9307      	strlt	r3, [sp, #28]
 8006e62:	bfb8      	it	lt
 8006e64:	9204      	strlt	r2, [sp, #16]
 8006e66:	7823      	ldrb	r3, [r4, #0]
 8006e68:	2b2e      	cmp	r3, #46	; 0x2e
 8006e6a:	d10c      	bne.n	8006e86 <_vfiprintf_r+0x176>
 8006e6c:	7863      	ldrb	r3, [r4, #1]
 8006e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e70:	d135      	bne.n	8006ede <_vfiprintf_r+0x1ce>
 8006e72:	9b03      	ldr	r3, [sp, #12]
 8006e74:	3402      	adds	r4, #2
 8006e76:	1d1a      	adds	r2, r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	9203      	str	r2, [sp, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bfb8      	it	lt
 8006e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f6c <_vfiprintf_r+0x25c>
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	7821      	ldrb	r1, [r4, #0]
 8006e90:	f000 faae 	bl	80073f0 <memchr>
 8006e94:	b140      	cbz	r0, 8006ea8 <_vfiprintf_r+0x198>
 8006e96:	2340      	movs	r3, #64	; 0x40
 8006e98:	eba0 000a 	sub.w	r0, r0, sl
 8006e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8006ea0:	9b04      	ldr	r3, [sp, #16]
 8006ea2:	3401      	adds	r4, #1
 8006ea4:	4303      	orrs	r3, r0
 8006ea6:	9304      	str	r3, [sp, #16]
 8006ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eac:	2206      	movs	r2, #6
 8006eae:	482c      	ldr	r0, [pc, #176]	; (8006f60 <_vfiprintf_r+0x250>)
 8006eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eb4:	f000 fa9c 	bl	80073f0 <memchr>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d03f      	beq.n	8006f3c <_vfiprintf_r+0x22c>
 8006ebc:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <_vfiprintf_r+0x254>)
 8006ebe:	bb1b      	cbnz	r3, 8006f08 <_vfiprintf_r+0x1f8>
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	3307      	adds	r3, #7
 8006ec4:	f023 0307 	bic.w	r3, r3, #7
 8006ec8:	3308      	adds	r3, #8
 8006eca:	9303      	str	r3, [sp, #12]
 8006ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ece:	443b      	add	r3, r7
 8006ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed2:	e767      	b.n	8006da4 <_vfiprintf_r+0x94>
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006edc:	e7a5      	b.n	8006e2a <_vfiprintf_r+0x11a>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f04f 0c0a 	mov.w	ip, #10
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	3401      	adds	r4, #1
 8006ee8:	9305      	str	r3, [sp, #20]
 8006eea:	4620      	mov	r0, r4
 8006eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ef0:	3a30      	subs	r2, #48	; 0x30
 8006ef2:	2a09      	cmp	r2, #9
 8006ef4:	d903      	bls.n	8006efe <_vfiprintf_r+0x1ee>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0c5      	beq.n	8006e86 <_vfiprintf_r+0x176>
 8006efa:	9105      	str	r1, [sp, #20]
 8006efc:	e7c3      	b.n	8006e86 <_vfiprintf_r+0x176>
 8006efe:	4604      	mov	r4, r0
 8006f00:	2301      	movs	r3, #1
 8006f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f06:	e7f0      	b.n	8006eea <_vfiprintf_r+0x1da>
 8006f08:	ab03      	add	r3, sp, #12
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	462a      	mov	r2, r5
 8006f0e:	4630      	mov	r0, r6
 8006f10:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <_vfiprintf_r+0x258>)
 8006f12:	a904      	add	r1, sp, #16
 8006f14:	f3af 8000 	nop.w
 8006f18:	4607      	mov	r7, r0
 8006f1a:	1c78      	adds	r0, r7, #1
 8006f1c:	d1d6      	bne.n	8006ecc <_vfiprintf_r+0x1bc>
 8006f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f20:	07d9      	lsls	r1, r3, #31
 8006f22:	d405      	bmi.n	8006f30 <_vfiprintf_r+0x220>
 8006f24:	89ab      	ldrh	r3, [r5, #12]
 8006f26:	059a      	lsls	r2, r3, #22
 8006f28:	d402      	bmi.n	8006f30 <_vfiprintf_r+0x220>
 8006f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f2c:	f7ff fdbd 	bl	8006aaa <__retarget_lock_release_recursive>
 8006f30:	89ab      	ldrh	r3, [r5, #12]
 8006f32:	065b      	lsls	r3, r3, #25
 8006f34:	f53f af12 	bmi.w	8006d5c <_vfiprintf_r+0x4c>
 8006f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f3a:	e711      	b.n	8006d60 <_vfiprintf_r+0x50>
 8006f3c:	ab03      	add	r3, sp, #12
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	462a      	mov	r2, r5
 8006f42:	4630      	mov	r0, r6
 8006f44:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <_vfiprintf_r+0x258>)
 8006f46:	a904      	add	r1, sp, #16
 8006f48:	f000 f882 	bl	8007050 <_printf_i>
 8006f4c:	e7e4      	b.n	8006f18 <_vfiprintf_r+0x208>
 8006f4e:	bf00      	nop
 8006f50:	08007a54 	.word	0x08007a54
 8006f54:	08007a74 	.word	0x08007a74
 8006f58:	08007a34 	.word	0x08007a34
 8006f5c:	08007a94 	.word	0x08007a94
 8006f60:	08007a9e 	.word	0x08007a9e
 8006f64:	00000000 	.word	0x00000000
 8006f68:	08006ceb 	.word	0x08006ceb
 8006f6c:	08007a9a 	.word	0x08007a9a

08006f70 <_printf_common>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	4616      	mov	r6, r2
 8006f76:	4699      	mov	r9, r3
 8006f78:	688a      	ldr	r2, [r1, #8]
 8006f7a:	690b      	ldr	r3, [r1, #16]
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	bfb8      	it	lt
 8006f82:	4613      	movlt	r3, r2
 8006f84:	6033      	str	r3, [r6, #0]
 8006f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f90:	b10a      	cbz	r2, 8006f96 <_printf_common+0x26>
 8006f92:	3301      	adds	r3, #1
 8006f94:	6033      	str	r3, [r6, #0]
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	0699      	lsls	r1, r3, #26
 8006f9a:	bf42      	ittt	mi
 8006f9c:	6833      	ldrmi	r3, [r6, #0]
 8006f9e:	3302      	addmi	r3, #2
 8006fa0:	6033      	strmi	r3, [r6, #0]
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	f015 0506 	ands.w	r5, r5, #6
 8006fa8:	d106      	bne.n	8006fb8 <_printf_common+0x48>
 8006faa:	f104 0a19 	add.w	sl, r4, #25
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	6832      	ldr	r2, [r6, #0]
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dc28      	bgt.n	800700a <_printf_common+0x9a>
 8006fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fbc:	1e13      	subs	r3, r2, #0
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	bf18      	it	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	0692      	lsls	r2, r2, #26
 8006fc6:	d42d      	bmi.n	8007024 <_printf_common+0xb4>
 8006fc8:	4649      	mov	r1, r9
 8006fca:	4638      	mov	r0, r7
 8006fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fd0:	47c0      	blx	r8
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d020      	beq.n	8007018 <_printf_common+0xa8>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	68e5      	ldr	r5, [r4, #12]
 8006fda:	f003 0306 	and.w	r3, r3, #6
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	bf18      	it	ne
 8006fe2:	2500      	movne	r5, #0
 8006fe4:	6832      	ldr	r2, [r6, #0]
 8006fe6:	f04f 0600 	mov.w	r6, #0
 8006fea:	68a3      	ldr	r3, [r4, #8]
 8006fec:	bf08      	it	eq
 8006fee:	1aad      	subeq	r5, r5, r2
 8006ff0:	6922      	ldr	r2, [r4, #16]
 8006ff2:	bf08      	it	eq
 8006ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	bfc4      	itt	gt
 8006ffc:	1a9b      	subgt	r3, r3, r2
 8006ffe:	18ed      	addgt	r5, r5, r3
 8007000:	341a      	adds	r4, #26
 8007002:	42b5      	cmp	r5, r6
 8007004:	d11a      	bne.n	800703c <_printf_common+0xcc>
 8007006:	2000      	movs	r0, #0
 8007008:	e008      	b.n	800701c <_printf_common+0xac>
 800700a:	2301      	movs	r3, #1
 800700c:	4652      	mov	r2, sl
 800700e:	4649      	mov	r1, r9
 8007010:	4638      	mov	r0, r7
 8007012:	47c0      	blx	r8
 8007014:	3001      	adds	r0, #1
 8007016:	d103      	bne.n	8007020 <_printf_common+0xb0>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007020:	3501      	adds	r5, #1
 8007022:	e7c4      	b.n	8006fae <_printf_common+0x3e>
 8007024:	2030      	movs	r0, #48	; 0x30
 8007026:	18e1      	adds	r1, r4, r3
 8007028:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007032:	4422      	add	r2, r4
 8007034:	3302      	adds	r3, #2
 8007036:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800703a:	e7c5      	b.n	8006fc8 <_printf_common+0x58>
 800703c:	2301      	movs	r3, #1
 800703e:	4622      	mov	r2, r4
 8007040:	4649      	mov	r1, r9
 8007042:	4638      	mov	r0, r7
 8007044:	47c0      	blx	r8
 8007046:	3001      	adds	r0, #1
 8007048:	d0e6      	beq.n	8007018 <_printf_common+0xa8>
 800704a:	3601      	adds	r6, #1
 800704c:	e7d9      	b.n	8007002 <_printf_common+0x92>
	...

08007050 <_printf_i>:
 8007050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	460c      	mov	r4, r1
 8007056:	7e27      	ldrb	r7, [r4, #24]
 8007058:	4691      	mov	r9, r2
 800705a:	2f78      	cmp	r7, #120	; 0x78
 800705c:	4680      	mov	r8, r0
 800705e:	469a      	mov	sl, r3
 8007060:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007062:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007066:	d807      	bhi.n	8007078 <_printf_i+0x28>
 8007068:	2f62      	cmp	r7, #98	; 0x62
 800706a:	d80a      	bhi.n	8007082 <_printf_i+0x32>
 800706c:	2f00      	cmp	r7, #0
 800706e:	f000 80d9 	beq.w	8007224 <_printf_i+0x1d4>
 8007072:	2f58      	cmp	r7, #88	; 0x58
 8007074:	f000 80a4 	beq.w	80071c0 <_printf_i+0x170>
 8007078:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800707c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007080:	e03a      	b.n	80070f8 <_printf_i+0xa8>
 8007082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007086:	2b15      	cmp	r3, #21
 8007088:	d8f6      	bhi.n	8007078 <_printf_i+0x28>
 800708a:	a001      	add	r0, pc, #4	; (adr r0, 8007090 <_printf_i+0x40>)
 800708c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007090:	080070e9 	.word	0x080070e9
 8007094:	080070fd 	.word	0x080070fd
 8007098:	08007079 	.word	0x08007079
 800709c:	08007079 	.word	0x08007079
 80070a0:	08007079 	.word	0x08007079
 80070a4:	08007079 	.word	0x08007079
 80070a8:	080070fd 	.word	0x080070fd
 80070ac:	08007079 	.word	0x08007079
 80070b0:	08007079 	.word	0x08007079
 80070b4:	08007079 	.word	0x08007079
 80070b8:	08007079 	.word	0x08007079
 80070bc:	0800720b 	.word	0x0800720b
 80070c0:	0800712d 	.word	0x0800712d
 80070c4:	080071ed 	.word	0x080071ed
 80070c8:	08007079 	.word	0x08007079
 80070cc:	08007079 	.word	0x08007079
 80070d0:	0800722d 	.word	0x0800722d
 80070d4:	08007079 	.word	0x08007079
 80070d8:	0800712d 	.word	0x0800712d
 80070dc:	08007079 	.word	0x08007079
 80070e0:	08007079 	.word	0x08007079
 80070e4:	080071f5 	.word	0x080071f5
 80070e8:	680b      	ldr	r3, [r1, #0]
 80070ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070ee:	1d1a      	adds	r2, r3, #4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	600a      	str	r2, [r1, #0]
 80070f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070f8:	2301      	movs	r3, #1
 80070fa:	e0a4      	b.n	8007246 <_printf_i+0x1f6>
 80070fc:	6825      	ldr	r5, [r4, #0]
 80070fe:	6808      	ldr	r0, [r1, #0]
 8007100:	062e      	lsls	r6, r5, #24
 8007102:	f100 0304 	add.w	r3, r0, #4
 8007106:	d50a      	bpl.n	800711e <_printf_i+0xce>
 8007108:	6805      	ldr	r5, [r0, #0]
 800710a:	600b      	str	r3, [r1, #0]
 800710c:	2d00      	cmp	r5, #0
 800710e:	da03      	bge.n	8007118 <_printf_i+0xc8>
 8007110:	232d      	movs	r3, #45	; 0x2d
 8007112:	426d      	negs	r5, r5
 8007114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007118:	230a      	movs	r3, #10
 800711a:	485e      	ldr	r0, [pc, #376]	; (8007294 <_printf_i+0x244>)
 800711c:	e019      	b.n	8007152 <_printf_i+0x102>
 800711e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007122:	6805      	ldr	r5, [r0, #0]
 8007124:	600b      	str	r3, [r1, #0]
 8007126:	bf18      	it	ne
 8007128:	b22d      	sxthne	r5, r5
 800712a:	e7ef      	b.n	800710c <_printf_i+0xbc>
 800712c:	680b      	ldr	r3, [r1, #0]
 800712e:	6825      	ldr	r5, [r4, #0]
 8007130:	1d18      	adds	r0, r3, #4
 8007132:	6008      	str	r0, [r1, #0]
 8007134:	0628      	lsls	r0, r5, #24
 8007136:	d501      	bpl.n	800713c <_printf_i+0xec>
 8007138:	681d      	ldr	r5, [r3, #0]
 800713a:	e002      	b.n	8007142 <_printf_i+0xf2>
 800713c:	0669      	lsls	r1, r5, #25
 800713e:	d5fb      	bpl.n	8007138 <_printf_i+0xe8>
 8007140:	881d      	ldrh	r5, [r3, #0]
 8007142:	2f6f      	cmp	r7, #111	; 0x6f
 8007144:	bf0c      	ite	eq
 8007146:	2308      	moveq	r3, #8
 8007148:	230a      	movne	r3, #10
 800714a:	4852      	ldr	r0, [pc, #328]	; (8007294 <_printf_i+0x244>)
 800714c:	2100      	movs	r1, #0
 800714e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007152:	6866      	ldr	r6, [r4, #4]
 8007154:	2e00      	cmp	r6, #0
 8007156:	bfa8      	it	ge
 8007158:	6821      	ldrge	r1, [r4, #0]
 800715a:	60a6      	str	r6, [r4, #8]
 800715c:	bfa4      	itt	ge
 800715e:	f021 0104 	bicge.w	r1, r1, #4
 8007162:	6021      	strge	r1, [r4, #0]
 8007164:	b90d      	cbnz	r5, 800716a <_printf_i+0x11a>
 8007166:	2e00      	cmp	r6, #0
 8007168:	d04d      	beq.n	8007206 <_printf_i+0x1b6>
 800716a:	4616      	mov	r6, r2
 800716c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007170:	fb03 5711 	mls	r7, r3, r1, r5
 8007174:	5dc7      	ldrb	r7, [r0, r7]
 8007176:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800717a:	462f      	mov	r7, r5
 800717c:	42bb      	cmp	r3, r7
 800717e:	460d      	mov	r5, r1
 8007180:	d9f4      	bls.n	800716c <_printf_i+0x11c>
 8007182:	2b08      	cmp	r3, #8
 8007184:	d10b      	bne.n	800719e <_printf_i+0x14e>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	07df      	lsls	r7, r3, #31
 800718a:	d508      	bpl.n	800719e <_printf_i+0x14e>
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	6861      	ldr	r1, [r4, #4]
 8007190:	4299      	cmp	r1, r3
 8007192:	bfde      	ittt	le
 8007194:	2330      	movle	r3, #48	; 0x30
 8007196:	f806 3c01 	strble.w	r3, [r6, #-1]
 800719a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800719e:	1b92      	subs	r2, r2, r6
 80071a0:	6122      	str	r2, [r4, #16]
 80071a2:	464b      	mov	r3, r9
 80071a4:	4621      	mov	r1, r4
 80071a6:	4640      	mov	r0, r8
 80071a8:	f8cd a000 	str.w	sl, [sp]
 80071ac:	aa03      	add	r2, sp, #12
 80071ae:	f7ff fedf 	bl	8006f70 <_printf_common>
 80071b2:	3001      	adds	r0, #1
 80071b4:	d14c      	bne.n	8007250 <_printf_i+0x200>
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	b004      	add	sp, #16
 80071bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c0:	4834      	ldr	r0, [pc, #208]	; (8007294 <_printf_i+0x244>)
 80071c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071c6:	680e      	ldr	r6, [r1, #0]
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80071ce:	061f      	lsls	r7, r3, #24
 80071d0:	600e      	str	r6, [r1, #0]
 80071d2:	d514      	bpl.n	80071fe <_printf_i+0x1ae>
 80071d4:	07d9      	lsls	r1, r3, #31
 80071d6:	bf44      	itt	mi
 80071d8:	f043 0320 	orrmi.w	r3, r3, #32
 80071dc:	6023      	strmi	r3, [r4, #0]
 80071de:	b91d      	cbnz	r5, 80071e8 <_printf_i+0x198>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	f023 0320 	bic.w	r3, r3, #32
 80071e6:	6023      	str	r3, [r4, #0]
 80071e8:	2310      	movs	r3, #16
 80071ea:	e7af      	b.n	800714c <_printf_i+0xfc>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	f043 0320 	orr.w	r3, r3, #32
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	2378      	movs	r3, #120	; 0x78
 80071f6:	4828      	ldr	r0, [pc, #160]	; (8007298 <_printf_i+0x248>)
 80071f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071fc:	e7e3      	b.n	80071c6 <_printf_i+0x176>
 80071fe:	065e      	lsls	r6, r3, #25
 8007200:	bf48      	it	mi
 8007202:	b2ad      	uxthmi	r5, r5
 8007204:	e7e6      	b.n	80071d4 <_printf_i+0x184>
 8007206:	4616      	mov	r6, r2
 8007208:	e7bb      	b.n	8007182 <_printf_i+0x132>
 800720a:	680b      	ldr	r3, [r1, #0]
 800720c:	6826      	ldr	r6, [r4, #0]
 800720e:	1d1d      	adds	r5, r3, #4
 8007210:	6960      	ldr	r0, [r4, #20]
 8007212:	600d      	str	r5, [r1, #0]
 8007214:	0635      	lsls	r5, r6, #24
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	d501      	bpl.n	800721e <_printf_i+0x1ce>
 800721a:	6018      	str	r0, [r3, #0]
 800721c:	e002      	b.n	8007224 <_printf_i+0x1d4>
 800721e:	0671      	lsls	r1, r6, #25
 8007220:	d5fb      	bpl.n	800721a <_printf_i+0x1ca>
 8007222:	8018      	strh	r0, [r3, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	4616      	mov	r6, r2
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	e7ba      	b.n	80071a2 <_printf_i+0x152>
 800722c:	680b      	ldr	r3, [r1, #0]
 800722e:	1d1a      	adds	r2, r3, #4
 8007230:	600a      	str	r2, [r1, #0]
 8007232:	681e      	ldr	r6, [r3, #0]
 8007234:	2100      	movs	r1, #0
 8007236:	4630      	mov	r0, r6
 8007238:	6862      	ldr	r2, [r4, #4]
 800723a:	f000 f8d9 	bl	80073f0 <memchr>
 800723e:	b108      	cbz	r0, 8007244 <_printf_i+0x1f4>
 8007240:	1b80      	subs	r0, r0, r6
 8007242:	6060      	str	r0, [r4, #4]
 8007244:	6863      	ldr	r3, [r4, #4]
 8007246:	6123      	str	r3, [r4, #16]
 8007248:	2300      	movs	r3, #0
 800724a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800724e:	e7a8      	b.n	80071a2 <_printf_i+0x152>
 8007250:	4632      	mov	r2, r6
 8007252:	4649      	mov	r1, r9
 8007254:	4640      	mov	r0, r8
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	47d0      	blx	sl
 800725a:	3001      	adds	r0, #1
 800725c:	d0ab      	beq.n	80071b6 <_printf_i+0x166>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	079b      	lsls	r3, r3, #30
 8007262:	d413      	bmi.n	800728c <_printf_i+0x23c>
 8007264:	68e0      	ldr	r0, [r4, #12]
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	4298      	cmp	r0, r3
 800726a:	bfb8      	it	lt
 800726c:	4618      	movlt	r0, r3
 800726e:	e7a4      	b.n	80071ba <_printf_i+0x16a>
 8007270:	2301      	movs	r3, #1
 8007272:	4632      	mov	r2, r6
 8007274:	4649      	mov	r1, r9
 8007276:	4640      	mov	r0, r8
 8007278:	47d0      	blx	sl
 800727a:	3001      	adds	r0, #1
 800727c:	d09b      	beq.n	80071b6 <_printf_i+0x166>
 800727e:	3501      	adds	r5, #1
 8007280:	68e3      	ldr	r3, [r4, #12]
 8007282:	9903      	ldr	r1, [sp, #12]
 8007284:	1a5b      	subs	r3, r3, r1
 8007286:	42ab      	cmp	r3, r5
 8007288:	dcf2      	bgt.n	8007270 <_printf_i+0x220>
 800728a:	e7eb      	b.n	8007264 <_printf_i+0x214>
 800728c:	2500      	movs	r5, #0
 800728e:	f104 0619 	add.w	r6, r4, #25
 8007292:	e7f5      	b.n	8007280 <_printf_i+0x230>
 8007294:	08007aa5 	.word	0x08007aa5
 8007298:	08007ab6 	.word	0x08007ab6

0800729c <_sbrk_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	2300      	movs	r3, #0
 80072a0:	4d05      	ldr	r5, [pc, #20]	; (80072b8 <_sbrk_r+0x1c>)
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7fa fbbc 	bl	8001a24 <_sbrk>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_sbrk_r+0x1a>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_sbrk_r+0x1a>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	2000044c 	.word	0x2000044c

080072bc <__sread>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	f000 f8ae 	bl	8007424 <_read_r>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	bfab      	itete	ge
 80072cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072ce:	89a3      	ldrhlt	r3, [r4, #12]
 80072d0:	181b      	addge	r3, r3, r0
 80072d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072d6:	bfac      	ite	ge
 80072d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80072da:	81a3      	strhlt	r3, [r4, #12]
 80072dc:	bd10      	pop	{r4, pc}

080072de <__swrite>:
 80072de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e2:	461f      	mov	r7, r3
 80072e4:	898b      	ldrh	r3, [r1, #12]
 80072e6:	4605      	mov	r5, r0
 80072e8:	05db      	lsls	r3, r3, #23
 80072ea:	460c      	mov	r4, r1
 80072ec:	4616      	mov	r6, r2
 80072ee:	d505      	bpl.n	80072fc <__swrite+0x1e>
 80072f0:	2302      	movs	r3, #2
 80072f2:	2200      	movs	r2, #0
 80072f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f8:	f000 f868 	bl	80073cc <_lseek_r>
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	4632      	mov	r2, r6
 8007300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	4628      	mov	r0, r5
 8007308:	463b      	mov	r3, r7
 800730a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007312:	f000 b817 	b.w	8007344 <_write_r>

08007316 <__sseek>:
 8007316:	b510      	push	{r4, lr}
 8007318:	460c      	mov	r4, r1
 800731a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800731e:	f000 f855 	bl	80073cc <_lseek_r>
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	bf15      	itete	ne
 8007328:	6560      	strne	r0, [r4, #84]	; 0x54
 800732a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800732e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007332:	81a3      	strheq	r3, [r4, #12]
 8007334:	bf18      	it	ne
 8007336:	81a3      	strhne	r3, [r4, #12]
 8007338:	bd10      	pop	{r4, pc}

0800733a <__sclose>:
 800733a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800733e:	f000 b813 	b.w	8007368 <_close_r>
	...

08007344 <_write_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	2200      	movs	r2, #0
 800734e:	4d05      	ldr	r5, [pc, #20]	; (8007364 <_write_r+0x20>)
 8007350:	602a      	str	r2, [r5, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f7fa fb19 	bl	800198a <_write>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d102      	bne.n	8007362 <_write_r+0x1e>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b103      	cbz	r3, 8007362 <_write_r+0x1e>
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	2000044c 	.word	0x2000044c

08007368 <_close_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	2300      	movs	r3, #0
 800736c:	4d05      	ldr	r5, [pc, #20]	; (8007384 <_close_r+0x1c>)
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	f7fa fb25 	bl	80019c2 <_close>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_close_r+0x1a>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_close_r+0x1a>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	2000044c 	.word	0x2000044c

08007388 <_fstat_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	2300      	movs	r3, #0
 800738c:	4d06      	ldr	r5, [pc, #24]	; (80073a8 <_fstat_r+0x20>)
 800738e:	4604      	mov	r4, r0
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	602b      	str	r3, [r5, #0]
 8007396:	f7fa fb1f 	bl	80019d8 <_fstat>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d102      	bne.n	80073a4 <_fstat_r+0x1c>
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	b103      	cbz	r3, 80073a4 <_fstat_r+0x1c>
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
 80073a6:	bf00      	nop
 80073a8:	2000044c 	.word	0x2000044c

080073ac <_isatty_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	2300      	movs	r3, #0
 80073b0:	4d05      	ldr	r5, [pc, #20]	; (80073c8 <_isatty_r+0x1c>)
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7fa fb1d 	bl	80019f6 <_isatty>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_isatty_r+0x1a>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_isatty_r+0x1a>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	2000044c 	.word	0x2000044c

080073cc <_lseek_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	2200      	movs	r2, #0
 80073d6:	4d05      	ldr	r5, [pc, #20]	; (80073ec <_lseek_r+0x20>)
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7fa fb15 	bl	8001a0a <_lseek>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_lseek_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_lseek_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	2000044c 	.word	0x2000044c

080073f0 <memchr>:
 80073f0:	4603      	mov	r3, r0
 80073f2:	b510      	push	{r4, lr}
 80073f4:	b2c9      	uxtb	r1, r1
 80073f6:	4402      	add	r2, r0
 80073f8:	4293      	cmp	r3, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	d101      	bne.n	8007402 <memchr+0x12>
 80073fe:	2000      	movs	r0, #0
 8007400:	e003      	b.n	800740a <memchr+0x1a>
 8007402:	7804      	ldrb	r4, [r0, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	428c      	cmp	r4, r1
 8007408:	d1f6      	bne.n	80073f8 <memchr+0x8>
 800740a:	bd10      	pop	{r4, pc}

0800740c <__malloc_lock>:
 800740c:	4801      	ldr	r0, [pc, #4]	; (8007414 <__malloc_lock+0x8>)
 800740e:	f7ff bb4b 	b.w	8006aa8 <__retarget_lock_acquire_recursive>
 8007412:	bf00      	nop
 8007414:	20000444 	.word	0x20000444

08007418 <__malloc_unlock>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__malloc_unlock+0x8>)
 800741a:	f7ff bb46 	b.w	8006aaa <__retarget_lock_release_recursive>
 800741e:	bf00      	nop
 8007420:	20000444 	.word	0x20000444

08007424 <_read_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4604      	mov	r4, r0
 8007428:	4608      	mov	r0, r1
 800742a:	4611      	mov	r1, r2
 800742c:	2200      	movs	r2, #0
 800742e:	4d05      	ldr	r5, [pc, #20]	; (8007444 <_read_r+0x20>)
 8007430:	602a      	str	r2, [r5, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f7fa fa8c 	bl	8001950 <_read>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_read_r+0x1e>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_read_r+0x1e>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	2000044c 	.word	0x2000044c

08007448 <_init>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr

08007454 <_fini>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	bf00      	nop
 8007458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745a:	bc08      	pop	{r3}
 800745c:	469e      	mov	lr, r3
 800745e:	4770      	bx	lr
