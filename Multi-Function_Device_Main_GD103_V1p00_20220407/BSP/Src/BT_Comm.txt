/**
* Multi-function Device Main Program
 *
 * Copyright 2021 by Home beauty Device Team, CLASSYS Inc.
 * All rights reserved.
 *
 * IOExpander_I2C.c : This file contains functions for I/O Expander via I2C interface
 *
 * @author     Park, Sungjun
 * @version    V0.00
 * @date       09.06.2021
 */
/* includes ------------------------------------------------------------------*/
#include "Voice_I2C.h"
#include "main.h"
#include <stdio.h>
#include <string.h>
#include "i2c.h"
#include "gpio.h"
#include "usart.h"
#include "BT_Comm.h"
#include "SystemProcess.h"
/* Private define ------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
extern uint8_t Cnt_Rx1Uart;
extern uint8_t BtCnt_Rx1Uart;
extern uint8_t BtRx1Packet[16];
extern uint8_t e_time;

const char *serial_number = "CHD210100001";
System_datatypedef	data0;
System_datatypedef 	data1;

/* functions -----------------------------------------------------------------*/
void BT_Proc(void)
{
	  //printf("%x, %x, %x, %x, %x, %x, %x, %x ; %d \r\n", BtRx1Packet[0], BtRx1Packet[1], BtRx1Packet[2], BtRx1Packet[3], BtRx1Packet[4],BtRx1Packet[5],BtRx1Packet[6],BtRx1Packet[7], BtCnt_Rx1Uart+1);
	  //memset(BtRx1Packet, 0, sizeof(BtRx1Packet));

	  if(BtRx1Packet[0] == START){
		  if(BtRx1Packet[1] == REQ_PACK_SIZE){ //2
			  if(BtRx1Packet[3] == CheckSumModVerify(BtRx1Packet, BtRx1Packet[1]-2)){
				  Chk_Cmd(BtRx1Packet[2]);
				  memset(BtRx1Packet, 0, sizeof(BtRx1Packet));
			  }else{
				  printf("checksum error \r\n");
				  memset(BtRx1Packet, 0, sizeof(BtRx1Packet));
			  }
		  }
		  else if(BtRx1Packet[1] == WRITE_SYS_PACK_SIZE){ //3
			  if(BtRx1Packet[4] == CheckSumModVerify(BtRx1Packet, BtRx1Packet[1]-2)){
				  Chk_Cmd(BtRx1Packet[2]);
				  memset(BtRx1Packet, 0, sizeof(BtRx1Packet));
			  }else{
				  printf("checksum error \r\n");
				  memset(BtRx1Packet, 0, sizeof(BtRx1Packet));
			  }
		  }

		  else if(BtRx1Packet[1] == SYSE_PACK_SIZE){ //6
			  if(BtRx1Packet[7] == CheckSumModVerify(BtRx1Packet, BtRx1Packet[1]-2)){
				  Chk_Cmd(BtRx1Packet[2]);
				  memset(BtRx1Packet, 0, sizeof(BtRx1Packet));
			  }else{
				  printf("checksum error \r\n");
				  memset(BtRx1Packet, 0, sizeof(BtRx1Packet));
			  }
		  }
		  else{
			  printf("Undefined packet size. \r\n");
			  memset(BtRx1Packet, 0, sizeof(BtRx1Packet));
		  }
	  }else{
		  //printf("Start is not STX. \r\n");
		  memset(BtRx1Packet, 0, sizeof(BtRx1Packet));
		  //memset(ResPacket, 0, sizeof(ResPacket));
	  }

}


void Chk_Cmd(uint8_t cmd){
	BT_Packet packet;
	uint8_t data_size;
	switch(cmd){
	case REQ_SERIALNUMBER:
		printf("RESP_SERIALNUMBER\r\n");
		data_size = 12;
		packet.HEADER = START;
		packet.LENGTH = 0x0E;
		packet.COMMAND = RESP_SERIALNUMBER;
		for(uint8_t i=0; i<REQ_SER_NUM; i++){
			packet.DATA[i] = serial_number[i];
			printf("data[%d] : %0x\r\n",i, packet.DATA[i]);
 		}
		packet.CHECKSUM = CheckSumModVerify(&packet, packet.LENGTH);
		send_transmit(&packet, data_size);
		break;

	case REQ_SYSSTATUS:
		printf("RESP_SYSSTATUS\r\n");
		memset(packet.DATA, 0, sizeof(packet.DATA));
		data_size = 2;
		packet.HEADER = START;
		packet.LENGTH = 0x04;
		packet.COMMAND = RESP_SYSSTATUS;
		packet.DATA[0] = data0.data;//0x01;
		packet.DATA[1] = data1.data;//0x02;
		packet.CHECKSUM = CheckSumModVerify(&packet, packet.LENGTH);
		send_transmit(&packet, data_size);
		printf("%d, %d, %d, %d, %d, %d, %d, %d \r\n",data0.b7,data0.b6,data0.b5,data0.b4,data0.b3,data0.b2,data0.b1,data0.b0);
		printf("%d, %d, %d, %d, %d, %d, %d, %d \r\n",data1.b7,data1.b6,data1.b5,data1.b4,data1.b3,data1.b2,data1.b1,data1.b0);
		break;

	case REQ_RESET:
		printf("RESP_RESET\r\n");
		memset(packet.DATA, 0, sizeof(packet.DATA));
		data_size = 1;
		printf("RESP_SYSSTATUS\r\n");
		packet.HEADER = START;
		packet.LENGTH = 0x03;
		packet.COMMAND = RESP_RESET;
		packet.DATA[0] = 0x03;
		packet.CHECKSUM = CheckSumModVerify(&packet, packet.LENGTH);
		send_transmit(&packet, data_size);
		break;

	case REQ_FACTORYRESET:
		printf("RESP_FACTORYRESET\r\n");
		memset(packet.DATA, 0, sizeof(packet.DATA));
		data_size = 1;
		packet.HEADER = START;
		packet.LENGTH = 0x03;
		packet.COMMAND = RESP_FACTORYRESET;
		packet.DATA[0] = 0x04;
		packet.CHECKSUM = CheckSumModVerify(&packet, packet.LENGTH);
		send_transmit(&packet, data_size);
		break;

	case REQ_DEBUGMODE:
		printf("RESP_DEBUGMODE\r\n");
		memset(packet.DATA, 0, sizeof(packet.DATA));
		data_size = 1;
		packet.HEADER = START;
		packet.LENGTH = 0x03;
		packet.COMMAND = RESP_DEBUGMODE;
		packet.DATA[0] = 0x05;
		packet.CHECKSUM = CheckSumModVerify(&packet, packet.LENGTH);
		send_transmit(&packet, data_size);
		break;

	case SEND_SYSEVENT:
		printf("RESP_SYSEVENT\r\n");
		memset(packet.DATA, 0, sizeof(packet.DATA));
		data_size = 1;
		packet.HEADER = START;
		packet.LENGTH = 0x03;
		packet.COMMAND = RESP_SYSEVENT;
		packet.DATA[0] = 0x06;
		packet.CHECKSUM = CheckSumModVerify(&packet, packet.LENGTH);
		send_transmit(&packet, data_size);
		break;

	case REQ_WRITE_SET:
		printf("REQ_WRITE_SET\r\n");
		memset(packet.DATA, 0, sizeof(packet.DATA));
		data_size = 1;
		packet.HEADER = START;
		packet.LENGTH = 0x03;
		packet.COMMAND = RESP_WRITE_SET;
		packet.DATA[0] = 0x06;
		packet.CHECKSUM = CheckSumModVerify(&packet, packet.LENGTH);
		send_transmit(&packet, data_size);
		break;

	/* NOT DESCRIBED*/
	case DBG_REQSTATUS:
		printf("RESP_REQSTATUS\r\n");
		break;
	case DBG_SETCONRTROL:
		printf("RESP_SETCONRTROL\r\n");
		break;
	}
}

void set_systemstatus(void) {
	switch(SysMode.OperationIntensity){
		case LEVEL1:
			data0.b0 = 1;
			data0.b1 = 0;
			data0.b2 = 0;
			break;
		case LEVEL2:
			data0.b0 = 0;
			data0.b1 = 1;
			data0.b2 = 0;
			break;
		case LEVEL3:
			data0.b0 = 1;
			data0.b1 = 1;
			data0.b2 = 0;
			break;
		case LEVEL4:
			data0.b0 = 0;
			data0.b1 = 0;
			data0.b2 = 1;
			break;
		case LEVEL5:
			data0.b0 = 1;
			data0.b1 = 0;
			data0.b2 = 1;
			break;
		default:
			data0.b0 = 0;
			data0.b1 = 0;
			data0.b2 = 0;
			break;
	}
	switch(SysMode.OperationMode){
		case STANDBY_MODE:
			data0.b6 = 0;
			break;
		case SOOTHING_MODE:
			data0.b3 = 0;
			data0.b4 = 0;
			data0.b5 = 0;
			data0.b6 = 1;
			break;
		case BLEMISH_CARE:
			data0.b3 = 1;
			data0.b4 = 0;
			data0.b5 = 0;
			data0.b6 = 1;
			break;
		case MOISTURE_MODE:
			data0.b3 = 0;
			data0.b4 = 1;
			data0.b5 = 0;
			data0.b6 = 1;
			break;
		case COLLAGEN_MODE:
			data0.b3 = 1;
			data0.b4 = 1;
			data0.b5 = 0;
			data0.b6 = 1;
			break;
		case TIGHTENING_MODE:
			data0.b3 = 0;
			data0.b4 = 0;
			data0.b5 = 1;
			data0.b6 = 1;
			break;
		case LIFTING_MODE:
			data0.b3 = 1;
			data0.b4 = 0;
			data0.b5 = 1;
			data0.b6 = 1;
			break;
		case EYECARE_MODE:
			data0.b3 = 0;
			data0.b4 = 1;
			data0.b5 = 1;
			data0.b6 = 1;
			break;
	}
	switch(SysMode.KeyLockStatus){
		case KEY_UNLOCKED:
			data0.b7 = 0;
			break;
		case KEY_LOCKED:
			data0.b7 = 1;
			break;
	}

	//Dec2Bin(180); //remain time
	Dec2Bin(e_time); //remain time
}

void set_systemstatus(void){
	if(SysMode.OperationIntensity != Pre_SysMode.OerationInesity){
		if(SysMode.OperationIntensity > Pre_SysMode.OperationInensity){
			data0 << 1;
		}else{
			data0.b0 >> 1;
		}
	SysMode.OperationIntensity  = Pre_SysMode.OperationInensity;
	}
}

/*******************************************************************************
* Function Name  : CheckSumVerify
* Description    : Verify a checksum field
* Input          : pacBuffer : pointer to the desired host protocol
*                  wPayloadSize : Payload Size (not included checksum)
* Output         : None
* Return         : TRUE if Checksum verified successfully, FALSE for others
* Note           : Check Sum of all fields excluding Check Sum itself will be
*                  stored as Check Sum. In case of response message (Ack/Nack),
*                  Check Sum field will be ommitted.
*                  Calculation method of Check Sum is :
*                  (1) All Bytes of all data will be added.
*                  (2) Take least significant one Byte alone out
*                  (3) Calculate twos complement of the value taken out
*                  (4) Carry-over will be neglected.
* Attension      : None
*******************************************************************************/

unsigned char CheckSumVerify (unsigned char *pacBuffer, unsigned short wPayloadSize)
{
 unsigned char cChksum = 0;
    unsigned short wI;

    for(wI = 0; wI < wPayloadSize-1; wI++)
    {
        cChksum += pacBuffer[wI];
    }

    cChksum = (~cChksum)+0x01;

    return cChksum;
}

unsigned char CheckSumModVerify (BT_Packet *pacBuffer, uint8_t wPayloadSize)
{

	unsigned char cChksum = 0;
    unsigned short wI;

    cChksum = pacBuffer->HEADER + pacBuffer->LENGTH + pacBuffer->COMMAND;
    for(wI = 0; wI < wPayloadSize-2; wI++)
    {
        cChksum += pacBuffer->DATA[wI];
    }

    cChksum = (~cChksum)+0x01;
	printf("cChksum :%x\r\n", cChksum);

    return cChksum;
}

void Dec2Bin(int num) {
	uint8_t result[7];
    for (int i = 7; i >= 0; --i) { //8자리 숫자까지 나타냄
        result[i] = num >> i & 1;
        //printf("result[%d] : %d\r\n",i, result[i]);
        //printf("data %d : %d", i, data1[i]);
    }
    data1.b0 = result[0];
    data1.b1 = result[1];
    data1.b2 = result[2];
    data1.b3 = result[3];
    data1.b4 = result[4];
    data1.b5 = result[5];
    data1.b6 = result[6];
    data1.b7 = result[7];
}

void send_transmit(BT_Packet *send, uint8_t data_size){
	HAL_UART_Transmit(&huart1, &send->HEADER, 1, 0xFFFF);
	HAL_UART_Transmit(&huart1, &send->LENGTH, 1, 0xFFFF);
	HAL_UART_Transmit(&huart1, &send->COMMAND, 1, 0xFFFF);
	HAL_UART_Transmit(&huart1, &send->DATA, data_size, 0xFFFF);
	HAL_UART_Transmit(&huart1, &send->CHECKSUM, 1, 0xFFFF);

}
